Transparency (human–computer interaction) - Wikipedia Transparency (human–computer interaction) From Wikipedia, the free encyclopedia (Redirected from Transparency (human-computer interaction)) Jump to navigation Jump to search This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. Find sources: "Transparency" human–computer interaction – news · newspapers · books · scholar · JSTOR (February 2019) (Learn how and when to remove this template message) Any change in a computing system, such as a new feature or new component, is transparent if the system after change adheres to previous external interface as much as possible while changing its internal behaviour. The purpose is to shield from change all systems (or human users) on the other end of the interface. Confusingly, the term refers to overall invisibility of the component, it does not refer to visibility of component's internals (as in white box or open system). The term transparent is widely used in computing marketing in substitution of the term invisible, since the term invisible has a bad connotation (usually seen as something that the user can't see and has no control over) while the term transparent has a good connotation (usually associated with not hiding anything). The vast majority of the times, the term transparent is used in a misleading way to refer to the actual invisibility of a computing process.[citation needed] Because of this misleading and counter-intuitive definition, modern computer literature tends to prefer use of "agnostic" over "transparent". The term is used particularly often with regard to an abstraction layer that is invisible either from its upper or lower neighbouring layer. Also temporarily used later around 1969 in IBM and Honeywell programming manuals[citation needed] the term referred to a certain computer programming technique. An application code was transparent when it was clear of the low-level detail (such as device-specific management) and contained only the logic solving a main problem. It was achieved through encapsulation – putting the code into modules that hid internal details, making them invisible for the main application. Examples[edit] For example, the Network File System is transparent, because it introduces the access to files stored remotely on the network in a way uniform with previous local access to a file system, so the user might even not notice it while using the folder hierarchy. The early File Transfer Protocol (FTP) is considerably less transparent, because it requires each user to learn how to access files through an ftp client. Similarly, some file systems allow transparent compression and decompression of data, enabling users to store more files on a medium without any special knowledge; some file systems encrypt files transparently. This approach does not require running a compression or encryption utility manually. In software engineering, it is also considered good practice to develop or use abstraction layers for database access, so that the same application will work with different databases; here, the abstraction layer allows other parts of the program to access the database transparently (see Data Access Object, for example). In object-oriented programming, transparency is facilitated through the use of interfaces that hide actual implementations done with different underlying classes. Types of transparency in distributed system[edit] Transparency means that any form of distributed system should hide its distributed nature from its users, appearing and functioning as a normal centralized system. There are many types of transparency: Access transparency – Regardless of how resource access and representation has to be performed on each individual computing entity, the users of a distributed system should always access resources in a single, uniform way.Example: SQL Queries Location transparency – Users of a distributed system should not have to be aware of where a resource is physically located.Example: Pages in the Web Migration transparency – Users should not be aware of whether a resource or computing entity possesses the ability to move to a different physical or logical location. Relocation transparency – Should a resource move while in use, this should not be noticeable to the end user. Replication transparency – If a resource is replicated among several locations, it should appear to the user as a single resource. Concurrent transparency – While multiple users may compete for and share a single resource, this should not be apparent to any of them. Failure transparency – Always try to hide any failure and recovery of computing entities and resources. Persistence transparency – Whether a resource lies in volatile or permanent memory should make no difference to the user. Security transparency – Negotiation of cryptographically secure access of resources must require a minimum of user intervention, or users will circumvent the security in preference of productivity.[citation needed] Formal definitions of most of these concepts can be found in RM-ODP, the Open Distributed Processing Reference Model (ISO 10746). The degree to which these properties can or should be achieved may vary widely. Not every system can or should hide everything from its users. For instance, due to the existence of a fixed and finite speed of light there will always be more latency on accessing resources distant from the user. If one expects real-time interaction with the distributed system, this may be very noticeable. References[edit] Retrieved from "https://en.wikipedia.org/w/index.php?title=Transparency_(human–computer_interaction)&oldid=982154701" Categories: Human–computer interaction Distributed computing architecture Software architecture Hidden categories: Articles needing additional references from February 2019 All articles needing additional references All articles with unsourced statements Articles with unsourced statements from July 2020 Articles with unsourced statements from July 2007 Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages العربية Čeština Deutsch Français Bahasa Indonesia 日本語 Edit links This page was last edited on 6 October 2020, at 13:33 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement