Intel 8080 - Wikipedia Intel 8080 From Wikipedia, the free encyclopedia Jump to navigation Jump to search Not to be confused with the numbered minor planet 8080 Intel. Intel 8080 An Intel C8080A processor variant with white ceramic, a gold heat spreader, and gold pins. General information Launched April 1974; 46 years ago (1974-04) Discontinued 1990; 30 years ago (1990)[1] Marketed by Intel Designed by Intel Common manufacturer(s) Intel Performance Max. CPU clock rate 2 MHz to 3.125 MHz Data width 8-bit Address width 16-bit Architecture and classification Min. feature size 6 µm Instruction set 8080 Physical specifications Transistors 6,000 Cores 1 Package(s) 40-pin DIP Socket(s) DIP40 History Predecessor Intel 8008 Successor Intel 8085 The Intel 8080 ("eighty-eighty") is the second 8-bit microprocessor designed and manufactured by Intel. It first appeared in April 1974 and is an extended and enhanced variant of the earlier 8008 design, although without binary compatibility.[2] The initial specified clock rate or frequency limit was 2 MHz, and with common instructions using 4, 5, 7, 10, or 11 cycles this meant that it operated at a typical speed of a few hundred thousand instructions per second. A faster variant 8080A-1 (Sometimes called the 8080B) became available later with clock frequency limit up to 3.125 MHz. The 8080 needs two support chips to function in most applications, the i8224 clock generator/driver and the i8228 bus controller, and it is implemented in N-type metal-oxide-semiconductor logic (NMOS) using non-saturated enhancement mode transistors as loads[3][4] thus demanding a +12 V and a −5 V voltage in addition to the main transistor–transistor logic (TTL) compatible +5 V. Although earlier microprocessors were used for calculators, cash registers, computer terminals, industrial robots,[5] and other applications, the 8080 became one of the first widespread microprocessors. Several factors contributed to its popularity: its 40-pin package made it easier to interface than the 18-pin 8008, and also made its data bus more efficient; its NMOS implementation gave it faster transistors than those of the P-type metal-oxide-semiconductor logic (PMOS) 8008, while also simplifying interfacing by making it TTL-compatible; a wider variety of support chips was available; its instruction set was enhanced over the 8008;[6] and its full 16-bit address bus (versus the 14-bit one of the 8008) enabled it to access 64 KB of memory, four times more than the 8008's range of 16 KB. It became the engine of the Altair 8800, and subsequent S-100 bus personal computers, until it was replaced by the Z80 in this role, and was the original target CPU for CP/M operating systems developed by Gary Kildall. The 8080 was successful enough that translation compatibility at the assembly language level became a design requirement for the Intel 8086 when its design began in 1976, and led to the 8080 directly influencing all later variants of the ubiquitous 32-bit and 64-bit x86 architectures. Contents 1 Description 1.1 Programming model 1.1.1 Registers 1.1.2 Flags 1.1.3 Commands, instructions 1.1.3.1 8-bit instructions 1.1.3.2 16-bit operations 1.2 Input/output scheme 1.2.1 Input output port space 1.2.2 Separate stack space 1.3 The internal state word 1.4 Example code 1.5 Pin use 2 Support chips 3 Physical implementation 4 The industrial impact 4.1 Applications and successors 4.2 Industry change 5 History 5.1 Patent 6 Cultural impact 7 See also 8 References 9 Further reading 10 External links Description[edit] Programming model[edit] i8080 microarchitecture Intel 8080 registers 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 (bit position) Main registers A Flags Program Status Word B C B D E D H L H (indirect address) Index registers SP Stack Pointer Program counter PC Program Counter Status register S Z - AC - P - C Flags The Intel 8080 is the successor to the 8008. It uses the same basic instruction set and register model as the 8008 (developed by Computer Terminal Corporation), even though it is not source code compatible nor binary code compatible with its predecessor. Every instruction in the 8008 has an equivalent instruction in the 8080 (even though the opcodes differ between the two CPUs). The 8080 also adds a few 16-bit operations in its instruction set. Whereas the 8008 required the use of the HL register pair to indirectly access its 14-bit memory space, the 8080 added addressing modes to allow direct access to its full 16-bit memory space. In addition, the internal 7-level push-down call stack of the 8008 was replaced by a dedicated 16-bit stack-pointer (SP) register. The 8080's large 40-pin DIP packaging permits it to provide a 16-bit address bus and an 8-bit data bus, allowing easy access to 64 KiB of memory. Registers[edit] The processor has seven 8-bit registers (A, B, C, D, E, H, and L), where A is the primary 8-bit accumulator, and the other six registers can be used as either individual 8-bit registers or as three 16-bit register pairs (BC, DE, and HL, referred to as B, D and H in Intel documents) depending on the particular instruction. Some instructions also enable the HL register pair to be used as a (limited) 16-bit accumulator, and a pseudo-register M can be used almost anywhere that any other register can be used, referring to the memory address pointed to by the HL pair. It also has a 16-bit stack pointer to memory (replacing the 8008's internal stack), and a 16-bit program counter. Flags[edit] The processor maintains internal flag bits (a status register), which indicate the results of arithmetic and logical instructions. Only certain instructions affect the flags. The flags are: Sign (S), set if the result is negative. Zero (Z), set if the result is zero. Parity (P), set if the number of 1 bits in the result is even. Carry (C), set if the last addition operation resulted in a carry or if the last subtraction operation required a borrow Auxiliary carry (AC or H), used for binary-coded decimal arithmetic (BCD). The carry bit can be set or complemented by specific instructions. Conditional-branch instructions test the various flag status bits. The flags can be copied as a group to the accumulator. The A accumulator and the flags together are called the PSW register, or program status word. Commands, instructions[edit] As with many other 8-bit processors, all instructions are encoded in one byte (including register numbers, but excluding immediate data), for simplicity. Some of them are followed by one or two bytes of data, which can be an immediate operand, a memory address, or a port number. Like larger processors, it has automatic CALL and RET instructions for multi-level procedure calls and returns (which can even be conditionally executed, like jumps) and instructions to save and restore any 16-bit register pair on the machine stack. There are also eight one-byte call instructions (RST) for subroutines located at the fixed addresses 00h, 08h, 10h, ..., 38h. These are intended to be supplied by external hardware in order to invoke a corresponding interrupt service routine, but are also often employed as fast system calls. The most sophisticated command is XTHL, which is used for exchanging the register pair HL with the value stored at the address indicated by the stack pointer. 8-bit instructions[edit] Most 8-bit operations can only be performed on the 8-bit accumulator (the A register). For 8-bit operations with two operands, the other operand can be either an immediate value, another 8-bit register, or a memory byte addressed by the 16-bit register pair HL. Direct copying is supported between any two 8-bit registers and between any 8-bit register and an HL-addressed memory byte. Due to the regular encoding of the MOV instruction (using a quarter of available opcode space), there are redundant codes to copy a register into itself (MOV B,B, for instance), which are of little use, except for delays. However, what would have been a copy from the HL-addressed cell into itself (i.e., MOV M,M) is instead used to encode the halt (HLT) instruction, halting execution until an external reset or interrupt occurs. 16-bit operations[edit] Although the 8080 is generally an 8-bit processor, it also has limited abilities to perform 16-bit operations: Any of the three 16-bit register pairs (BC, DE, or HL, referred to as B, D, H in Intel documents) or SP can be loaded with an immediate 16-bit value (using LXI), incremented or decremented (using INX and DCX), or added to HL (using DAD). The XCHG[7] instruction exchanges the values of the HL and DE register pairs. By adding HL to itself, it is possible to achieve the same result as a 16-bit arithmetical left shift with one instruction. The only 16-bit instructions that affect any flag are DAD H/D/B, which set the CY (carry) flag in order to allow for programmed 24-bit or 32-bit arithmetic (or larger), needed to implement floating-point arithmetic, for instance. Input/output scheme[edit] Input output port space[edit] The 8080 supports up to 256[8] input/output (I/O) ports, accessed via dedicated I/O instructions taking port addresses as operands. This I/O mapping scheme is regarded as an advantage, as it frees up the processor's limited address space. Many CPU architectures instead use so-called memory-mapped I/O (MMIO), in which a common address space is used for both RAM and peripheral chips. This removes the need for dedicated I/O instructions, although a drawback in such designs may be that special hardware must be used to insert wait states, as peripherals are often slower than memory. However, in some simple 8080 computers, I/O is indeed addressed as if they were memory cells, "memory-mapped", leaving the I/O commands unused. I/O addressing can also sometimes employ the fact that the processor outputs the same 8-bit port address to both the lower and the higher address byte (i.e., IN 05h would put the address 0505h on the 16-bit address bus). Similar I/O-port schemes are used in the backward-compatible Zilog Z80 and Intel 8085, and the closely related x86 microprocessor families. Separate stack space[edit] One of the bits in the processor state word (see below) indicates that the processor is accessing data from the stack. Using this signal, it is possible to implement a separate stack memory space. However, this feature is seldom used. The internal state word[edit] For more advanced systems, during one phase of its working loop, the processor set its "internal state byte" on the data bus. This byte contains flags that determine whether the memory or I/O port is accessed and whether it is necessary to handle an interrupt. The interrupt system state (enabled or disabled) is also output on a separate pin. For simple systems, where the interrupts are not used, it is possible to find cases where this pin is used as an additional single-bit output port (the popular Radio-86RK computer made in the Soviet Union, for instance). Example code[edit] The following 8080/8085 assembler source code is for a subroutine named memcpy that copies a block of data bytes of a given size from one location to another. The data block is copied one byte at a time, and the data movement and looping logic utilizes 16-bit operations.            100010001000  781001  B11002  C81003  1A1004  771005  131006  231007  0B1008  781009  B1100A  C2 03 10100D  C9 ; memcpy --; Copy a block of memory from one location to another.;; Entry registers;       BC - Number of bytes to copy;       DE - Address of source data block;       HL - Address of target data block;; Return registers;       BC - Zero            org     1000h       ;Origin at 1000hmemcpy      public            mov     a,b         ;Copy register B to register A            ora     c           ;Bitwise OR of A and C into register A            rz                  ;Return if the zero-flag is set high.loop:       ldax    d           ;Load A from the address pointed by DE            mov     m,a         ;Store A into the address pointed by HL            inx     d           ;Increment DE            inx     h           ;Increment HL            dcx     b           ;Decrement BC   (does not affect Flags)            mov     a,b         ;Copy B to A    (so as to compare BC with zero)            ora     c           ;A = A | C      (set zero)            jnz     loop        ;Jump to 'loop:' if the zero-flag is not set.               ret                 ;Return Pin use[edit] The address bus has its own 16 pins, and the data bus has 8 pins that are usable without any multiplexing. Using the two additional pins (read and write signals), it is possible to assemble simple microprocessor devices very easily. Only the separate IO space, interrupts, and DMA need added chips to decode the processor pin signals. However, the processor load capacity is limited, and even simple computers often contain bus amplifiers. The processor needs three power sources (−5, +5, and +12 V) and two non-overlapping high-amplitude synchronizing signals. However, at least the late Soviet version КР580ВМ80А was able to work with a single +5 V power source, the +12 V pin being connected to +5 V and the −5 V pin to ground. The processor consumes about 1.3 W of power. The pin-out table, from the chip's accompanying documentation, describes the pins as follows: Pin number Signal Type Comment 1 A10 Output Address bus 10 2 GND — Ground 3 D4 Bidirectional Bidirectional data bus. The processor also transiently sets here the "processor state", providing information about what the processor is currently doing: D0 reading interrupt command. In response to the interrupt signal, the processor is reading and executing a single arbitrary command with this flag raised. Normally the supporting chips provide the subroutine call command (CALL or RST), transferring control to the interrupt handling code. D1 reading (low level means writing) D2 accessing stack (probably a separate stack memory space was initially planned) D3 doing nothing, has been halted by the HLT instruction D4 writing data to an output port D5 reading the first byte of an executable instruction D6 reading data from an input port D7 reading data from memory 4 D5 5 D6 6 D7 7 D3 8 D2 9 D1 10 D0 11 −5 V — The −5 V power supply. This must be the first power source connected and the last disconnected, otherwise the processor will be damaged. 12 RESET Input Reset. The signal forces execution of commands located at address 0000. The content of other processor registers is not modified. This is an inverting input (the active level being logical 0) 13 HOLD Input Direct memory access request. The processor is requested to switch the data and address bus to the high impedance ("disconnected") state. 14 INT Input Interrupt request 15 φ2 Input The second phase of the clock generator signal 16 INTE Output The processor has two commands for setting 0 or 1 level on this pin. The pin normally is supposed to be used for interrupt control. However, in simple computers it was sometimes used as a single bit output port for various purposes. 17 DBIN Output Read (the processor reads from memory or input port) 18 WR Output Write (the processor writes to memory or output port). This is an inverted output, the active level being logical zero. 19 SYNC Output Active level indicates that the processor has put the "state word" on the data bus. The various bits of this state word provide added information to support the separate address and memory spaces, interrupts, and direct memory access. This signal is required to pass through additional logic before it can be used to write the processor state word from the data bus into some external register, e.g., 8238-System Controller and Bus Driver. 20 +5 V — The + 5 V power supply 21 HLDA Output Direct memory access confirmation. The processor switches data and address pins into the high impedance state, allowing another device to manipulate the bus 22 φ1 Input The first phase of the clock generator signal 23 READY Input Wait. With this signal it is possible to suspend the processor's work. It is also used to support the hardware-based step-by step debugging mode. 24 WAIT Output Wait (indicates that the processor is in the waiting state) 25 A0 Output Address bus 26 A1 27 A2 28 12 V — The +12 V power supply. This must be the last connected and first disconnected power source. 29 A3 Output The address bus; can switch into high impedance state on demand 30 A4 31 A5 32 A6 33 A7 34 A8 35 A9 36 A15 37 A12 38 A13 39 A14 40 A11 Support chips[edit] A key factor in the success of the 8080 was the broad range of support chips available, providing serial communications, counter/timing, input/output, direct memory access, and programmable interrupt control amongst other functions: 8238 – System controller and bus driver 8251 – Communication controller 8253 – Programmable interval timer 8255 – Programmable peripheral interface 8257 – DMA controller 8259 – Programmable interrupt controller Physical implementation[edit] The 8080 integrated circuit uses non-saturated enhancement-load nMOS gates, demanding extra voltages (for the load-gate bias). It was manufactured in a silicon gate process using a minimal feature size of 6 µm. A single layer of metal is used to interconnect the approximately 6,000 transistors[9] in the design, but the higher resistance polysilicon layer, which required higher voltage for some interconnects, is implemented with transistor gates. The die size is approximately 20 mm2. The industrial impact[edit] Applications and successors[edit] The 8080 is used in many early microcomputers, such as the MITS Altair 8800 Computer, Processor Technology SOL-20 Terminal Computer and IMSAI 8080 Microcomputer, forming the basis for machines running the CP/M operating system (the later, almost fully compatible and more able, Zilog Z80 processor would capitalize on this, with Z80 & CP/M becoming the dominant CPU and OS combination of the period circa 1976 to 1983 much as did the x86 & DOS for the PC a decade later). Even in 1979 after introduction of the Z80 and 8085 processors, five manufacturers of the 8080 were selling an estimated 500,000 units per month at a price around $3 to $4 each.[10] The first single-board microcomputers, such as MYCRO-1 and the dyna-micro / MMD-1 (see: Single-board computer) were based on the Intel 8080. One of the early uses of the 8080 was made in the late 1970s by Cubic-Western Data of San Diego, CA in its Automated Fare Collection Systems custom designed for mass transit systems around the world. An early industrial use of the 8080 is as the "brain" of the DatagraphiX Auto-COM (Computer Output Microfiche) line of products which takes large amounts of user data from reel-to-reel tape and images it onto microfiche. The Auto-COM instruments also include an entire automated film cutting, processing, washing, and drying sub-system – quite a feat, both then and in the 21st century, to all be accomplished successfully with only an 8-bit microprocessor running at a clock speed of less than 1 MHz with a 64 KB memory limit. Also, several early video arcade games were built around the 8080 microprocessor, including Space Invaders, one of the most popular arcade games ever made. Shortly after the launch of the 8080, the Motorola 6800 competing design was introduced, and after that, the MOS Technology 6502 derivative of the 6800. Zilog introduced the Z80, which has a compatible machine language instruction set and initially used the same assembly language as the 8080, but for legal reasons, Zilog developed a syntactically-different (but code compatible) alternative assembly language for the Z80. At Intel, the 8080 was followed by the compatible and electrically more elegant 8085. Later Intel issued the assembly-language compatible (but not binary-compatible) 16-bit 8086 and then the 8/16-bit 8088, which was selected by IBM for its new PC to be launched in 1981. Later NEC made the NEC V20 (an 8088 clone with Intel 80186 instruction set compatibility) which also supports an 8080 emulation mode. This is also supported by NEC's V30 (a similarly enhanced 8086 clone). Thus, the 8080, via its instruction set architecture (ISA), made a lasting impact on computer history. A number of processors compatible with the Intel 8080A were manufactured in the Eastern Bloc: the KR580VM80A (initially marked as KP580ИK80) in the Soviet Union, the MCY7880[11] made by Unitra CEMI in Poland, the MHB8080A[12] made by TESLA in Czechoslovakia, the 8080APC[12] made by Tungsram / MEV in Hungary, and the MMN8080[12] made by Microelectronica Bucharest in Romania. As of 2017[update], the 8080 is still in production at Lansdale Semiconductors.[13] Intel 8080 second sources AMD Am9080 CEMI MCY7880 (Poland) Kvazar Kiev K580IK80 (Soviet Union) Mitsubishi Electric M5L8080 National Semiconductor INS8080 NEC μPD8080AF OKI MSM8080 Siemens SAB8080 Signetics MP8080 Tesla (Czechoslovak company) MHB8080 Texas Instruments TMS8080 Industry change[edit] This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed. (March 2014) (Learn how and when to remove this template message) This section possibly contains original research. Please improve it by verifying the claims made and adding inline citations. Statements consisting only of original research should be removed. (August 2017) (Learn how and when to remove this template message) The 8080 also changed how computers were created. When the 8080 was introduced, computer systems were usually created by computer manufacturers such as Digital Equipment Corporation, Hewlett Packard, or IBM. A manufacturer would produce the whole computer, including processor, terminals, and system software such as compilers and operating system. The 8080 was designed for almost any application except a complete computer system. Hewlett Packard developed the HP 2640 series of smart terminals around the 8080. The HP 2647 is a terminal which runs the programming language BASIC on the 8080. Microsoft would market as its founding product the first popular language for the 8080, and would later acquire DOS for the IBM PC. The 8080 and 8085 gave rise to the 8086, which was designed as a source code compatible (although not binary compatible) extension of the 8085. This design, in turn, later spawned the x86 family of chips, the basis for most CPUs in use today. Many of the 8080's core machine instructions and concepts, for example, registers named A, B, C, and D, and many of the flags used to control conditional jumps, are still in use in the widespread x86 platform. 8080 assembly code can still be directly translated into x86 instructions; all of its core elements are still present. History[edit] Federico Faggin, the originator of the 8080 architecture in early 1972, proposed it to Intel's management and pushed for its implementation. He finally got the permission to develop it six months later. Faggin hired Masatoshi Shima from Japan in November 1972, who did the detailed design under his direction, using the design methodology for random logic with silicon gate that Faggin had created for the 4000 family. Stanley Mazor contributed a couple of instructions to the instruction set. Shima finished the layout in August 1973. After the regulation of NMOS fabrication, a prototype of the 8080 was completed in January 1974. It had a flaw, in that driving with standard TTL devices increased the ground voltage because high current flowed into the narrow line. However, Intel had already produced 40,000 units of the 8080 at the direction of the sales section before Shima characterized the prototype. It was released as requiring Low-power Schottky TTL (LS TTL) devices. The 8080A fixed this flaw.[14] Intel offered an instruction set simulator for the 8080 named INTERP/80. It was written by Gary Kildall while he worked as a consultant for Intel.[15] Patent[edit] US patent 4010449, Federico Faggin, Masatoshi Shima, Stanley Mazor, "MOS computer employing a plurality of separate chips", issued March 1, 1977 Cultural impact[edit] Asteroid 8080 Intel is named as a pun and praise on the name of Intel 8080.[16] Microsoft's published phone number, 425-882-8080, was chosen because so much early work was on this chip. Many of Intel's main phone numbers also take a similar form: xxx-xxx-8080 See also[edit] CP/M – operating system S-100 bus MPT8080 References[edit] ^ CPU History – The CPU Museum – Life Cycle of the CPU. ^ "From CPU to software, the 8080 Microcomputer is here". Electronic News. New York: Fairchild Publications. April 15, 1974. pp. 44–45. Electronic News was a weekly trade newspaper. The same advertisement appeared in the May 2, 1974 issue of Electronics magazine. ^ similar to pull-up resistors ^ Tohya, Hirokazu (2013). Switching Mode Circuit Analysis and Design: Innovative Methodology by Novel Solitary Electromagnetic Wave Theory. Bentham Science Publishers. p. 4. ISBN 9781608054497. ^ The 8008 (1972) was used for interpolation and control in ASEA's (now ABB) first line of general industrial robots, introduced October 1973. ^ The enhancements were largely based on customer feedback and Federico Faggin and others listening to minicomputer-oriented professionals about certain problems and lack of features in the 8008 architecture. (Source: 8008 and 8080 oral histories.) ^ 8080 instruction encoding. ClassicCMP.org. Retrieved on October 23, 2011. ^ Note: Some Intel datasheets from the 1970s advertise 512 I/O ports, because they count input and output ports separately. ^ Reichel-Orbital museum – CPU Collection. Museum.reichel-orbital.de. Retrieved on October 23, 2011. ^ Libes, Sol (November 1979). "Byte News". Byte. 11. 4. p. 82. ISSN 0360-5280. ^ MCY7880—a Polish-made clone of 8080. CPU World. Retrieved on October 23, 2011. ^ a b c Soviet chips and their western analogs. CPU-world. Retrieved on October 23, 2011. ^ "Intel – Microprocessor 8080A Family & 828X Series". Lansdale Semiconductor Inc. Retrieved June 20, 2017. ^ Shima, Masatoshi; Nishimura, Hirohiko; Ishida, Haruhisa (1979). "座談会 マイクロコンピュータの誕生 開発者 嶋 正利氏に聞く". Bit (in Japanese). 共立出版. 11 (11): 4–12. ISSN 0385-6984. ^ Kildall, Gary Arlen (January 1980). "The History of CP/M, The Evolution Of An Industry: One Person's Viewpoint". Dr. Dobb's Journal. pp. 6–7. Archived from the original on November 24, 2016. Retrieved June 3, 2013. ^ CFA-harvard.edu. CFA-harvard.edu. Retrieved on October 23, 2011. Further reading[edit] 8080A/8085 Assembly Language Programming; 1st Ed; Lance Leventhal; Adam Osborne & Associates; 495 pages; 1978. (archive) 8080/Z80 Assembly Language - Techniques for Improved Programming; 1st Ed; Alan Miller; John Wiley & Sons; 332 pages; 1981; ISBN 978-0471081241. (archive) Microprocessor Interfacing Techniques; 3rd Ed; Rodnay Zaks and Austin Lesea; Sybex; 466 pages; 1979; ISBN 978-0-89588-029-1. (archive) Z80 and 8080 Assembly Language Programming; 1st Ed; Kathe Spracklen; Hayden; 180 pages; 1979; ISBN 978-0810451674. (archive) External links[edit] Intel and other manufacturers' 8080 CPU images and descriptions at cpu-collection.de Scan of the Intel 8080 data book at DataSheetArchive.com Microcomputer Design, Second Edition, 1976 8080 Emulator written in JavaScript Intel 8080/KR580VM80A emulator in JavaScript Intel 8080 Microcomputer Systems User's Manual (September 1975, 262 pages) Intel 8080 Microcomputer Systems User's Manual (September 1975, 234 pages) v t e Intel processors Discontinued BCD oriented (4-bit) 4004 (1971) 4040 (1974) pre-x86 (8-bit) 8008 (1972) 8080 (1974) 8085 (1977) Early x86 (16-bit) 8086 (1978) 8088 (1979) 80186 (1982) 80188 (1982) 80286 (1982) x87 (external FPUs) 8/16-bit databus 8087 (1980) 16-bit databus 80187 80287 80387SX 32-bit databus 80387DX 80487 IA-32 (32-bit) 80386 SX 376 EX 80486 SX DX2 DX4 SL RapidCAD OverDrive A100/A110 Celeron (1998) M D (2004) Pentium Original P5 OverDrive Pro II II OverDrive III 4 M Dual-Core some Core Solo Duo Tolapai x86-64 (64-bit) Celeron D Dual-Core Pentium 4 D Extreme Edition Dual-Core some Core 2 some i7 Other CISC iAPX 432 EPIC Itanium RISC i860 i960 StrongARM XScale Current IA-32 (32-bit) Atom CE SoC Quark x86-64 (64-bit) Atom CE SoC Celeron Pentium Core i3 i5 i7 i9 M Xeon E3 E5 E7 D Phi Lists Celeron Pentium Pro II III 4 D M Core Core 2 i3 i5 i7 i9 M Atom Xeon Itanium Related Tick–tock model Chipsets GPUs GMA HD and Iris Graphics PCHs SCHs ICHs PIIXs Stratix Codenames Microarchitectures x86 P5 800 nm P5 600 nm P54C 350 nm P54CS P55C 250 nm Tillamook P6, Pentium M, Enhanced Pentium M 500 nm P6 350 nm P6 Klamath 250 nm Mendocino Dixon Tonga Covington Deschutes Katmai Drake Tanner 180 nm Coppermine Coppermine T Timna Cascades 130 nm Tualatin Banias 90 nm Dothan Stealey Tolapai Canmore 65 nm Yonah Sossaman NetBurst 180 nm Willamette Foster 130 nm Northwood Gallatin Prestonia 90 nm Tejas and Jayhawk Prescott Smithfield Nocona Irwindale Cranford Potomac Paxville 65 nm Cedar Mill Presler Dempsey Tulsa Core 65 nm Merom-L Merom Conroe-L Allendale Conroe Kentsfield Woodcrest Clovertown Tigerton 45 nm Penryn Penryn-QC Wolfdale Yorkfield Wolfdale-DP Harpertown Dunnington Nehalem 45 nm Auburndale Beckton (Nehalem-EX) Bloomfield Clarksfield Gainestown (Nehalem-EP) Havendale Jasper Forest Lynnfield 32 nm Arrandale Clarkdale Gulftown (Westmere-EP) Westmere-EX Sandy Bridge 32 nm Sandy Bridge Sandy Bridge-E Gladden 22 nm Ivy Bridge Ivy Bridge-EP Ivy Bridge-EX Haswell 22 nm Haswell 14 nm Broadwell Skylake 14 nm Skylake Kaby Lake (Amber Lake) Coffee Lake (Whiskey Lake) Cascade Lake Comet Lake Cooper Lake Palm Cove 10 nm Cannon Lake Sunny Cove 10 nm Ice Lake Willow Cove 14 nm Rocket Lake 10 nm Tiger Lake Sapphire Rapids Golden Cove 10 nm Alder Lake 7 nm Granite Rapids Redwood Cove 7 nm Meteor Lake Atom Bonnell Saltwell 45 nm Silverthorne Diamondville Pineview Lincroft Tunnel Creek Stellarton Sodaville Groveland 32 nm Cedarview Penwell Cloverview Berryville Centerton Silvermont Airmont 22 nm Valleyview Tangier Anniedale 14 nm Cherryview Goldmont 14 nm Goldmont Goldmont Plus Tremont 10 nm Tremont Gracemont Authority control BNF: cb12040115k (data) GND: 4138567-6 LCCN: sh85067144 Retrieved from "https://en.wikipedia.org/w/index.php?title=Intel_8080&oldid=991123930" Categories: Intel microprocessors Computer-related introductions in 1974 8-bit microprocessors Hidden categories: CS1 Japanese-language sources (ja) Use mdy dates from October 2011 Articles containing potentially dated statements from 2017 All articles containing potentially dated statements Articles needing additional references from March 2014 All articles needing additional references Articles that may contain original research from August 2017 All articles that may contain original research Wikipedia articles with BNF identifiers Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons Languages العربية Azərbaycanca বাংলা Беларуская Български Català Čeština Deutsch Eesti Ελληνικά Español فارسی Français Galego 한국어 Hrvatski Bahasa Indonesia Interlingua Italiano עברית Lietuvių Magyar മലയാളം Nederlands 日本語 Norsk bokmål Occitan Polski Português Русский සිංහල Slovenčina Српски / srpski Suomi Svenska Türkçe Українська Tiếng Việt 中文 Edit links This page was last edited on 28 November 2020, at 11:22 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement