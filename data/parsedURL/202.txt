CYK algorithm - Wikipedia CYK algorithm From Wikipedia, the free encyclopedia Jump to navigation Jump to search In computer science, the Cocke–Younger–Kasami algorithm (alternatively called CYK, or CKY) is a parsing algorithm for context-free grammars invented by Ichirō Sakai.[1] The algorithm is named after some of its rediscoverers: John Cocke, Daniel Younger and Tadao Kasami. It employs bottom-up parsing and dynamic programming. The standard version of CYK operates only on context-free grammars given in Chomsky normal form (CNF). However any context-free grammar may be transformed (after convention) to a CNF grammar expressing the same language (Sipser 1997). The importance of the CYK algorithm stems from its high efficiency in certain situations. Using Big O notation, the worst case running time of CYK is O ( n 3 ⋅ | G | ) {\displaystyle {\mathcal {O}}\left(n^{3}\cdot \left|G\right|\right)} , where n {\displaystyle n} is the length of the parsed string and | G | {\displaystyle \left|G\right|} is the size of the CNF grammar G {\displaystyle G} (Hopcroft & Ullman 1979, p. 140). This makes it one of the most efficient parsing algorithms in terms of worst-case asymptotic complexity, although other algorithms exist with better average running time in many practical scenarios. Contents 1 Standard form 2 Algorithm 2.1 As pseudocode 2.1.1 Probabilistic CYK (for finding the most probable parse) 2.2 As prose 3 Example 4 Extensions 4.1 Generating a parse tree 4.2 Parsing non-CNF context-free grammars 4.3 Parsing weighted context-free grammars 4.4 Valiant's algorithm 5 See also 6 References 7 Sources 8 External links Standard form[edit] The dynamic programming algorithm requires the context-free grammar to be rendered into Chomsky normal form (CNF), because it tests for possibilities to split the current sequence into two smaller sequences. Any context-free grammar that does not generate the empty string can be represented in CNF using only production rules of the forms A → α {\displaystyle A\rightarrow \alpha } and A → B C {\displaystyle A\rightarrow BC} . Algorithm[edit] As pseudocode[edit] The algorithm in pseudocode is as follows: let the input be a string I consisting of n characters: a1 ... an.let the grammar contain r nonterminal symbols R1 ... Rr, with start symbol R1.let P[n,n,r] be an array of booleans. Initialize all elements of P to false.for each s = 1 to n    for each unit production Rv → as        set P[1,s,v] = truefor each l = 2 to n -- Length of span    for each s = 1 to n-l+1 -- Start of span        for each p = 1 to l-1 -- Partition of span            for each production Ra    → Rb Rc                if P[p,s,b] and P[l-p,s+p,c] then set P[l,s,a] = trueif P[n,1,1] is true then    I is member of languageelse    I is not member of language Probabilistic CYK (for finding the most probable parse)[edit] Allows to recover the most probable parse given the probabilities of all productions. let the input be a string I consisting of n characters: a1 ... an.let the grammar contain r nonterminal symbols R1 ... Rr, with start symbol R1.let P[n,n,r] be an array of real numbers. Initialize all elements of P to zero.let back[n,n,r] be an array of backpointing triples.for each s = 1 to n  for each unit production Rv →as    set P[1,s,v] = Pr(Rv →as)for each l = 2 to n -- Length of span  for each s = 1 to n-l+1 -- Start of span    for each p = 1 to l-1 -- Partition of span             for each production Ra → Rb Rc        prob_splitting = Pr(Ra →Rb Rc) * P[p,s,b] * P[l-p,s+p,c]        if P[p,s,b] > 0 and P[l-p,s+p,c] > 0 and P[l,s,a] <  prob_splitting then           set P[l,s,a] = prob_splitting          set back[l,s,a] = <p,b,c> As prose[edit] In informal terms, this algorithm considers every possible substring of the input string and sets P [ l , s , v ] {\displaystyle P[l,s,v]} to be true if the substring of length l {\displaystyle l} starting from s {\displaystyle s} can be generated from nonterminal variable R v {\displaystyle R_{v}} . Once it has considered substrings of length 1, it goes on to substrings of length 2, and so on. For substrings of length 2 and greater, it considers every possible partition of the substring into two parts, and checks to see if there is some production P → Q R {\displaystyle P\to Q\;R} such that Q {\displaystyle Q} matches the first part and R {\displaystyle R} matches the second part. If so, it records P {\displaystyle P} as matching the whole substring. Once this process is completed, the sentence is recognized by the grammar if the substring containing the entire input string is matched by the start symbol. Example[edit] Sentence parsing using the CYK algorithm This is an example grammar: S ⟶ NP VP VP ⟶ VP PP VP ⟶ V NP VP ⟶ eats PP ⟶ P NP NP ⟶ Det N NP ⟶ she V ⟶ eats P ⟶ with N ⟶ fish N ⟶ fork Det ⟶ a {\displaystyle {\begin{aligned}{\ce {S}}&\ {\ce {->NP\ VP}}\\{\ce {VP}}&\ {\ce {->VP\ PP}}\\{\ce {VP}}&\ {\ce {->V\ NP}}\\{\ce {VP}}&\ {\ce {->eats}}\\{\ce {PP}}&\ {\ce {->P\ NP}}\\{\ce {NP}}&\ {\ce {->Det\ N}}\\{\ce {NP}}&\ {\ce {->she}}\\{\ce {V}}&\ {\ce {->eats}}\\{\ce {P}}&\ {\ce {->with}}\\{\ce {N}}&\ {\ce {->fish}}\\{\ce {N}}&\ {\ce {->fork}}\\{\ce {Det}}&\ {\ce {->a}}\end{aligned}}} Now the sentence she eats a fish with a fork is analyzed using the CYK algorithm. In the following table, in P [ i , j , k ] {\displaystyle P[i,j,k]} , i is the number of the row (starting at the bottom at 1), and j is the number of the column (starting at the left at 1). CYK table S VP S VP PP S NP NP NP V, VP Det. N P Det N she eats a fish with a fork For readability, the CYK table for P is represented here as a 2-dimensional matrix M containing a set of non-terminal symbols, such that Rk is in M [ i , j ] {\displaystyle M[i,j]} if, and only if, P [ i , j , k ] {\displaystyle P[i,j,k]} .In the above example, since a start symbol S is in M [ 7 , 1 ] {\displaystyle M[7,1]} , the sentence can be generated by the grammar. Extensions[edit] Generating a parse tree[edit] The above algorithm is a recognizer that will only determine if a sentence is in the language. It is simple to extend it into a parser that also constructs a parse tree, by storing parse tree nodes as elements of the array, instead of the boolean 1. The node is linked to the array elements that were used to produce it, so as to build the tree structure. Only one such node in each array element is needed if only one parse tree is to be produced. However, if all parse trees of an ambiguous sentence are to be kept, it is necessary to store in the array element a list of all the ways the corresponding node can be obtained in the parsing process. This is sometimes done with a second table B[n,n,r] of so-called backpointers.The end result is then a shared-forest of possible parse trees, where common trees parts are factored between the various parses. This shared forest can conveniently be read as an ambiguous grammar generating only the sentence parsed, but with the same ambiguity as the original grammar, and the same parse trees up to a very simple renaming of non-terminals, as shown by Lang (1994). Parsing non-CNF context-free grammars[edit] As pointed out by Lange & Leiß (2009), the drawback of all known transformations into Chomsky normal form is that they can lead to an undesirable bloat in grammar size. The size of a grammar is the sum of the sizes of its production rules, where the size of a rule is one plus the length of its right-hand side. Using g {\displaystyle g} to denote the size of the original grammar, the size blow-up in the worst case may range from g 2 {\displaystyle g^{2}} to 2 2 g {\displaystyle 2^{2g}} , depending on the transformation algorithm used. For the use in teaching, Lange and Leiß propose a slight generalization of the CYK algorithm, "without compromising efficiency of the algorithm, clarity of its presentation, or simplicity of proofs" (Lange & Leiß 2009). Parsing weighted context-free grammars[edit] It is also possible to extend the CYK algorithm to parse strings using weighted and stochastic context-free grammars. Weights (probabilities) are then stored in the table P instead of booleans, so P[i,j,A] will contain the minimum weight (maximum probability) that the substring from i to j can be derived from A. Further extensions of the algorithm allow all parses of a string to be enumerated from lowest to highest weight (highest to lowest probability). Valiant's algorithm[edit] The worst case running time of CYK is Θ ( n 3 ⋅ | G | ) {\displaystyle \Theta (n^{3}\cdot |G|)} , where n is the length of the parsed string and |G| is the size of the CNF grammar G. This makes it one of the most efficient algorithms for recognizing general context-free languages in practice. Valiant (1975) gave an extension of the CYK algorithm. His algorithm computes the same parsing tableas the CYK algorithm; yet he showed that algorithms for efficient multiplication of matrices with 0-1-entries can be utilized for performing this computation. Using the Coppersmith–Winograd algorithm for multiplying these matrices, this gives an asymptotic worst-case running time of O ( n 2.38 ⋅ | G | ) {\displaystyle O(n^{2.38}\cdot |G|)} . However, the constant term hidden by the Big O Notation is so large that the Coppersmith–Winograd algorithm is only worthwhile for matrices that are too large to handle on present-day computers (Knuth 1997), and this approach requires subtraction and so is only suitable for recognition. The dependence on efficient matrix multiplication cannot be avoided altogether: Lee (2002) has proved that any parser for context-free grammars working in time O ( n 3 − ε ⋅ | G | ) {\displaystyle O(n^{3-\varepsilon }\cdot |G|)} can be effectively converted into an algorithm computing the product of ( n × n ) {\displaystyle (n\times n)} -matrices with 0-1-entries in time O ( n 3 − ε / 3 ) {\displaystyle O(n^{3-\varepsilon /3})} . See also[edit] GLR parser Earley parser Packrat parser References[edit] ^ Grune, Dick (2008). Parsing techniques : a practical guide (2nd ed.). New York: Springer. ISBN 978-0-387-20248-8. Sources[edit] Cocke, John; Schwartz, Jacob T. (April 1970). Programming languages and their compilers: Preliminary notes (PDF) (Technical report) (2nd revised ed.). CIMS, NYU. Hopcroft, John E.; Ullman, Jeffrey D. (1979). Introduction to Automata Theory, Languages, and Computation. Reading/MA: Addison-Wesley. ISBN 0-201-02988-X.CS1 maint: ref=harv (link) Kasami, T. (1965). An efficient recognition and syntax-analysis algorithm for context-free languages (Technical report). AFCRL. 65-758. Knuth, Donald E. (November 14, 1997). The Art of Computer Programming Volume 2: Seminumerical Algorithms (3rd ed.). Addison-Wesley Professional. p. 501. ISBN 0-201-89684-2.CS1 maint: ref=harv (link) Lang, Bernard (1994). "Recognition can be harder than parsing". Comput. Intell. 10 (4): 486–494. CiteSeerX 10.1.1.50.6982. doi:10.1111/j.1467-8640.1994.tb00011.x.CS1 maint: ref=harv (link) Lange, Martin; Leiß, Hans (2009). "To CNF or not to CNF? An Efficient Yet Presentable Version of the CYK Algorithm". Informatica Didactica. 8.CS1 maint: ref=harv (link) Lee, Lillian (2002). "Fast context-free grammar parsing requires fast Boolean matrix multiplication". J. ACM. 49 (1): 1–15. arXiv:cs/0112018. doi:10.1145/505241.505242.CS1 maint: ref=harv (link) Sipser, Michael (1997). Introduction to the Theory of Computation (1st ed.). IPS. p. 99. ISBN 0-534-94728-X.CS1 maint: ref=harv (link) Valiant, Leslie G. (1975). "General context-free recognition in less than cubic time". J. Comput. Syst. Sci. 10 (2): 308–314. doi:10.1016/s0022-0000(75)80046-8.CS1 maint: ref=harv (link) Younger, Daniel H. (February 1967). "Recognition and parsing of context-free languages in time n3". Inform. Control. 10 (2): 189–208. doi:10.1016/s0019-9958(67)80007-x. External links[edit] CYK parsing demo in JavaScript Exorciser is a Java application to generate exercises in the CYK algorithm as well as Finite State Machines, Markov algorithms etc v t e Parsing algorithms Top-down LL Recursive descent Tail recursive Pratt parser Bottom-up Precedence Simple Operator Shunting-yard Bounded-context LR Simple Look-ahead Canonical Generalized CYK Recursive ascent Shift-reduce Mixed, other Combinator Chart Earley Related topics PEG Definite clause grammar Deterministic parsing Dynamic programming Memoization Parser generator LALR Parse tree AST Scannerless parsing History of compiler construction Comparison of parser generators Retrieved from "https://en.wikipedia.org/w/index.php?title=CYK_algorithm&oldid=991810157" Categories: Parsing algorithms Hidden categories: CS1 maint: ref=harv Pages that use a deprecated format of the chem tags Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages Afrikaans العربية Čeština Deutsch Español فارسی Français Galego 한국어 Nederlands 日本語 Norsk bokmål Polski Português Русский Српски / srpski Suomi Tiếng Việt 中文 Edit links This page was last edited on 1 December 2020, at 22:59 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement