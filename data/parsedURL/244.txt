Euphoria (programming language) - Wikipedia Euphoria (programming language) From Wikipedia, the free encyclopedia Jump to navigation Jump to search Euphoria Paradigm Imperative, procedural Designed by Jeremy Cowgar, Robert Craig (original), Matt Lewis, Derek Parnell Developer openEuphoria Group First appeared 1993; 27 years ago (1993) Stable release 4.0.5 / October 19, 2012; 8 years ago (2012-10-19) Typing discipline static, dynamic OS Cross-platform: Win32, Linux, macOS, FreeBSD, NetBSD, OpenBSD License BSD Filename extensions .e, .ex, .exw, .edb Website openeuphoria.org Influenced Phix Euphoria is a programming language created by Robert Craig of Rapid Deployment Software[1] in Toronto, Ontario, Canada. Initially developed (though not publicly released) on the Atari ST,[2] the first commercial release[3] was for the 16-bit DOS platform and was proprietary. In 2006, with the release of version 3,[4] Euphoria became open-source software. The openEuphoria Group continues to administer and develop the project.[5] In December 2010, the openEuphoria Group released version 4[6] of openEuphoria along with a new identity and mascot for the project. OpenEuphoria is currently available for Windows, Linux, macOS and three flavors of *BSD. Euphoria is a general-purpose high-level imperative-procedural interpreted language. A translator generates C source code and the GNU compiler collection (GCC) and Open Watcom compilers are supported. Alternatively, Euphoria programs may be bound[7] with the interpreter to create stand-alone executables. A number of graphical user interface (GUI) libraries are supported including Win32lib[8] and wrappers for wxWidgets,[9] GTK+[10] and IUP.[11] Euphoria has a simple built-in database[12] and wrappers for a variety of other databases.[13] Contents 1 Overview 2 History 3 Features 4 Execution modes 5 Use 6 Data types 7 Hello, World! 8 Examples 9 Parameter passing 10 Comparable languages 11 References 12 External links Overview[edit] The Euphoria language is a general purpose procedural language that focuses on simplicity, legibility, rapid development and performance via several means. Simplicity – It uses just four built-in data types (see below) and implements automatic garbage collection. Legibility – The syntax favors simple English keywords over the use of punctuation to delineate constructs. Rapid development – An interpreter encourages prototyping and incremental development. Performance – An efficient reference-counting garbage collector correctly handles cyclic references. History[edit] Developed as a personal project to invent a programming language from scratch, Euphoria was created by Robert Craig[1] on an Atari Mega-ST.[2] Many design ideas for the language came from Craig's Master's thesis in computer science at the University of Toronto.[14] Craig's thesis was heavily influenced by the work of John Backus on functional programming (FP) languages.[14] Craig ported his original Atari implementation to the 16-bit DOS platform and Euphoria was first released, version 1.0, in July 1993[3] under a proprietary licence. The original Atari implementation is described by Craig as "primitive"[15] and has not been publicly released. Euphoria continued to be developed and released by Craig via his company Rapid Deployment Software (RDS) and website rapideuphoria.com.[1] In October 2006 RDS released version 3[4] of Euphoria and announced that henceforth Euphoria would be freely distributed under an open-source software licence. RDS continued to develop Euphoria, culminating with the release of version 3.1.1 in August, 2007.[14][16] Subsequently, RDS ceased unilateral development of Euphoria and the openEuphoria Group[5] took over ongoing development. The openEuphoria Group released version 4 in December, 2010[17] along with a new logo and mascot for the openEuphoria project. Version 3.1.1 remains an important milestone release, being the last version of Euphoria which supports the DOS platform.[18] Euphoria is an acronym for End-User Programming with Hierarchical Objects for Robust Interpreted Applications although there is some suspicion that this is a backronym.[according to whom?] The Euphoria interpreter was originally written in C. With the release of version 2.5[14] in November 2004 the Euphoria interpreter was split into two parts: a front-end parser, and a back-end interpreter. The front-end is now written in Euphoria (and used with the Euphoria-to-C translator and the Binder). The main back-end and run time library are written in C. Features[edit] Euphoria was conceived and developed with the following design goals and features: Ease of learning and with consistent high-level constructs (more so than, for example, the BASIC language) Implementation of flat-form 32-bit memory to avoid complex memory management and size-addressing limits Debugging support and run-time error-handling Subscript and type checking Loose and strict variable typing Programming via objects as types (user-defined or otherwise) Interpreted, with automatic memory management and garbage collection Heterogeneous collection types (sequences) DOS graphics library (Euphoria language versions up to and including 3.1.1) Debugger Integrated database system Low-level memory handling Straightforward wrapping of (or access to) C libraries Execution modes[edit] Interpreter C translator (E2C) for standalone executables or dynamic linking Bytecode compiler and interpreter (shrouder[7]) The Binder[7] binds the Euphoria source code to the interpreter to create an executable. A read–eval–print loop (REPL) version is on the openEuphoria roadmap.[19] Use[edit] Euphoria is designed to readily facilitate handling of dynamic sets of data of varying types and is particularly useful for string and image processing. Euphoria has been used in artificial intelligence experiments, the study of mathematics, for teaching programming, and to implement fonts involving thousands of characters.[citation needed] A large part of the Euphoria interpreter is written in Euphoria. Data types[edit] Euphoria has two basic data types: Atom – A number, implemented as a 31-bit signed integer or a 64-bit IEEE floating-point. Euphoria dynamically changes between integer and floating point representation according to the current value. Sequence – A vector (array) with zero or more elements. Each element may be an atom or another sequence. The number of elements in a sequence is not fixed (i.e., the size of the vector/array does not have to be declared). The program may add or remove elements as needed during run-time. Memory allocation-deallocation is automatically handled by reference counting. Individual elements are referenced using an index value enclosed in square brackets. The first element in a sequence has an index of one [1]. Elements inside embedded sequences are referenced by additional bracked index values, thus X[3][2] refers to the second element contained in the sequence that is the third element of X. Each element of a sequence is an object type (see below). Euphoria has two additional data types predefined: Integer – An atom, restricted to 31-bit signed integer values in the range -1073741824 to 1073741823 (-2^30 to 2^30-1). Integer data types are more efficient than the atom data types, but cannot contain the same range of values. Characters are stored as integers, e.g., coding ASCII-'A' is exactly the same as coding 65. Object – A generic datatype which may contain any of the above (i.e., atom, sequence or integer) and which may be changed to another type during run-time. There is no character string data type. Strings are represented by a sequence of integer values. However, because literal strings are so commonly used in programming, Euphoria interprets double-quote enclosed characters as a sequence of integers. Thus "ABC" is seen as if the coder had written: {'A', 'B', 'C'} which is the same as: {65, 66, 67} Hello, World![edit] puts(1, "Hello, World!\n") Examples[edit] Program comments start with a double hyphen -- and go through the end of line. The following code looks for an old item in a group of items. If found, it removes it by concatenating all the elements before it with all the elements after it. Note that the first element in a sequence has the index one [1] and that $ refers to the length (i.e., total number of elements) of the sequence. global function delete_item( object old, sequence group )    integer pos            -- Code begins --    pos = find( old, group )    if pos > 0 then        group = group[1 .. pos-1] & group[pos+1 .. $]    end if    return groupend function The following modification to the above example replaces an old item with a new item. As the variables old and new have been defined as objects, they could be atoms or sequences. Type checking is not needed as the function will work with any sequence of data of any type and needs no external libraries. global function replace_item( object old, object new, sequence group )    integer pos            -- Code begins --    pos = find( old, group )    if pos > 0 then        group[pos] = new    end if    return groupend function Furthermore, no pointers are involved and subscripts are automatically checked. Thus the function cannot access memory out-of-bounds. There is no need to allocate or deallocate memory explicitly and no chance of a memory leak. The line group = group[1 .. pos-1] & group[pos+1 .. $] shows some of the sequence handling facilities. A sequence may contain a set of any types, and this can be sliced (to take a subset of the data in a sequence) and concatenated in expressions with no need for special functions. Parameter passing[edit] Arguments to routines are always passed by value; there is no pass-by-reference facility. However, parameters are allowed to be modified locally (i.e., within the callee) which is implemented very efficiently as sequences have automatic copy-on-write semantics. In other words, when you pass a sequence to a routine, initially only a reference to it is passed, but at the point the routine modifies this sequence parameter the sequence is copied and the routine updates only a copy of the original. Comparable languages[edit] Lua Phix Python REBOL Ruby References[edit] ^ a b c "RapidEuphoria homepage". Archived from the original on 2012-07-11. Retrieved 2010-12-30. ^ a b "RapidEuphoria forum, 2002-09-10 by Robert Craig". Archived from the original on 2011-07-16. Retrieved 2010-12-30. ^ a b "RapidEuphoria forum, 2006-10-18 16:44 by Robert Craig". Archived from the original on 2011-07-16. Retrieved 2010-12-30. ^ a b "RapidEuphoria forum, 2006-10-18 1:19 by Robert Craig". Archived from the original on 2011-07-16. Retrieved 2010-12-30. ^ a b "openEuphoria group homepage". Retrieved 2010-12-30. ^ "openEuphoria download page". Retrieved 2010-12-30. ^ a b c "openEuhporia manual, Binding and Shrouding". Retrieved 2011-01-07. ^ "Euphoria Win32Lib project at Sourceforge". Retrieved 2010-12-30. ^ "Euphoria wxEuphoria project at Sourceforge". Retrieved 2010-12-30. ^ "Euphoria GTK+ project at Sourceforge". Retrieved 2010-12-30. ^ "Euphoria IUP Project by Jeremy Cowgar". Retrieved 2010-12-30. ^ "openEuphoria manual, Database". Retrieved 2010-12-30. ^ "openEuphoria wiki, Database Interfaces". Retrieved 2011-01-02. ^ a b c d "RapidEuphoria website, release notes". Archived from the original on 2012-07-14. Retrieved 2010-12-30. ^ "RapidEuphoria forum, 2 Mar 1998 13:04 by Robert Craig". Archived from the original on 2011-07-16. Retrieved 2010-12-30. ^ "RapidEuphoria news". Archived from the original on 2010-12-16. Retrieved 2010-12-30. ^ "openEuphoria release notes". Archived from the original on 2011-07-27. Retrieved 2010-12-30. ^ "openEuhporia manual, Platform Specific Issues". Retrieved 2010-12-30. ^ "openEuphoria roadmap". Retrieved 2010-12-30. External links[edit] Wikimedia Commons has media related to Euphoria. Free downloads of Euphoria for the various platforms, packages, Windows IDE, Windows API libraries, a cross-platform GTK3 wrapper for Linux and Windows, graphics libraries (DOS, OpenGL, etc.). Official website OpenEuphoria Official website RapidEuphoria openEuphoria Wiki openEuphoria Forum OpenEuphoria · GitHub Development repositories. Using Euphoria Retrieved from "https://en.wikipedia.org/w/index.php?title=Euphoria_(programming_language)&oldid=985389165" Categories: Procedural programming languages Cross-platform software Programming languages created in 1993 Free educational software Software using the BSD license Hidden categories: All articles with specifically marked weasel-worded phrases Articles with specifically marked weasel-worded phrases from August 2013 All articles with unsourced statements Articles with unsourced statements from June 2015 Commons category link is locally defined Official website different in Wikidata and Wikipedia Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons Languages Čeština Deutsch Español Français Galego Nederlands 日本語 Polski Português Română Русский Edit links This page was last edited on 25 October 2020, at 17:50 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement