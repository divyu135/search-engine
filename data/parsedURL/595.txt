TRAC (programming language) - Wikipedia TRAC (programming language) From Wikipedia, the free encyclopedia Jump to navigation Jump to search TRAC Paradigm general-purpose macro processor Designed by Calvin Mooers First appeared 1964 Influenced by Macro SAP[1] Influenced SAM76, ML/I[1] TRAC (for Text Reckoning And Compiling) Language is a programming language developed between 1959-1964 by Calvin Mooers and first implemented on the PDP-1 in 1964 by L. Peter Deutsch.[2] It was one of three "first languages" recommended by Ted Nelson in Computer Lib. TRAC T64 was used until at least 1984, when Mooers updated it to TRAC T84.[2] Contents 1 Language description 2 Intellectual property 3 Influence and usage 4 Example program 5 See also 6 References 7 External links Language description[edit] TRAC is a purely text-based language — a kind of macro language. Unlike traditional ad hoc macro languages of the time, such as those found in assemblers, TRAC is well planned, consistent, and in many senses complete. It has explicit input and output operators, unlike the typical implicit I/O at the outermost macro level, which makes it simultaneously simpler and more versatile than older macro languages. It also differs from traditional macro languages in that TRAC numbers are strings of digits, with integer arithmetic (without specific limits on maximum values) being provided through built-in ("primitive") functions. Arguably, one aspect of its completeness is that the concept of error is limited to events like lack of file space and requesting expansion of a string longer than the interpreter's working storage; what would in many languages be described as illegal operations are dealt with in TRAC by defining a result (often a null string) for every possible combination of a function's argument strings. TRAC is a text-processing language,[3]also called a string processing language.[4] The emphasis on strings as strings is so strong that TRAC provides mechanisms for handling the language's own syntactic characters either in their syntactic roles or like any other character, and self-modifying code has more the feel of a natural consequence of typical TRAC programming techniques than of being a special feature. TRAC is, like APL or LISP, an expression oriented language (in contrast to more typical procedure-oriented languages), but unlike APL, it completely lacks operators. In most respects, it is a case of pure functional programming. TRAC is homoiconic.[5][6][7] TRAC has in common with LISP a syntax that generally involves the presence of many levels of nested parentheses. The main inspiration for TRAC came from three papers by Douglas McIlroy.[5][8][9][10] Intellectual property[edit] Mooers trademarked the name TRAC in an effort to maintain his control over the definition of the language, an unusual and pioneering action at the time. At one point, he brought an intellectual property infringement suit against DEC, alleging that a contract to deliver a mini-computer with a TRAC interpreter violated his rights. "The first issue of Dr. Dobb's Journal, one of the early publications in the personal computer field, has a vitriolic editorial against Mooers and his rapacity in trying to charge people for his computing language."[11] However, the trademark (#72301892) expired in 1992. The name has since been used several times for unrelated information technology projects, including a current open source project management system called Trac. Influence and usage[edit] TRAC was later implemented on the PDP-8, PDP-10, and PDP-11. There have been various languages inspired by TRAC. To avoid any trouble with Mooers, they renamed primitives and/or used different metacharacters. In SAM76's case, primitives were added, according to Claude Kagan, "because TRAC is baby talk". In MINT's case, primitives were added to give access to a sophisticated text editor machinery. one perceived shortcoming of TRAC was lack of full extensibility: some TRAC primitive functions are sensitive to the distinction between a null (zero-character) argument and a nonexistent (non-delimited) one, but beyond its last non-null argument, a user-defined function cannot make the distinction. SAM76 was a TRAC-like language which eliminated that limitation. Russ Nelson implemented an emacs extension language named MINT (MINT Is Not TRAC). This language is used by the FreeDOS editor FreeMACS. TRAC was used by FTP Software in its PC/TCP product as the modem dialler scripting language. TRAC was also used as a front end on Digital Productions Cray renderer for films, including The Last Starfighter. Example program[edit] TRAC T84 script to compute Fibonacci numbers:[12] :(s,fibo,(:(ei,<1>, 1, 0,(:(ei,<1>, 2, 1,(:(aa, :(ri,fibo,:(as, <1>,1)),:(ri,fibo,:(as, <1>,2)))))))))`:(mw,fibo)' See also[edit] TTM (programming language), a programming language inspired by TRAC References[edit] ^ a b "TRAC – A man-machine string manipulating language". HOPL: Online Historical Encyclopaedia of Programming Languages. Archived from the original on August 13, 2009. ^ a b https://web.archive.org/web/20010408052535/http://tracfoundation.org/t64tech.htm ^ David Walden."Macro Memories, 1964–2013".2014. ^ Carol Loeb Mir."A Comparison of String Handling in Four Programming Languages".1972. ^ a b Mooers, C.N.; Deutsch, L.P. (1965). "TRAC, A Text-Handling Language". Proceeding ACM '65 Proceedings of the 1965 20th national conference. pp. 229–246. doi:10.1145/800197.806048. ^ Kay, Alan (1969). The Reactive Engine (PhD). University of Utah. ^ Klaas van Schelven."Don't say 'Homoiconic'". ^ McIlroy, M.D., Macro Instruction Extensions of Compiler Languages. CACM 3, No. 4 (1960), 214-220. ^ Eastwood, D.E. and McIlroy, M.D., Macro Compiler Modification of SAP. Bell Telephone Laboratories Computation Center, 1959. ^ McIlroy, M.D., Using SAP Macro Instructions to Manipulate Symbolic Expressions. Bell Telephone Laboratories Computation Center (1960) ^ Mooers, Calvin. "Oral history interview with Calvin N. Mooers and Charlotte D. Mooers". Charles Babbage Institute. ^ TRAC information page, at The History of Computing Project, with small code sample and photo of C. M. Mooers. External links[edit] The TRAC Foundation (Archived) TRAC, a procedure-describing language for the reactive typewriter in the Communications of the ACM, Volume 9 Issue 3, March 1966. Andrew Walker's TRAC Information page TRAC entry in the HOPL Encyclopedia of Computer Languages A TRAC implementation project on sourceforge. Oral history interview with Calvin N. Mooers and Charlotte D. Mooers at the Charles Babbage Institute. Interview discusses information retrieval and programming language research from World War II through the early 1990s. Retrieved from "https://en.wikipedia.org/w/index.php?title=TRAC_(programming_language)&oldid=990772993" Categories: Macro programming languages Text-oriented programming languages Homoiconic programming languages Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages العربية Español Français Edit links This page was last edited on 26 November 2020, at 12:23 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement