C Sharp (programming language) - Wikipedia C Sharp (programming language) From Wikipedia, the free encyclopedia Jump to navigation Jump to search Multi-paradigm (object-oriented) programming language The correct title of this article is C# (programming language). The substitution of the # is due to technical restrictions. C# Paradigm Structured, imperative, object-oriented, event-driven, task-driven, functional, generic, reflective, concurrent Family C Designed by Microsoft Developer Microsoft First appeared 2000; 20 years ago (2000)[1] Stable release 9.0[2] / November 10, 2020; 25 days ago (2020-11-10) Typing discipline Static, dynamic,[3] strong, safe, nominative, partially inferred Platform Common Language Infrastructure License Roslyn compiler: MIT/X11[4] .NET Core CLR: MIT/X11[5] Mono compiler: dual GPLv3 and MIT/X11 DotGNU: dual GPL and LGPL Filename extensions .cs, .csx Website csharp.net Major implementations Visual C#, .NET Framework, Mono, .NET Core, DotGNU (discontinued), Universal Windows Platform Dialects Cω, Spec#, Polyphonic C#, Enhanced C# Influenced by C++,[6] Cω, Eiffel, F#,[a] Haskell, Icon, J#, J++, Java,[6] ML, Modula-3, Object Pascal,[7] Rust, VB Influenced Chapel,[8] Clojure,[9] Crystal,[10] D, J#, Dart,[11] F#, Hack, Java,[12][13] Kotlin, Nemerle, Oxygene, Ring,[14] Rust, Swift,[15] Vala, TypeScript C Sharp Programming at Wikibooks C# (pronounced see sharp, like the musical note C♯, but written with the number sign)[b] is a general-purpose, multi-paradigm programming language encompassing static typing, strong typing, lexically scoped, imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines.[16] C# was developed around 2000 by Microsoft as part of its .NET initiative and later approved as an international standard by Ecma (ECMA-334) in 2002 and ISO (ISO/IEC 23270) in 2003. It was designed by Anders Hejlsberg, and its development team is currently led by Mads Torgersen, being one of the programming languages designed for the Common Language Infrastructure (CLI). The most recent version is 9.0, which was released in 2020 in .NET 5.0 and included in Visual Studio 2019 version 16.8.[17][18] Mono is a free and open-source project to develop a cross-platform compiler and runtime environment (i.e. virtual machine) for the language. Contents 1 Design goals 2 History 2.1 Name 2.2 Versions 2.2.1 New features 2.2.1.1 C# 2.0 (2005) 2.2.1.2 C# 3.0 (2007) 2.2.1.3 C# 4.0 (2010) 2.2.1.4 C# 5.0[50] (2012) 2.2.1.5 C# 6.0 (2015) 2.2.1.6 C# 7.0[53][54] (2017) 2.2.1.7 C# 7.1[55] (2017) 2.2.1.8 C# 7.2[56] (2017) 2.2.1.9 C# 7.3[57] (2018) 2.2.1.10 C# 8.0[58] (2019) 2.2.1.11 C# 9.0[59] (2020) 3 Syntax 4 Distinguishing features 4.1 Portability 4.2 Typing 4.3 Metaprogramming 4.4 Methods and functions 4.5 Property 4.6 Namespace 4.7 Memory access 4.8 Exception 4.9 Polymorphism 4.10 Language Integrated Query (LINQ) 4.11 Functional programming 5 Common type system 5.1 Categories of data types 5.2 Boxing and unboxing 6 Libraries 7 Examples 7.1 Hello World 7.2 GUI 7.3 Images 8 Standardization and licensing 9 Implementations 10 See also 11 Notes 12 References 13 Further reading 14 External links Design goals[edit] The Ecma standard lists these design goals for C#:[16] The language is intended to be a simple, modern, general-purpose, object-oriented programming language. The language, and implementations thereof, should provide support for software engineering principles such as strong type checking, array bounds checking, detection of attempts to use uninitialized variables, and automatic garbage collection. Software robustness, durability, and programmer productivity are important. The language is intended for use in developing software components suitable for deployment in distributed environments. Portability is very important for source code and programmers, especially those already familiar with C and C++. Support for internationalization is very important. C# is intended to be suitable for writing applications for both hosted and embedded systems, ranging from the very large that use sophisticated operating systems, down to the very small having dedicated functions. Although C# applications are intended to be economical with regard to memory and processing power requirements, the language was not intended to compete directly on performance and size with C or assembly language. History[edit] During the development of the .NET Framework, the class libraries were originally written using a managed code compiler system called "Simple Managed C" (SMC).[19][20] In January 1999, Anders Hejlsberg formed a team to build a new language at the time called Cool, which stood for "C-like Object Oriented Language".[21] Microsoft had considered keeping the name "Cool" as the final name of the language, but chose not to do so for trademark reasons. By the time the .NET project was publicly announced at the July 2000 Professional Developers Conference, the language had been renamed C#, and the class libraries and ASP.NET runtime had been ported to C#. Hejlsberg is C#'s principal designer and lead architect at Microsoft, and was previously involved with the design of Turbo Pascal, Embarcadero Delphi (formerly CodeGear Delphi, Inprise Delphi and Borland Delphi), and Visual J++. In interviews and technical papers he has stated that flaws[22] in most major programming languages (e.g. C++, Java, Delphi, and Smalltalk) drove the fundamentals of the Common Language Runtime (CLR), which, in turn, drove the design of the C# language itself. James Gosling, who created the Java programming language in 1994, and Bill Joy, a co-founder of Sun Microsystems, the originator of Java, called C# an "imitation" of Java; Gosling further said that "[C# is] sort of Java with reliability, productivity and security deleted."[23][24] Klaus Kreft and Angelika Langer (authors of a C++ streams book) stated in a blog post that "Java and C# are almost identical programming languages. Boring repetition that lacks innovation,"[25] "Hardly anybody will claim that Java or C# are revolutionary programming languages that changed the way we write programs," and "C# borrowed a lot from Java - and vice versa. Now that C# supports boxing and unboxing, we'll have a very similar feature in Java."[26]In July 2000, Hejlsberg said that C# is "not a Java clone" and is "much closer to C++" in its design.[27] Since the release of C# 2.0 in November 2005, the C# and Java languages have evolved on increasingly divergent trajectories, becoming two quite different languages. One of the first major departures came with the addition of generics to both languages, with vastly different implementations. C# makes use of reification to provide "first-class" generic objects that can be used like any other class, with code generation performed at class-load time.[28]Furthermore, C# has added several major features to accommodate functional-style programming, culminating in the LINQ extensions released with C# 3.0 and its supporting framework of lambda expressions, extension methods, and anonymous types.[29] These features enable C# programmers to use functional programming techniques, such as closures, when it is advantageous to their application. The LINQ extensions and the functional imports help developers reduce the amount of boilerplate code that is included in common tasks like querying a database, parsing an xml file, or searching through a data structure, shifting the emphasis onto the actual program logic to help improve readability and maintainability.[30] C# used to have a mascot called Andy (named after Anders Hejlsberg). It was retired on January 29, 2004.[31] C# was originally submitted to the ISO subcommittee JTC 1/SC 22 for review,[32] under ISO/IEC 23270:2003,[33] was withdrawn and was then approved under ISO/IEC 23270:2006.[34] The 23270:2006 is withdrawned under 23270:2018 and approved with this version.[35] Name[edit] Microsoft first used the name C# in 1988 for a variant of the C language designed for incremental compilation.[36] That project was not completed but the name lives on. C-sharp musical note The name "C sharp" was inspired by the musical notation whereby a sharp symbol indicates that the written note should be made a semitone higher in pitch.[37]This is similar to the language name of C++, where "++" indicates that a variable should be incremented by 1 after being evaluated. The sharp symbol also resembles a ligature of four "+" symbols (in a two-by-two grid), further implying that the language is an increment of C++.[38] Due to technical limitations of display (standard fonts, browsers, etc.) and the fact that the sharp symbol ( U+266F ♯ MUSIC SHARP SIGN (HTML &#9839; · &sharp;)) is not present on most keyboard layouts, the number sign ( U+0023 # NUMBER SIGN (HTML &#35; · &num;)) was chosen to approximate the sharp symbol in the written name of the programming language.[39]This convention is reflected in the ECMA-334 C# Language Specification.[16] The "sharp" suffix has been used by a number of other .NET languages that are variants of existing languages, including J# (a .NET language also designed by Microsoft that is derived from Java 1.1), A# (from Ada), and the functional programming language F#.[40] The original implementation of Eiffel for .NET was called Eiffel#,[41] a name retired since the full Eiffel language is now supported. The suffix has also been used for libraries, such as Gtk# (a .NET wrapper for GTK+ and other GNOME libraries) and Cocoa# (a wrapper for Cocoa). Versions[edit] Version Language specification Date .NET Visual Studio Ecma ISO/IEC Microsoft C# 1.0 December 2002 April 2003 January 2002 January 2002 .NET Framework 1.0 Visual Studio .NET 2002 C# 1.1 C# 1.2 October 2003 April 2003 .NET Framework 1.1 Visual Studio .NET 2003 C# 2.0 June 2006 September 2006 September 2005[c] November 2005 .NET Framework 2.0 .NET Framework 3.0 Visual Studio 2005 Visual Studio 2008 C# 3.0 None August 2007 November 2007 .NET Framework 2.0 (Except LINQ)[42] .NET Framework 3.0 (Except LINQ)[42] .NET Framework 3.5 Visual Studio 2008 C# 4.0 April 2010 April 2010 .NET Framework 4 Visual Studio 2010 C# 5.0 December 2017 December 2018 June 2013 August 2012 .NET Framework 4.5 Visual Studio 2012 Visual Studio 2013 C# 6.0 None Draft July 2015 .NET Framework 4.6 .NET Core 1.0 .NET Core 1.1 Visual Studio 2015 C# 7.0 Specification proposal March 2017 .NET Framework 4.7 Visual Studio 2017 version 15.0 C# 7.1 Specification proposal August 2017 .NET Core 2.0 Visual Studio 2017 version 15.3[43] C# 7.2 Specification proposal November 2017 Visual Studio 2017 version 15.5[44] C# 7.3 Specification proposal May 2018 .NET Core 2.1 .NET Core 2.2 .NET Framework 4.8 Visual Studio 2017 version 15.7[44] C# 8.0 Specification proposal September 2019 .NET Core 3.0 .NET Core 3.1 Visual Studio 2019 version 16.3[45] C# 9.0 Specification proposal September 2020 .NET 5.0 Visual Studio 2019 version 16.8, Preview 4[45] New features[edit] C# 2.0 (2005)[edit] Generics[46] Partial types[46] Anonymous methods[46] Iterators[46] Nullable value types[46] Getter/setter separate accessibility[46] Method group conversions (delegates)[46] Co- and Contra-variance for delegates[46] Static classes[46] Delegate inference[46] Null coalescing operator[46] C# 3.0 (2007)[edit] Implicitly typed local variables[47] Object and collection initializers[47] Auto-Implemented properties[47] Anonymous types[47] Extension methods[47] Query expressions[47] Lambda expressions[47] Expression trees[47] Partial methods[48] C# 4.0 (2010)[edit] Dynamic binding[49] Named and optional arguments[49] Generic co- and contravariance[49] Embedded interop types ("NoPIA")[49] C# 5.0[50] (2012)[edit] Asynchronous methods[51] Caller info attributes[51] C# 6.0 (2015)[edit] Compiler-as-a-service (Roslyn) Import of static type members into namespace[52] Exception filters[52] Await in catch/finally blocks[52] Auto property initializers[52] Default values for getter-only properties[52] Expression-bodied members[52] Null propagator (null-conditional operator, succinct null checking)[52] String interpolation[52] nameof operator[52] Dictionary initializer[52] C# 7.0[53][54] (2017)[edit] Inline out variable declaration Pattern matching Tuple types and tuple literals Deconstruction Local functions Digit separators Binary literals Ref returns and locals Generalized async return types Expression bodied constructors and finalizers Expression bodied getters and setters Throw can also be used as expression C# 7.1[55] (2017)[edit] Async main Default literal expressions Inferred tuple element names C# 7.2[56] (2017)[edit] Reference semantics with value types Non-trailing named arguments Leading underscores in numeric literals private protected access modifier C# 7.3[57] (2018)[edit] Accessing fixed fields without pinning Reassigning ref local variables Using initializers on stackalloc arrays Using fixed statements with any type that supports a pattern Using additional generic constraints C# 8.0[58] (2019)[edit] readonly struct members Default interface members switch expressions Property, Tuple, and positional patterns using declarations static local functions Disposable ref struct Nullable reference types Indices and Ranges Null-coalescing assignment Async Streams C# 9.0[59] (2020)[edit] Records Init only setters Top-level statements Pattern matching enhancements Native sized integers Function pointers Suppress emitting localsinit flag Target-typed new expressions static anonymous functions Target-typed conditional expressions Covariant return types Extension GetEnumerator support for foreach loops Lambda discard parameters Attributes on local functions Module initializers New features for partial methods Syntax[edit] Main article: C Sharp syntax See also: Syntax (programming languages) The core syntax of the C# language is similar to that of other C-style languages such as C, C++ and Java, particularly: Semicolons are used to denote the end of a statement. Curly brackets are used to group statements. Statements are commonly grouped into methods (functions), methods into classes, and classes into namespaces. Variables are assigned using an equals sign, but compared using two consecutive equals signs. Square brackets are used with arrays, both to declare them and to get a value at a given index in one of them. Distinguishing features[edit] See also: Comparison of C Sharp and Java Some notable features of C# that distinguish it from C, C++, and Java where noted, are: Portability[edit] By design, C# is the programming language that most directly reflects the underlying Common Language Infrastructure (CLI).[60] Most of its intrinsic types correspond to value-types implemented by the CLI framework. However, the language specification does not state the code generation requirements of the compiler: that is, it does not state that a C# compiler must target a Common Language Runtime, or generate Common Intermediate Language (CIL), or generate any other specific format. Theoretically, a C# compiler could generate machine code like traditional compilers of C++ or Fortran. Typing[edit] C# supports strongly typed implicit variable declarations with the keyword var, and implicitly typed arrays with the keyword new[] followed by a collection initializer. C# supports a strict Boolean data type, bool. Statements that take conditions, such as while and if, require an expression of a type that implements the true operator, such as the Boolean type. While C++ also has a Boolean type, it can be freely converted to and from integers, and expressions such as if (a) require only that a is convertible to bool, allowing a to be an int, or a pointer. C# disallows this "integer meaning true or false" approach, on the grounds that forcing programmers to use expressions that return exactly bool can prevent certain types of programming mistakes such as if (a = b) (use of assignment = instead of equality ==). C# is more type safe than C++. The only implicit conversions by default are those that are considered safe, such as widening of integers. This is enforced at compile-time, during JIT, and, in some cases, at runtime. No implicit conversions occur between Booleans and integers, nor between enumeration members and integers (except for literal 0, which can be implicitly converted to any enumerated type). Any user-defined conversion must be explicitly marked as explicit or implicit, unlike C++ copy constructors and conversion operators, which are both implicit by default. C# has explicit support for covariance and contravariance in generic types, unlike C++ which has some degree of support for contravariance simply through the semantics of return types on virtual methods. Enumeration members are placed in their own scope. The C# language does not allow for global variables or functions. All methods and members must be declared within classes. Static members of public classes can substitute for global variables and functions. Local variables cannot shadow variables of the enclosing block, unlike C and C++. Metaprogramming[edit] Metaprogramming via C# attributes is part of the language. Many of these attributes duplicate the functionality of GCC's and VisualC++'s platform-dependent preprocessor directives. Methods and functions[edit] A method in C# is a member of a class that can be invoked as a function (a sequence of instructions), rather than the mere value-holding capability of a class property. As in other syntactically similar languages, such as C++ and ANSI C, the signature of a method is a declaration comprising in order: any optional accessibility keywords (such as private), the explicit specification of its return type (such as int, or the keyword void if no value is returned), the name of the method, and finally, a parenthesized sequence of comma-separated parameter specifications, each consisting of a parameter's type, its formal name and optionally, a default value to be used whenever none is provided. Certain specific kinds of methods, such as those that simply get or set a class property by return value or assignment, do not require a full signature, but in the general case, the definition of a class includes the full signature declaration of its methods. Like C++, and unlike Java, C# programmers must use the scope modifier keyword virtual to allow methods to be overridden by subclasses.[61] Extension methods in C# allow programmers to use static methods as if they were methods from a class's method table, allowing programmers to add methods to an object that they feel should exist on that object and its derivatives. The type dynamic allows for run-time method binding, allowing for JavaScript-like method calls and run-time object composition. C# has support for strongly-typed function pointers via the keyword delegate. Like the Qt framework's pseudo-C++ signal and slot, C# has semantics specifically surrounding publish-subscribe style events, though C# uses delegates to do so. C# offers Java-like synchronized method calls, via the attribute [MethodImpl(MethodImplOptions.Synchronized)], and has support for mutually-exclusive locks via the keyword lock. Property[edit] C# supports class with properties. The properties can be simple accessor functions with a backing field, or implement getter and setter functions. Since C# 3.0 the syntactic sugar of auto-implemented properties is available,[62] where the accessor (getter) and mutator (setter) encapsulate operations on a single attribute of a class. Namespace[edit] A C# namespace provides the same level of code isolation as a Java package or a C++ namespace, with very similar rules and features to a package. Namespaces can be imported with the "using" syntax.[63] Memory access[edit] In C#, memory address pointers can only be used within blocks specifically marked as unsafe, and programs with unsafe code need appropriate permissions to run. Most object access is done through safe object references, which always either point to a "live" object or have the well-defined null value; it is impossible to obtain a reference to a "dead" object (one that has been garbage collected), or to a random block of memory. An unsafe pointer can point to an instance of an 'unmanaged' value type that does not contain any references to garbage-collected objects, array, string, or a block of stack-allocated memory. Code that is not marked as unsafe can still store and manipulate pointers through the System.IntPtr type, but it cannot dereference them. Managed memory cannot be explicitly freed; instead, it is automatically garbage collected. Garbage collection addresses the problem of memory leaks by freeing the programmer of responsibility for releasing memory that is no longer needed in most cases. Code that retains references to objects longer than is required can still experience higher memory usage than necessary, however once the final reference to an object is released the memory is available for garbage collection. Exception[edit] A range of standard exceptions are available to programmers. Methods in standard libraries regularly throw system exceptions in some circumstances and the range of exceptions thrown is normally documented. Custom exception classes can be defined for classes allowing specific handling to be put in place for particular circumstances as needed.[64] Checked exceptions are not present in C# (in contrast to Java). This has been a conscious decision based on the issues of scalability and versionability.[65] Polymorphism[edit] Unlike C++, C# does not support multiple inheritance, although a class can implement any number of interfaces. This was a design decision by the language's lead architect to avoid complications and to simplify architectural requirements throughout CLI. When implementing multiple interfaces that contain a method with the same name and taking parameters of the same type in the same order (i.e. the same signature), similar to Java, C# allows both a single method to cover all interfaces and if necessary specific methods for each interface. However, unlike Java, C# supports operator overloading. Only the most commonly overloaded operators in C++ may be overloaded in C#. Language Integrated Query (LINQ)[edit] C# has the ability to utilize LINQ through the .NET Framework. A developer can query a variety of data sources, provided IEnumerable<T> interface is implemented on the object. This includes XML documents, an ADO.NET dataset, and SQL databases.[66] Using LINQ in C# brings advantages like Intellisense support, strong filtering capabilities, type safety with compile error checking ability, and consistency for querying data over a variety of sources.[67] There are several different language structures that can be utilized with C# and LINQ and they are query expressions, lambda expressions, anonymous types, implicitly typed variables, extension methods, and object initializers.[68] Functional programming[edit] Though primarily an imperative language, C# 2.0 offered limited support for functional programming through first-class functions and closures in the form of anonymous delegates. C# 3.0 expanded support for functional programming with the introduction of a lightweight syntax for lambda expressions, extension methods (an affordance for modules), and a list comprehension syntax in the form of a "query comprehension" language. C# 7.0 adds features typically found in functional languages like tuples and pattern matching.[69] Common type system[edit] C# has a unified type system. This unified type system is called Common Type System (CTS).[70] A unified type system implies that all types, including primitives such as integers, are subclasses of the System.Object class. For example, every type inherits a ToString() method. Categories of data types[edit] CTS separates data types into two categories:[70] Reference types Value types Instances of value types neither have referential identity nor referential comparison semantics. Equality and inequality comparisons for value types compare the actual data values within the instances, unless the corresponding operators are overloaded. Value types are derived from System.ValueType, always have a default value, and can always be created and copied. Some other limitations on value types are that they cannot derive from each other (but can implement interfaces) and cannot have an explicit default (parameterless) constructor. Examples of value types are all primitive types, such as int (a signed 32-bit integer), float (a 32-bit IEEE floating-point number), char (a 16-bit Unicode code unit), and System.DateTime (identifies a specific point in time with nanosecond precision). Other examples are enum (enumerations) and struct (user defined structures). In contrast, reference types have the notion of referential identity, meaning that each instance of a reference type is inherently distinct from every other instance, even if the data within both instances is the same. This is reflected in default equality and inequality comparisons for reference types, which test for referential rather than structural equality, unless the corresponding operators are overloaded (such as the case for System.String). Some operations are not always possible, such as creating an instance of a reference type, copying an existing instance, or performing a value comparison on two existing instances. Though specific reference types can provide such services by exposing a public constructor or implementing a corresponding interface (such as ICloneable or IComparable). Examples of reference types are object (the ultimate base class for all other C# classes), System.String (a string of Unicode characters), and System.Array (a base class for all C# arrays). Both type categories are extensible with user-defined types. Boxing and unboxing[edit] Boxing is the operation of converting a value-type object into a value of a corresponding reference type.[70] Boxing in C# is implicit. Unboxing is the operation of converting a value of a reference type (previously boxed) into a value of a value type.[70] Unboxing in C# requires an explicit type cast. A boxed object of type T can only be unboxed to a T (or a nullable T).[71] Example: int foo = 42;         // Value type.object bar = foo;     // foo is boxed to bar.int foo2 = (int)bar;  // Unboxed back to value type. Libraries[edit] The C# specification details a minimum set of types and class libraries that the compiler expects to have available. In practice, C# is most often used with some implementation of the Common Language Infrastructure (CLI), which is standardized as ECMA-335 Common Language Infrastructure (CLI). In addition to the standard CLI specifications, there are many commercial and community class libraries that build on top of the .NET framework libraries to provide additional functionality.[72] C# can make calls to any library included in the List of .NET libraries and frameworks. Examples[edit] Hello World[edit] The following is a very simple C# program, a version of the classic "Hello world" example: using System;// A version of the classic "Hello World" programclass Program{    public static void Main(string[] args)    {        Console.WriteLine("Hello, world!");    }} This code will display this text in the console window: Hello, world! Each line has a purpose: using System; The above line imports all types in the System namespace. For example, the Console class used later in the source code is defined in the System namespace, meaning it can be used without supplying the full name of the type (which includes the namespace). // A version of the classic "Hello World" program This line is a comment; it describes and documents the code for the programmer(s). class Program Above is a class definition for the Program class. Everything that follows between the pair of braces describes that class. {    ...} The curly brackets demarcate the boundaries of a code block. In this first instance, they are marking the start and end of the Program class. public static void Main(string[] args) This declares the class member method where the program begins execution. The .NET runtime calls the Main method. (Note: Main may also be called from elsewhere, like any other method, e.g. from another method of Program.) The public keyword tells the compiler that the method can be called from anywhere by any class. The static keyword makes the method accessible without an instance of Program. Each console application's Main entry point must be declared static otherwise the program would require an instance of Program, but any instance would require a program. To avoid that irresolvable circular dependency, C# compilers processing console applications (like that above) report an error if there is no static Main method. The void keyword declares that Main has no return value. Console.WriteLine("Hello, world!"); This line writes the output. Console is a static class in the System namespace. It provides an interface to the standard input, output, and error streams for console applications. The program calls the Console method WriteLine, which displays on the console a line with the argument, the string "Hello, world!". GUI[edit] A GUI example: using System;using System.Windows.Forms;class Program{    static void Main()    {        MessageBox.Show("Hello, World!");        Console.WriteLine("Is almost the same argument!");    }} This example is similar to the previous example, except that it generates a dialog box that contains the message "Hello, World!" instead of writing it to the console. Images[edit] Another useful library is the System.Drawing library, which is used to programmatically draw images. For example: using System;using System.Drawing;public class Example{    public static Image img;    public static void Main()    {        img = Image.FromFile("Image.png");    }} This will create an image that is identical to that stored in "Image.png". Standardization and licensing[edit] In August 2001, Microsoft Corporation, Hewlett-Packard and Intel Corporation co-sponsored the submission of specifications for C# as well as the Common Language Infrastructure (CLI) to the standards organization Ecma International.In December 2001, ECMA released ECMA-334 C# Language Specification. C# became an ISO standard in 2003 (ISO/IEC 23270:2003 - Information technology — Programming languages — C#). ECMA had previously adopted equivalent specifications as the 2nd edition of C#, in December 2002. In June 2005, ECMA approved edition 3 of the C# specification, and updated ECMA-334. Additions included partial classes, anonymous methods, nullable types, and generics (somewhat similar to C++ templates). In July 2005, ECMA submitted to ISO/IEC JTC 1, via the latter's Fast-Track process, the standards and related TRs. This process usually takes 6–9 months. The C# language definition and the CLI are standardized under ISO and Ecma standards that provide reasonable and non-discriminatory licensing protection from patent claims. Microsoft has agreed not to sue open source developers for violating patents in non-profit projects for the part of the framework that is covered by the OSP.[73] Microsoft has also agreed not to enforce patents relating to Novell products against Novell's paying customers[74] with the exception of a list of products that do not explicitly mention C#, .NET or Novell's implementation of .NET (The Mono Project).[75] However, Novell maintains that Mono does not infringe any Microsoft patents.[76] Microsoft has also made a specific agreement not to enforce patent rights related to the Moonlight browser plugin, which depends on Mono, provided it is obtained through Novell.[77] Implementations[edit] Microsoft is leading the development of the open-source reference C# compilers and set of tools, the first compiler Roslyn compiles into intermediate language (IL), the second one RyuJIT,[78] is a JIT (just-in-time) compiler, which is dynamic and does on-the-fly optimization and compiles the IL into native code for the front-end of the CPU.[79] RuyJIT is open source and written in c++.[80] Roslyn is entirely written in managed code (C#), has been opened up and functionality surfaced as APIs. It is thus enabling developers to create refactoring and diagnostics tools.[4][81] Two branches of official implementation are the .NET (closed sources, Windows 10 only since .NET 4.6.2) and the .NET core (open source, multiplatform); .NET and .NET core are converging into one open source implementation .NET 5.0.[82] At .NET 4.6 a new JIT compiler replaced the former.[83][84] Other C# compilers (some of which include an implementation of the Common Language Infrastructure and .NET class libraries): The Mono project provides an open-source C# compiler, a complete open-source implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and a nearly complete implementation of the Microsoft proprietary .NET class libraries up to .NET 3.5. As of Mono 2.6, no plans exist to implement WPF; WF is planned for a later release; and there are only partial implementations of LINQ to SQL and WCF.[85] The Elements tool chain from RemObjects includes RemObjects C#, which compiles C# for .NET, Java, Cocoa, Android, Windows, Linux and WebAssembly.* The DotGNU project (now discontinued) also provided an open-source C# compiler, a nearly complete implementation of the Common Language Infrastructure including the required framework libraries as they appear in the ECMA specification, and subset of some of the remaining Microsoft proprietary .NET class libraries up to .NET 2.0 (those not documented or included in the ECMA specification, but included in Microsoft's standard .NET Framework distribution). Xamarin provides tools to develop cross-platform applications for common mobile and desktop operating systems, using C# as a codebase and compiling to native code. Mono is a common choice for game engines due to its cross-platform nature[citation needed]. The Unity game engine uses Mono C# as its primary scripting language. The Godot game engine has implemented an optional Mono C# module thanks to a donation of $24,000 from Microsoft.[86] See also[edit] C# topics C# syntax Comparison of C# and Java Comparison of C# and Visual Basic .NET .NET standard libraries Computer programming portal IDEs Microsoft Visual Studio Microsoft Visual Studio Express Visual Studio Code MonoDevelop Morfik SharpDevelop Turbo C# Rider Xamarin Studio LINQPad Notes[edit] ^ for async ^ By convention, a number sign is used for the second character in normal text; in artistic representations, sometimes a true sharp sign is used: C♯. However the ECMA 334 standard states: "The name C# is written as the LATIN CAPITAL LETTER C (U+0043) followed by the NUMBER SIGN # (U+0023)." ^ The Microsoft C# 2.0 specification document only contains the new 2.0 features. For older features, use the 1.2 specification above. References[edit] ^ "InfoQ eMag: A Preview of C# 7". ^ "Announcing .NET 5.0". ^ Torgersen, Mads (October 27, 2008). "New features in C# 4.0". Microsoft. Retrieved October 28, 2008. ^ a b "The Roslyn .NET compiler provides C# and Visual Basic languages with rich code analysis APIs.: dotnet/roslyn". November 13, 2019 – via GitHub. ^ "CoreCLR is the runtime for .NET Core. It includes the garbage collector, JIT compiler, primitive data types and low-level classes.: dotnet/coreclr". November 13, 2019 – via GitHub. ^ a b Naugler, David (May 2007). "C# 2.0 for C++ and Java programmer: conference workshop". Journal of Computing Sciences in Colleges. 22 (5). Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java. ^ Hamilton, Naomi (October 1, 2008). "The A-Z of Programming Languages: C#". Computerworld. Retrieved February 12, 2010. We all stand on the shoulders of giants here and every language builds on what went before it so we owe a lot to C, C++, Java, Delphi, all of these other things that came before us. (Anders Hejlsberg) ^ "Chapel spec (Acknowledgments)" (PDF). Cray Inc. October 1, 2015. Retrieved January 14, 2016. ^ "Rich Hickey Q&A by Michael Fogus". Archived from the original on January 11, 2017. Retrieved January 11, 2017. ^ Borenszweig, Ary. "Crystal 0.18.0 released!". It's heavily inspired by Ruby, and other languages (like C#, Go and Python). ^ "Web Languages and VMs: Fast Code is Always in Fashion. (V8, Dart) - Google I/O 2013". Retrieved December 22, 2013. ^ Java 5.0 added several new language features (the enhanced for loop, autoboxing, varargs and annotations), after they were introduced in the similar (and competing) C# language [1] [2] ^ Cornelius, Barry (December 1, 2005). "Java 5 catches up with C#". University of Oxford Computing Services. Retrieved June 18, 2014. In my opinion, it is C# that has caused these radical changes to the Java language. (Barry Cornelius) ^ Ring Team (December 5, 2017). "Ring programming language and other languages". ring-lang.net. ring-lang. ^ Lattner, Chris (June 3, 2014). "Chris Lattner's Homepage". Chris Lattner. Retrieved May 12, 2020. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list. ^ a b c C# Language Specification (PDF) (4th ed.). Ecma International. June 2006. Retrieved January 26, 2012. ^ "Visual Studio 2019 Preview Release Notes". docs.microsoft.com. Retrieved October 15, 2020. ^ "Download .NET 5.0 (Linux, macOS, and Windows)". Microsoft. Retrieved October 15, 2020. ^ Zander, Jason (November 22, 2007). "Couple of Historical Facts". Retrieved February 23, 2009. ^ Guthrie, Scott (November 28, 2006). "What language was ASP.Net originally written in?". Archived from the original on June 24, 2016. Retrieved February 21, 2008. ^ Hamilton, Naomi (October 1, 2008). "The A-Z of Programming Languages: C#". Computerworld. Retrieved October 1, 2008. ^ "Details". nilsnaegele.com. Retrieved April 7, 2019. ^ Wylie Wong (2002). "Why Microsoft's C# isn't". CNET: CBS Interactive. Retrieved May 28, 2014. ^ Bill Joy (February 7, 2002). "Microsoft's blind spot". cnet.com. Retrieved January 12, 2010. ^ Klaus Kreft and Angelika Langer (2003). "After Java and C# - what is next?". Retrieved June 18, 2013. ^ Klaus Kreft and Angelika Langer (July 3, 2003). "After Java and C# - what is next?". artima.com. Retrieved January 12, 2010. ^ Osborn, John (August 1, 2000). "Deep Inside C#: An Interview with Microsoft Chief Architect Anders Hejlsberg". O'Reilly Media. Retrieved November 14, 2009. Cite journal requires |journal= (help) ^ "Generics (C# Programming Guide)". Microsoft. Retrieved March 21, 2011. ^ Don Box and Anders Hejlsberg (February 2007). "LINQ: .NET Language-Integrated Query". Microsoft. Retrieved March 21, 2011. ^ Mercer, Ian (April 15, 2010). "Why functional programming and LINQ is often better than procedural code". abodit.com. Retrieved March 21, 2011. ^ "Andy Retires". Dan Fernandez's Blog. Blogs.msdn.com. January 29, 2004. Retrieved October 4, 2012. ^ "Technical committees - JTC 1/SC 22 - Programming languages, their environments and system software interfaces". ISO. Retrieved October 4, 2012. ^ "ISO/IEC 23270:2003 - Information technology - C# Language Specification". Iso.org. August 23, 2006. Archived from the original on May 8, 2012. Retrieved October 4, 2012. ^ "ISO/IEC 23270:2006 - Information technology - Programming languages - C#". Iso.org. January 26, 2012. Retrieved October 4, 2012. ^ "SO/IEC 23270:2018 Information technology — Programming languages — C#". ISO. Retrieved November 26, 2020. ^ Mariani, Rico. "My History of Visual Studio (Part 1) – Rico Mariani's Performance Tidbits". Rico Mariani's Performance Tidbits. ^ Kovacs, James (September 7, 2007). "C#/.NET History Lesson". Retrieved June 18, 2009. ^ Hejlsberg, Anders (October 1, 2008). "The A-Z of Programming Languages: C#". Computerworld. ^ "Microsoft C# FAQ". Microsoft. Archived from the original on February 14, 2006. Retrieved March 25, 2008. ^ "F# FAQ". Microsoft Research. Archived from the original on February 18, 2009. Retrieved June 18, 2009. ^ Simon, Raphael; Stapf, Emmanuel; Meyer, Bertrand (June 2002). "Full Eiffel on the .NET Framework". Microsoft. Retrieved June 18, 2009. ^ a b "Using C# 3.0 from .NET 2.0". Danielmoth.com. May 13, 2007. Retrieved October 4, 2012. ^ "Visual Studio 2017 15.3 Release Notes". docs.microsoft.com. ^ a b "Visual Studio 2017 15.9 Release Notes". docs.microsoft.com. ^ a b "Visual Studio 2019 16.8 Release Notes". docs.microsoft.com. ^ a b c d e f g h i j k "What's new in the C# 2.0 Language and Compiler". Microsoft Developer Network. Microsoft. Retrieved June 11, 2014. ^ a b c d e f g h Hejlsberg, Anders; Torgersen, Mads. "Overview of C# 3.0". Microsoft Developer Network. Microsoft. Retrieved June 11, 2014. ^ Ghosh, Wriju. "C# 3.0 : Partial * Garbage Collection Methods". MSDN Blogs. Microsoft. Retrieved June 11, 2014. ^ a b c d Burrows, Chris. "C# 4.0 - New C# Features in the .NET Framework 4". Microsoft Developer Network. Microsoft. Retrieved June 11, 2014. ^ Hejlsberg, Anders. "Future directions for C# and Visual Basic". C# lead architect. Microsoft. Retrieved September 21, 2011. ^ a b "An Introduction to New Features in C# 5.0". MSDN Blogs. Microsoft. Retrieved June 11, 2014. ^ a b c d e f g h i j "Language feature implementation status". github. Microsoft. Retrieved February 13, 2015. ^ "What's new in C# 7". Microsoft Docs. December 21, 2016. ^ "New Features in C# 7.0". .NET Blog. Retrieved June 9, 2017. ^ "What's new in C# 7.1". Microsoft Docs. Retrieved October 9, 2017. ^ "What's new in C# 7.2". Microsoft Docs. Retrieved November 26, 2017. ^ "What's new in C# 7.3". Microsoft Docs. Retrieved June 23, 2018. ^ "What's new in C# 8.0". Microsoft Docs. ^ BillWagner. "What's new in C# 9.0 - C# Guide". docs.microsoft.com. Retrieved October 15, 2020. ^ Visual Studio 2010 and .NET 4 Six-in-One. Wrox Press. 2010. ISBN 978-0470499481. ^ "virtual (C# Reference)". docs.microsoft.com. ^ "Auto-Implemented Properties (C# Programming Guide)". Retrieved September 12, 2020. ^ "using directive - C# Reference". Microsoft Docs. Retrieved April 14, 2019. ^ "How to create user-defined exceptions". Retrieved September 12, 2020. ^ Venners, Bill; Eckel, Bruce (August 18, 2003). "The Trouble with Checked Exceptions". Retrieved March 30, 2010. ^ Zhang, Xue Dong; Teng, Zi Mu; Zhao, Dong Wang (September 2014). "Research of the Database Access Technology Under.NET Framework". Applied Mechanics and Materials. 644-650: 3077–3080. doi:10.4028/www.scientific.net/AMM.644-650.3077. S2CID 62201466. ProQuest 1565579768. ^ Otey, Michael (February 2006). "LINQ to the Future". SQL Server Magazine. Vol. 8 no. 2. pp. 17–21. ProQuest 214859896. ^ Sheldon, William (November 2010). "New Features in LINQ". SQL Server Magazine. Vol. 12 no. 11. pp. 37–40. ProQuest 770609095. ^ "What's New in C# 7.0". Microsoft Docs. Retrieved April 14, 2019. ^ a b c d Archer, Tom (2001). "Part 2, Chapter 4: The Type System". Inside C#. Redmond, Washington: Microsoft Press. ISBN 0-7356-1288-9. ^ Lippert, Eric (March 19, 2009). "Representation and Identity". Fabulous Adventures In Coding. Blogs.msdn.com. Retrieved October 4, 2012. ^ "Framework Libraries". docs.microsoft.com. ^ "Patent Pledge for Open Source Developers". ^ "Patent Cooperation Agreement - Microsoft & Novell Interoperability Collaboration". Microsoft. November 2, 2006. Archived from the original on May 17, 2009. Retrieved July 5, 2009. Microsoft, on behalf of itself and its Subsidiaries (collectively "Microsoft"), hereby covenants not to sue Novell's Customers and Novell's Subsidiaries' Customers for infringement under Covered Patents of Microsoft on account of such a Customer's use of specific copies of a Covered Product as distributed by Novell or its Subsidiaries (collectively "Novell") for which Novell has received Revenue (directly or indirectly) for such specific copies; provided the foregoing covenant is limited to use by such Customer (i) of such specific copies that are authorized by Novell in consideration for such Revenue, and (ii) within the scope authorized by Novell in consideration for such Revenue. ^ "Definitions". Microsoft. November 2, 2006. Retrieved July 5, 2009. ^ Steinman, Justin (November 7, 2006). "Novell Answers Questions from the Community". Retrieved July 5, 2009. We maintain that Mono does not infringe any Microsoft patents. ^ "Covenant to Downstream Recipients of Moonlight - Microsoft & Novell Interoperability Collaboration". Microsoft. September 28, 2007. Archived from the original on September 23, 2010. Retrieved March 8, 2008. "Downstream Recipient" means an entity or individual that uses for its intended purpose a Moonlight Implementation obtained directly from Novell or through an Intermediate Recipient... Microsoft reserves the right to update (including discontinue) the foregoing covenant... "Moonlight Implementation" means only those specific portions of Moonlight 1.0 or Moonlight 1.1 that run only as a plug-in to a browser on a Personal Computer and are not licensed under GPLv3 or a Similar License. ^ https://devblogs.microsoft.com/dotnet/the-ryujit-transition-is-complete/ ^ https://docs.microsoft.com/en-us/dotnet/standard/managed-execution-process ^ https://github.com/dotnet/coreclr/tree/master/src/jit ^ "C# Guide". docs.microsoft.com. ^ https://dotnet.microsoft.com/download/dotnet/5.0 ^ https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/mitigation-new-64-bit-jit-compiler ^ https://devblogs.microsoft.com/dotnet/the-ryujit-transition-is-complete/ ^ "Compatibility - Mono". Mono-project.com. December 19, 2011. Retrieved October 4, 2012. ^ Etcheverry, Ignacio (October 21, 2017). "Introducing C# in Godot". Godot Engine. Archived from the original on October 26, 2018. Retrieved October 26, 2018. Further reading[edit] Drayton, Peter; Albahari, Ben; Neward, Ted (2002). C# Language Pocket Reference. O'Reilly. ISBN 0-596-00429-X. Petzold, Charles (2002). Programming Microsoft Windows with C#. Microsoft Press. ISBN 0-7356-1370-2. External links[edit] Wikibooks has a book on the topic of: C Sharp Programming C# Language Specification C# Programming Guide ISO C# Language Specification C# Compiler Platform ("Roslyn") source code v t e Common Language Infrastructure Architecture Application domain Code Access Security Common Intermediate Language (CIL) CIL instructions Common Type System (CTS) Platform Invocation Services (P/Invoke) Virtual Execution System (VES) Components Assembly Delegate Global Assembly Cache (GAC) Manifest Metadata Standard Libraries Kernel Profile Base Class Library (BCL) Runtime Infrastructure Library Compact Profile Network Library Reflection Library XML Library Extended Array Library Extended Numerics Library Parallel Library Vararg Library Implementations Microsoft .NET .NET Framework .NET Compact Framework .NET Micro Framework Other Mono Portable.NET Languages Major languages C# Visual Basic .NET F# PowerShell Other Axum A# Boo Cobra C++/CLI IronScheme IronPython IronRuby JScript .NET J# Nemerle Oxygene Phalanger Q# Scala Microsoft Small Basic Comparison C# and Java C# and Visual Basic .NET Java and .NET platforms Visual Basic and Visual Basic .NET Organizations .NET Foundation DotGNU Microsoft Xamarin v t e Microsoft free and open-source software (FOSS) Overview Microsoft and open source Shared Source Initiative Software Applications Atom Conference XP File Manager Open Live Writer PowerToys for Windows 10 Windows Calculator Windows Console Windows Package Manager Windows Terminal WorldWide Telescope XML Notepad Video games Allegiance Programming languages Bosque C# Dafny F# F* GW-BASIC IronPython IronRuby Lean P PowerShell Project Verona Q# R Open Small Basic TypeScript Visual Basic .NET Frameworks and development tools .NET .NET Bio .NET Framework .NET Gadgeteer .NET MAUI .NET Micro Framework AirSim ASP.NET ASP.NET AJAX ASP.NET Core ASP.NET MVC ASP.NET Razor ASP.NET Web Forms BitFunnel Blazor C++/WinRT CCF ChakraCore CLR Profiler DeepSpeed DiskSpd Dryad Dynamic Language Runtime Electron Entity Framework Fluid Framework Infer.NET LightGBM Managed Extensibility Framework Microsoft Automatic Graph Layout Microsoft C++ Standard Library Microsoft Cognitive Toolkit Microsoft Detours Microsoft Enterprise Library Microsoft SEAL Mimalloc ML.NET mod_mono Mono MonoDevelop MSBuild MsQuic Neural Network Intelligence npm NuGet OneFuzz Open Management Infrastructure Open Neural Network Exchange Open Service Mesh Open XML SDK Orleans ProcDump ProcMon Python Tools for Visual Studio R Tools for Visual Studio RecursiveExtractor Roslyn Sandcastle SignalR StyleCop SVNBridge T2 Temporal Prover Text Template Transformation Toolkit TLA+ Toolbox U-Prove vcpkg Virtual File System for Git Visual Studio Code Voldemort VoTT Vowpal Wabbit Windows Communication Foundation Windows Driver Frameworks Windows Forms Windows Presentation Foundation Windows Template Library Windows UI Library WinJS WinObjC WiX XSP xUnit.net Z3 Theorem Prover Operating systems MS-DOS (v1.25 & v2.0) Barrelfish SONiC Other ChronoZoom FlexWiki FourQ Gollum Wiki Project Mu ReactiveX SILK TLAPS TPM 2.0 Reference Implementation WikiBhasha Licenses Microsoft Public License Microsoft Reciprocal License Forges CodePlex GitHub Related .NET Foundation F Sharp Software Foundation Microsoft Open Specification Promise Open Letter to Hobbyists Open Source Security Foundation Outercurve Foundation Category v t e Standards of Ecma International Application interfaces ANSI escape code Common Language Infrastructure Office Open XML OpenXPS File systems (tape) Advanced Intelligent Tape DDS DLT Super DLT Holographic Versatile Disc Linear Tape-Open (Ultrium-1) VXA File systems (disk) CD-ROM CD File System (CDFS) FAT FAT12 FAT16 FAT16B FD UDF Ultra Density Optical Universal Media Disc Graphics Universal 3D Programming languages C++/CLI C# Eiffel JavaScript (E4X, ECMAScript) Dart Radio link interfaces NFC UWB Other ECMA-35 List of Ecma standards (1961 - Present) v t e ISO standards by standard number List of ISO standards / ISO romanizations / IEC standards 1–9999 1 2 3 4 5 6 7 9 16 17 31 -0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 128 216 217 226 228 233 259 269 302 306 361 428 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10005 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10303 -11 -21 -22 -28 -238 10383 10487 10585 10589 10646 10664 10746 10861 10957 10962 10967 11073 11170 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 (-2) 11941 11941 (TR) 11992 12006 12182 12207 12234-2 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14644 14649 14651 14698 14750 14764 14882 14971 15022 15189 15288 15291 15292 15398 15408 15444 -3 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 16023 16262 16355-1 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17799 18000 18004 18014 18245 18629 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000+ 20000 20022 20121 20400 21000 21047 21500 21827 22000 22300 22395 23270 23271 23360 24517 24613 24617 24707 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30170 31000 32000 37001 38500 40500 42010 45001 50001 55000 80000 -1 Category v t e Programming languages Comparison Timeline History ALGOL APL Assembly BASIC C C++ C# COBOL Go Erlang Forth Fortran Haskell Java JavaScript Kotlin Lisp ML Objective-C Pascal Perl PHP Prolog Python R Ruby Rust SQL Shell Simula Smalltalk Swift more... Category Lists: Alphabetical Categorical Generational Non-English-based v t e List of International Electrotechnical Commission standards IEC standards IEC 60027 IEC 60034 IEC 60038 IEC 60062 IEC 60063 IEC 60068 IEC 60112 IEC 60228 IEC 60269 IEC 60297 IEC 60309 IEC 60320 IEC 60364 IEC 60446 IEC 60559 IEC 60601 IEC 60870 IEC 60870-5 IEC 60870-6 IEC 60906-1 IEC 60908 IEC 60929 IEC 60958 AES3 S/PDIF IEC 61030 IEC 61131 IEC 61131-3 IEC 61131-9 IEC 61158 IEC 61162 IEC 61334 IEC 61346 IEC 61355 IEC 61360 IEC 61400 IEC 61499 IEC 61508 IEC 61511 IEC 61784 IEC 61850 IEC 61851 IEC 61883 IEC 61960 IEC 61968 IEC 61970 IEC 62014-4 IEC 62026 IEC 62056 IEC 62061 IEC 62196 IEC 62262 IEC 62264 IEC 62304 IEC 62325 IEC 62351 IEC 62365 IEC 62366 IEC 62379 IEC 62386 IEC 62455 IEC 62680 IEC 62682 IEC 62700 IEC 63110 IEC 63119 ISO/IEC standards ISO/IEC 646 ISO/IEC 2022 ISO/IEC 4909 ISO/IEC 5218 ISO/IEC 6429 ISO/IEC 6523 ISO/IEC 7810 ISO/IEC 7811 ISO/IEC 7812 ISO/IEC 7813 ISO/IEC 7816 ISO/IEC 7942 ISO/IEC 8613 ISO/IEC 8632 ISO/IEC 8652 ISO/IEC 8859 ISO/IEC 9126 ISO/IEC 9293 ISO/IEC 9592 ISO/IEC 9593 ISO/IEC 9899 ISO/IEC 9945 ISO/IEC 9995 ISO/IEC 10021 ISO/IEC 10116 ISO/IEC 10165 ISO/IEC 10179 ISO/IEC 10646 ISO/IEC 10967 ISO/IEC 11172 ISO/IEC 11179 ISO/IEC 11404 ISO/IEC 11544 ISO/IEC 11801 ISO/IEC 12207 ISO/IEC 13250 ISO/IEC 13346 ISO/IEC 13522-5 ISO/IEC 13568 ISO/IEC 13818 ISO/IEC 14443 ISO/IEC 14496 ISO/IEC 14882 ISO/IEC 15288 ISO/IEC 15291 ISO/IEC 15408 ISO/IEC 15444 ISO/IEC 15445 ISO/IEC 15504 ISO/IEC 15511 ISO/IEC 15693 ISO/IEC 15897 ISO/IEC 15938 ISO/IEC 16262 ISO/IEC 17024 ISO/IEC 17025 ISO/IEC 18000 ISO/IEC 18004 ISO/IEC 18014 ISO/IEC 19752 ISO/IEC 19757 ISO/IEC 19770 ISO/IEC 19788 ISO/IEC 20000 ISO/IEC 21000 ISO/IEC 21827 ISO/IEC 23000 ISO/IEC 23003 ISO/IEC 23008 ISO/IEC 23270 ISO/IEC 23360 ISO/IEC 24707 ISO/IEC 24727 ISO/IEC 24744 ISO/IEC 24752 ISO/IEC 26300 ISO/IEC 27000 ISO/IEC 27000-series ISO/IEC 27002 ISO/IEC 27040 ISO/IEC 29119 ISO/IEC 33001 ISO/IEC 38500 ISO/IEC 42010 ISO/IEC 80000 Related International Electrotechnical Commission Authority control BNF: cb13614817q (data) GND: 4616843-6 LCCN: sh2001001705 NKC: ph137696 Retrieved from "https://en.wikipedia.org/w/index.php?title=C_Sharp_(programming_language)&oldid=992332648" Categories: American inventions Programming languages C Sharp programming language family .NET programming languages Class-based programming languages Ecma standards Functional languages IEC standards ISO standards Multi-paradigm programming languages Programming languages created in 2000 Programming languages with an ISO standard Statically typed programming languages 2000 software Hidden categories: CS1 errors: missing periodical CS1: long volume value Articles with short description Short description matches Wikidata Use mdy dates from April 2020 Restricted titles Articles with example C Sharp code All articles with unsourced statements Articles with unsourced statements from October 2020 Wikipedia articles with BNF identifiers Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers Wikipedia articles with NKC identifiers Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikibooks Wikiversity Languages العربية Azərbaycanca বাংলা Bân-lâm-gú Беларуская Беларуская (тарашкевіца)‎ Български Bosanski Català Čeština Dansk Deutsch Eesti Ελληνικά Español Esperanto Euskara فارسی Français Galego ગુજરાતી 客家語/Hak-kâ-ngî 한국어 Հայերեն हिन्दी Hrvatski Bahasa Indonesia Íslenska Italiano עברית ქართული Қазақша Kiswahili Кыргызча Latviešu Lietuvių Magyar Македонски മലയാളം Bahasa Melayu Mìng-dĕ̤ng-ngṳ̄ မြန်မာဘာသာ Nederlands नेपाल भाषा 日本語 Norsk bokmål Norsk nynorsk Oʻzbekcha/ўзбекча پنجابی ភាសាខ្មែរ Plattdüütsch Polski Português Română Русский Саха тыла Shqip Simple English Slovenčina Slovenščina کوردی Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska தமிழ் Taqbaylit ไทย Тоҷикӣ Türkçe Українська اردو Tiếng Việt Winaray 吴语 Yorùbá 粵語 中文 Edit links This page was last edited on 4 December 2020, at 18:42 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement