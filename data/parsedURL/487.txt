Preprocessor - Wikipedia Preprocessor From Wikipedia, the free encyclopedia Jump to navigation Jump to search Program which processes the input for another program This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. Find sources: "Preprocessor" – news · newspapers · books · scholar · JSTOR (February 2013) (Learn how and when to remove this template message) In computer science, a preprocessor is a program that processes its input data to produce output that is used as input to another program. The output is said to be a preprocessed form of the input data, which is often used by some subsequent programs like compilers. The amount and kind of processing done depends on the nature of the preprocessor; some preprocessors are only capable of performing relatively simple textual substitutions and macro expansions, while others have the power of full-fledged programming languages. A common example from computer programming is the processing performed on source code before the next step of compilation.In some computer languages (e.g., C and PL/I) there is a phase of translation known as preprocessing. It can also include macro processing, file inclusion and language extensions. Contents 1 Lexical preprocessors 1.1 C preprocessor 1.2 Other lexical preprocessors 2 Syntactic preprocessors 2.1 Customizing syntax 2.2 Extending a language 2.3 Specializing a language 3 General purpose preprocessor 4 See also 5 References 6 External links Lexical preprocessors[edit] Lexical preprocessors are the lowest-level of preprocessors as they only require lexical analysis, that is, they operate on the source text, prior to any parsing, by performing simple substitution of tokenized character sequences for other tokenized character sequences, according to user-defined rules. They typically perform macro substitution, textual inclusion of other files, and conditional compilation or inclusion. C preprocessor[edit] Main article: C preprocessor The most common example of this is the C preprocessor, which takes lines beginning with '#' as directives. Because it knows nothing about the underlying language, its use has been criticized and many of its features built directly into other languages. For example, macros replaced with aggressive inlining and templates, includes with compile-time imports (this requires the preservation of type information in the object code, making this feature impossible to retrofit into a language); conditional compilation is effectively accomplished with if-then-else and dead code elimination in some languages. However, a key point to remember is that all preprocessor directives should start on a new line. Other lexical preprocessors[edit] Other lexical preprocessors include the general-purpose m4, most commonly used in cross-platform build systems such as autoconf, and GEMA, an open source macro processor which operates on patterns of context. Syntactic preprocessors[edit] Syntactic preprocessors were introduced with the Lisp family of languages. Their role is to transform syntax trees according to a number of user-defined rules. For some programming languages, the rules are written in the same language as the program (compile-time reflection). This is the case with Lisp and OCaml. Some other languages rely on a fully external language to define the transformations, such as the XSLT preprocessor for XML, or its statically typed counterpart CDuce. Syntactic preprocessors are typically used to customize the syntax of a language, extend a language by adding new primitives, or embed a domain-specific programming language (DSL) inside a general purpose language. Customizing syntax[edit] A good example of syntax customization is the existence of two different syntaxes in the Objective Caml programming language.[1] Programs may be written indifferently using the "normal syntax" or the "revised syntax", and may be pretty-printed with either syntax on demand. Similarly, a number of programs written in OCaml customize the syntax of the language by the addition of new operators. Extending a language[edit] The best examples of language extension through macros are found in the Lisp family of languages. While the languages, by themselves, are simple dynamically typed functional cores, the standard distributions of Scheme or Common Lisp permit imperative or object-oriented programming, as well as static typing. Almost all of these features are implemented by syntactic preprocessing, although it bears noting that the "macro expansion" phase of compilation is handled by the compiler in Lisp. This can still be considered a form of preprocessing, since it takes place before other phases of compilation. Specializing a language[edit] One of the unusual features of the Lisp family of languages is the possibility of using macros to create an internal DSL. Typically, in a large Lisp-based project, a module may be written in a variety of such minilanguages, one perhaps using a SQL-based dialect of Lisp, another written in a dialect specialized for GUIs or pretty-printing, etc. Common Lisp's standard library contains an example of this level of syntactic abstraction in the form of the LOOP macro, which implements an Algol-like minilanguage to describe complex iteration, while still enabling the use of standard Lisp operators. The MetaOCaml preprocessor/language provides similar features for external DSLs. This preprocessor takes the description of the semantics of a language (i.e. an interpreter) and, by combining compile-time interpretation and code generation, turns that definition into a compiler to the OCaml programming language—and from that language, either to bytecode or to native code. General purpose preprocessor[edit] Main article: General-purpose macro processor Most preprocessors are specific to a particular data processing task (e.g., compiling the C language). A preprocessor may be promoted as being general purpose, meaning that it is not aimed at a specific usage or programming language, and is intended to be used for a wide variety of text processing tasks. M4 is probably the most well known example of such a general purpose preprocessor, although the C preprocessor is sometimes used in a non-C specific role. Examples: using C preprocessor for JavaScript preprocessing.[2] using C preprocessor for devicetree processing within the Linux kernel.[3] using M4 (see on-article example) or C preprocessor[4] as a template engine, to HTML generation. imake, a make interface using the C preprocessor, written for the X Window System but now deprecated in favour of automake. grompp, a preprocessor for simulation input files for GROMACS (a fast, free, open-source code for some problems in computational chemistry) which calls the system C preprocessor (or other preprocessor as determined by the simulation input file) to parse the topology, using mostly the #define and #include mechanisms to determine the effective topology at grompp run time. using GPP for preprocessing markdown files[5] See also[edit] Directive (programming) – Language construct that specifies how a compiler should process its input Metaprogramming Macros – In computer science, a concise representation of a pattern Source-to-source compiler, also known as Transpiler – Translator that takes source code of a program and produces an equivalent source code in the same or a different programming language Sass (stylesheet language) – Stylesheet language Stylus (stylesheet language) Less (stylesheet language) – Dynamic stylesheet language Snippet (programming) – A small region of re-usable source code, machine code, or text Template engine – Software designed to combine templates with a data model to produce result documents The C preprocessor The OCaml preprocessor-pretty-printer The PL/I preprocessor The Windows software trace preprocessor General-purpose macro processor – Macro processor that is not tied to or integrated with a particular language or piece of software. References[edit] ^ The Revised syntax from The Caml language website ^ Show how to use C-preprocessor on JavaScript files. "JavaScript is Not Industrial Strength" by T. Snyder. ^ https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/commit/?id=b40b25fff8205dd18124d8fc87b2c9c57f269b5f ^ Show how to use C-preprocessor as template engine."Using a C preprocessor as an HTML authoring tool" by J. Korpela, 2000. ^ https://adityam.github.io/context-blog/post/markdown-with-gpp/ External links[edit] Look up preprocessor in Wiktionary, the free dictionary. DSL Design in Lisp Programming from the bottom up The Generic PreProcessor Gema, the General Purpose Macro Processor The PIKT piktc text, script, and configuration file preprocessor pyexpander, a python based general purpose macro processor minimac, a minimalist macro processor Java Comment Preprocessor Retrieved from "https://en.wikipedia.org/w/index.php?title=Preprocessor&oldid=977177091" Categories: Programming language implementation Hidden categories: Articles with short description Short description is different from Wikidata Articles needing additional references from February 2013 All articles needing additional references Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages العربية Български Čeština Dansk Deutsch Ελληνικά Español Esperanto فارسی Français 한국어 Հայերեն Italiano עברית Кыргызча Lietuvių Македонски Nederlands 日本語 Polski Português Русский Suomi Українська Tiếng Việt 中文 Edit links This page was last edited on 7 September 2020, at 10:25 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement