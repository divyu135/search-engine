Inform - Wikipedia Inform From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article is about the programming language. For other uses, see Inform (disambiguation). Inform Original author(s) Graham Nelson Developer(s) Graham Nelson Stable release 7 6M62 / December 24, 2015 (2015-12-24)[1] Operating system Microsoft Windows, Mac OS X, Linux, others Type Interactive fiction development and play Website http://inform7.com/ Inform is a programming language and design system for interactive fiction originally created in 1993 by Graham Nelson. Inform can generate programs designed for the Z-code or Glulx virtual machines. Versions 1 through 5 were released between 1993 and 1996. Around 1996, Nelson rewrote Inform from first principles to create version 6 (or Inform 6).[2]Over the following decade, version 6 became reasonably stable and a popular language for writing interactive fiction. In 2006, Nelson released Inform 7 (briefly known as Natural Inform), a completely new language based on principles of natural language and a new set of tools based around a book-publishing metaphor. Contents 1 Z-Machine and Glulx 2 Inform 6 2.1 The Inform 6 compiler 2.2 The Inform 6 programming language 2.3 Inform 6 library 2.4 Example game 2.5 Notable games developed in Inform 6 or earlier versions 3 Inform 7 3.1 Inform 7 IDE 3.2 Inform 7 programming language 3.3 Example game 3.4 Notable games written in Inform 7 4 See also 5 Further reading 6 References 7 External links Z-Machine and Glulx[edit] The Inform compilers translate Inform code to story files for Glulx or Z-code, two virtual machines designed specifically for interactive fiction. Glulx, which can support larger games, is the default. The Z-machine was originally developed by Infocom in 1979 for their interactive fiction titles. Because there is at least one such interpreter for nearly every major and minor platform, this means that the same Z-code file can be run on a multitude of platforms with no alterations. Originally Inform targeted the Z-machine only. Andrew Plotkin created an unofficial version of Inform 6 that was also capable of generating files for Glulx, a virtual machine he had designed to overcome many of the limitations of the several-decades-old Z-machine. Starting with Inform 6.3, released February 29, 2004, Inform 6 has included official support for both virtual machines, based on Andrew Plotkin's work. Early release of Inform 7 did not support Glulx, but in August 2006 Glulx support was released. Inform 6[edit] Inform 1–6 Paradigm object-oriented, procedural Designed by Graham Nelson Developer Graham Nelson First appeared 1993 Stable release 6.32 / 2010 Preview release 6.33 / May 10, 2014 (2014-05-10) [3] OS Microsoft Windows, Mac OS X, Linux, others License Freeware and Artistic License 2.0 Website inform-fiction.org Influenced by natural language Influenced Inform 7 Inform was originally created by Graham Nelson in 1993. In 1996 Nelson rewrote Inform from first principles to create version 6 (or Inform 6). Over the following decade, version 6 became reasonably stable and a popular language for writing interactive fiction. The Inform 6 system consists of two major components: the Inform compiler, which generates story files from Inform source code, and the Inform library, a suite of software which handles most of the difficult work of parsing the player's text input and keeping track of the world model. The name Inform also refers to the Inform programming language that the compiler understands. Although Inform 6 and the Z-Machine were originally designed with interactive fiction in mind, many other programs have been developed, including a BASIC interpreter, a LISP tutorial (complete with interpreter), a Tetris game, and a version of the game Snake. The Inform 6 compiler[edit] The Inform compiler generates files for the Z-machine or Glulx (also called story files) from Inform 6 source code. The Inform 6 programming language[edit] The Inform programming language is object-oriented and procedural. A key element of the language is objects. Objects are maintained in an object tree which lists the parent–child relationships between objects. Since the parent–child relationship is often used to represent location, an object which is the parent of another object is often said to "hold" it. Objects can be moved throughout the tree. Typically, top level objects represent rooms and other locations within the game, which may hold objects representing the room's contents, be they physical items, non-player characters, the player's character, or background effects. All objects can hold other objects, so a livingroom object might hold an insurancesaleman object which is holding a briefcase object which contains the insurancepaperwork object. In early versions of Inform, objects were different from the notion of objects from object-oriented programming, in that there was no such thing as a class. Later versions added support for class definitions and allowed objects to be members of classes. Objects and classes can inherit from multiple classes. Interactive fiction games typically contain many unique objects. Because of this, many objects in Inform do not inherit from any class, other than the "metaclass" Object. However, objects very frequently have attributes (boolean properties, such as scenery or edible) that are recognized by the Inform library. In other languages this would normally be implemented via inheritance. Here is a simple example of Inform 6 source code. [ Main;    print "Hello, World!^";]; Inform 6 library[edit] The Inform system also contains the Inform library, which automates nearly all the most difficult work involved in programming interactive fiction; specifically, it includes a text parser that makes sense of the player's input, and a world model that keeps track of such things as objects (and their properties), rooms, doors, the player's inventory, etc. The Inform compiler does not require the use of the Inform library. There are several replacement libraries available, such as Platypus[4] and InformATE, a library that codes Inform in Spanish. Example game[edit] Here is an example of Inform 6 source code that makes use of the Inform library. The Inform 6 code sample below is usable in Inform 7, but not without special demarcation indicating that it is embedded legacy code.  Constant Story "Hello Deductible"; Constant Headline "^An Interactive Example^"; Include "Parser"; Include "VerbLib"; [ Initialise;     location = Living_Room;     "Hello World"; ]; Object Kitchen "Kitchen"; Object Front_Door "Front Door"; Object Living_Room "Living Room"     with         description "A comfortably furnished living room.",         n_to Kitchen,         s_to Front_Door,     has light; Object -> Salesman "insurance salesman"     with         name 'insurance' 'salesman' 'man',         description "An insurance salesman in a tacky polyester               suit.  He seems eager to speak to you.",         before [;             Listen:                 move Insurance_Paperwork to player;                 "The salesman bores you with a discussion                  of life insurance policies.  From his                  briefcase he pulls some paperwork which he                  hands to you.";         ],     has animate; Object -> -> Briefcase "briefcase"     with         name 'briefcase' 'case',         description "A slightly worn, black briefcase.",     has container; Object -> -> -> Insurance_Paperwork "insurance paperwork"     with         name 'paperwork' 'papers' 'insurance' 'documents' 'forms',         description "Page after page of small legalese."; Include "Grammar"; Notable games developed in Inform 6 or earlier versions[edit] Curses, by Graham Nelson (1993), the first game ever written in the Inform programming language. Considered one of the first "modern" games to meet the high standards set by Infocom's best titles.[5] Zork: The Undiscovered Underground (1997), written by Marc Blank & Michael Berlyn, programmed by Gerry Kevin Wilson. Given away free by Activision to promote the release of Zork: Grand Inquisitor. Anchorhead, by Michael S. Gentry (1998) is a highly rated horror story inspired by H. P. Lovecraft's Cthulhu Mythos.[6] Photopia, by Adam Cadre (1998), the first almost entirely puzzle-free game. Won the annual Interactive Fiction Competition in 1998. Varicella by Adam Cadre (1999). It won four XYZZY Awards in 1999 including the XYZZY Award for Best Game, and had a scholarly essay written about it.[7] Galatea, by Emily Short (2000). Galatea is focused entirely on interaction with the animated statue of the same name. Galatea has one of the most complex interaction systems for a non-player character in an interactive fiction game. Adam Cadre called Galatea "the best NPC ever".[8] Slouching Towards Bedlam, by Star C. Foster and Daniel Ravipinto (2003). Set in a steampunk setting, the game integrates meta-game functionality (saving, restoring, restarting) into the game world itself. The game won two XYZZY Awards and received the highest average score of any game in the Interactive Fiction Competition as of 2006. Inform 7[edit] Inform 7 Paradigm declarative, procedural Designed by Graham Nelson Developer Graham Nelson First appeared 2006 Stable release 6M62 / December 24, 2015; 4 years ago (2015-12-24) [9] OS Microsoft Windows, Mac OS X, Linux, others License Proprietary but freely redistributable or Artistic License 2.0 Website http://inform7.com/ Influenced by Inform 6 On April 30, 2006, Graham Nelson announced the beta release of Inform 7 to the rec.arts.int-fiction newsgroup.[10]Inform 7 consists of three primary parts: The Inform 7 IDE with development tools specialized for testing interactive fiction, the Inform 7 compiler for the new language, and "The Standard Rules" which form the core library for Inform 7. Inform 7 also relies on the Inform library and Inform compiler from Inform 6. The compiler compiles the Inform 7 source code into Inform 6 source code, which is then compiled separately by Inform 6 to generate a Glulx or Z-code story file. Inform 7 also defaults to writing Blorb files, archives which include the Z-code together with optional "cover art" and metadata intended for indexing purposes. The full set of Inform 7 tools are currently available for Mac OS X, Microsoft Windows and Linux. The March 25, 2007 release added command line support for Linux, and new releases now include an IDE using the GNOME desktop environment under the GNOME Inform 7 SourceForge project.[11] The language and tools remain under development;[12]the March 25, 2007 release included a number of changes to the language. In 2019, Graham Nelson announced the eventual open sourcing of Inform 7.[13] Inform 7 was named Natural Inform for a brief period of time, but was later renamed Inform 7. This old name is why the Inform 7 compiler is named "NI."[14] Inform 7 IDE[edit] The Inform 7 IDE on Mac OS X showing source code and the skein The Inform 7 IDE on Mac OS X showing the Index Map and the transcript Inform 7 comes with an integrated development environment (IDE) for Mac OS X, Microsoft Windows and Linux. The Mac OS X IDE was developed by Andrew Hunter. The Microsoft Windows IDE was developed by David Kinder. The Linux IDE (known as GNOME Inform) was developed by Philip Chimento. The Inform 7 IDE includes a text editor for editing Inform 7 source code. Like many other programming editors it features syntax highlighting. It marks quoted strings in one color. Headings of organizational sections (Volumes, Books, Chapters, Parts, and Sections) are bolded and made larger. Comments are set in a different color and made slightly smaller. The IDE includes a built-in Z-code interpreter. The Mac OS X IDE's interpreter is based on the Zoom interpreter by Andrew Hunter, with contributions from Jesse McGrew[citation needed]. The Microsoft Windows IDE's interpreter is based on WinFrotz. As a developer tests the game in the built-in interpreter, progress is tracked in the "skein" and "transcript" views of the IDE. The skein tracks player commands as a tree of branching possibilities. Any branch of the tree can be quickly re-followed, making it possible to retry different paths in a game under development without replaying the same portions of the game. Paths can also be annotated with notes and marked as solutions, which can be exported as text walkthroughs. The transcript, on the other hand, tracks both player commands and the game's responses. Correct responses from the game can be marked as "blessed." On replaying a transcript or a branch of the skein, variations from the blessed version will be highlighted, which can help the developer find errors. The IDE also provides various indices into the program under development. The code is shown as a class hierarchy, a traditional IF map, a book-like table of contents, and in other forms. Clicking items in the index jumps to the relevant source code. The IDE presents two side-by-side panes for working in. Each pane can contain the source code being worked on, the current status of compilation, the skein, the transcript, the indices of the source code, a running version of the game, documentation for Inform 7 or any installed extensions to it, or settings. The concept is to imitate an author's manuscript book by presenting two "facing pages" instead of a multitude of separate windows.[10] Inform 7 programming language[edit] Notable features include strong bias towards declarative rule-based style of programming and ability to infer types and properties of objects from the way they are used. For example, the statement "John wears a hat." creates a "person" called "John" (since only people are capable of wearing things), creates a "thing" with the "wearable" property (since only objects marked "wearable" are capable of being worn), and sets John as wearing the hat. Another notable aspect of the language is direct support for relations which track associations between objects. This includes automatically provided relations, like one object containing another or an object being worn, but the developer can add his/her own relations. A developer might add relations indicating love or hatred between beings, or to track which characters in a game have met each other. Inform 7 is a highly domain-specific programming language, providing the writer/programmer with a much higher level of abstraction than Inform 6, and highly readable resulting source code. Example game[edit] Statements in Inform 7 take the form of complete sentences. Blank lines and indentation are in some places structurally significant. The basic form of an Inform 7 program is as follows: "Hello, World!" by "I.F. Author"The world is a room.When play begins, say "Hello, World!" The following is a reimplementation of the above "Hello Deductible" example written in Inform 7. It relies on the library known as "The Standard Rules" which are automatically included in all Inform 7 compilations. "Hello Deductible" by "I.F. Author"The story headline is "An Interactive Example".The Living Room is a room. "A comfortably furnished living room."The Kitchen is north of the Living Room.The Front Door is south of the Living Room.The Front Door is a door. The Front Door is closed and locked.The insurance salesman is a man in the Living Room. The description is "An insurance salesman in a tacky polyester suit. He seems eager to speak to you." Understand "man" as the insurance salesman.A briefcase is carried by the insurance salesman. The description is "A slightly worn, black briefcase."  Understand "case" as the briefcase.The insurance paperwork is in the briefcase. The description is "Page after page of small legalese." Understand "papers" or "documents" or "forms" as the paperwork.Instead of listening to the insurance salesman: 	say "The salesman bores you with a discussion of life insurance policies. From his briefcase he pulls some paperwork which he hands to you.";	move the insurance paperwork to the player. Notable games written in Inform 7[edit] Mystery House Possessed (2005), by Emily Short,[15] was the first Inform 7 game released to be public. It was released as part of the "Mystery House Taken Over" project. On March 1, 2006, Short announced the release of three further games:[16]Bronze[17] (an example of a traditional puzzle-intensive game) and Damnatio Memoriae[18] (a follow-up to her award-winning Inform 6 game Savoir-Faire) were joined by Graham Nelson's The Reliques of Tolti-Aph[19] (2006). When the Inform 7 public beta was announced on April 30, 2006, six "worked examples" of medium to large scale works were made available along with their source code, including the three games previously released on March 1.[20][21][22] Emily Short's Floatpoint was the first Inform 7 game to take first place in the Interactive Fiction Competition.[23]It also won 2006 XYZZY Awards for Best Setting and Best NPCs.[24] Rendition, by nespresso (2007), is a political art experiment in the form of a text adventure game. Its approach to tragedy has been discussed academically by both the Association for Computing Machinery[25] and Cambridge University.[26] See also[edit] Inform version history Interactive fiction § Development systems lists software similar to Inform TADS The Text Adventure Development System (TADS), another leading IF development system Further reading[edit] Inform 6 The official manual of Inform is Graham Nelson's Inform Designer's Manual: it is a tutorial, a manual, and a technical document rolled into one. It is available online for free at Inform's official website,[27] and two printed editions are available: a softcover ( ISBN 0-9713119-0-0) and a hardcover ( ISBN 0-9713119-3-5).[28] The Inform Beginner's Guide by Roger Firth and Sonja Kesserich ( ISBN 0-9713119-2-7) attempts to provide a more gentle introduction to Inform. It is available for free at Inform's official website.[29] Inform 7 The SPAG Interview - An interview with designers Graham Nelson and Emily Short about the development of Inform 7. This interview was made shortly before its release and published on the same day as the initial release.[2] "Natural Language, Semantic Analysis and Interactive Fiction" - A paper on the design of Inform 7 by designer Graham Nelson.[30] References[edit] ^ "Inform 7 6M62 Changelog". inform7.com. Retrieved December 24, 2015. ^ a b "The SPAG Interview: Graham Nelson and Emily Short on Inform 7". SPAG #44. The Society for the Promotion of Adventure Games. April 30, 2006. Retrieved November 7, 2015. ^ "Release v6.33". Retrieved February 26, 2015. ^ Turner, Anson (March 14, 2002). "Inform Platypus release 4". Retrieved January 4, 2007. ^ Alan De Smet (March 14, 2006). "Curses (Interactive Fiction Reviews)". Retrieved November 1, 2006. ^ Of the 1219 games rated at "Interactive Fiction Ratings", Anchorhead was the highest rated game as of January 4, 2007. ("IF Rating Stats". Retrieved January 4, 2007. ) ^ Montfort, Nick; Stuart Moulthrop (August 2003). "Face It, Tiger, You Just Hit the Jackpot: Reading and Playing Cadre's Varicella". Archived from the original (PDF) on November 6, 2009. Retrieved November 6, 2009. Published as Montfort, Nick; Moulthrop, Stuart (August 2003). "Face It, Tiger, You Just Hit the Jackpot: Reading and Playing Cadre's Varicella". Fine Art Online. Mississippi State University. 17 (8). Archived from the original on October 13, 2007. ^ "Photopia is a short story, Varicella is a world". L’avventura è l’avventura. January 2002. Retrieved January 4, 2007. ^ "Download". Inform 7. Retrieved March 15, 2016. ^ a b Graham Nelson (April 30, 2006). "Inform 7: Public Beta". Newsgroup: rec.arts.int-fiction. Usenet: 1146419288.944486.157150@i39g2000cwa.googlegroups.com. Retrieved January 4, 2007. ^ "GNOME Inform 7 SourceForge project page". February 2008. ^ Emily Short (February 18, 2007). "Inform 7: Possible future developments". Newsgroup: rec.arts.int-fiction. Usenet: 1169164007.311210.64650@a75g2000cwd.googlegroups.com. Retrieved March 30, 2007. Also archived atShort, Emily; Graham Nelson (January 2007). "Inform 7: Possible future developments". Archived from the original on September 5, 2008. Retrieved March 31, 2007. ^ Graham Nelson (June 14, 2019). "Opening Inform". Retrieved June 2, 2020. ^ Graham Nelson (March 30, 2007). "Re: "Inform 7" is the wrong name". Newsgroup: rec.arts.int-fiction. Usenet: 1175250734.801804.199340@y80g2000hsf.googlegroups.com. Retrieved March 30, 2007. ^ "Mystery House Taken Over". Retrieved January 4, 2007. ^ Emily Short (at the request of Graham Nelson) (March 1, 2006). "Three games in Inform 7". Newsgroup: rec.games.int-fiction. Usenet: 1141259182.610660.185360@p10g2000cwp.googlegroups.com. Retrieved January 4, 2007. ^ Short, Emily (2006). "Bronze". Retrieved January 4, 2007. ^ Short, Emily (2006). "Damnatio Memoriae". Retrieved January 4, 2007. ^ Nelson, Graham (2005). "The Reliques of Tolti-Aph". Retrieved January 4, 2007. ^ Short, Emily (2006). "Bronze". Archived from the original on February 10, 2007. Retrieved January 4, 2007. ^ Short, Emily (2006). "Damnatio Memoriae". Archived from the original on December 12, 2006. Retrieved January 4, 2007. ^ Nelson, Graham (2005). "The Reliques of Tolti-Aph". Archived from the original on February 6, 2007. Retrieved January 4, 2007. ^ "12th Annual Interactive Fiction Competition". 2006. Retrieved May 12, 2007. ^ "XYZZY Awards: Winning Games of 2006". Archived from the original on May 15, 2007. Retrieved May 12, 2007. ^ "ACM Hypertext 2007 conference slides (PDF)" (PDF). ^ "Cambridge University lecture slides". ^ "Download the Inform Designer's Manual". April 1, 2006. Retrieved January 4, 2007. ^ "About the Inform Designer's Manual". April 1, 2006. Retrieved January 4, 2007. ^ "Download the Inform Beginner's Guide". April 1, 2006. Retrieved January 4, 2007. Firth, Roger; Sonja Kesserich (August 2004). "The Inform Beginner's Guide: Third Edition" (PDF). Retrieved January 4, 2007. ^ Graham Nelson (April 10, 2006). "Natural Language, Semantic Analysis, and Interactive Fiction" (PDF). Archived from the original (PDF) on March 14, 2018. Retrieved January 4, 2007. Cite journal requires |journal= (help) External links[edit] Cloak of Darkness: Inform presents the same, short game implemented in both Inform 6 and Inform 7, as well as other languages for comparison. Inform 6 - Official web site Inform 6 FAQ at Roger Firth's IF Pages provides details on programming in Inform 6. Inform 7 - Official web site. Inform at Curlie The Interactive Fiction Archive provides many Inform tools, examples, and library files. Playfic is a web-based interface for creating and sharing new games using Inform 7. Guncho is a multiplayer interactive fiction system based on Inform 7 with a combination of MUD-like and web-based interfaces. Retrieved from "https://en.wikipedia.org/w/index.php?title=Inform&oldid=982833167" Categories: 1993 software Interactive fiction Freeware Domain-specific programming languages History of computing in the United Kingdom Video game development software Text adventure game engines Programming languages created in 1993 Hidden categories: CS1 errors: missing periodical Use mdy dates from October 2014 All articles with unsourced statements Articles with unsourced statements from April 2008 Articles with Curlie links Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages Čeština ChiShona Deutsch Español Français Italiano Nederlands 日本語 Polski Português Русский Suomi Edit links This page was last edited on 10 October 2020, at 16:57 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement