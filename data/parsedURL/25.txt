First normal form - Wikipedia First normal form From Wikipedia, the free encyclopedia Jump to navigation Jump to search First normal form (1NF) is a property of a relation in a relational database. A relation is in first normal form if and only if the domain of each attribute contains only atomic (indivisible) values, and the value of each attribute contains only a single value from that domain.[1] The first definition of the term, in a 1971 conference paper by Edgar Codd, defined a relation to be in first normal form when none of its domains have any sets as elements.[2] First normal form is an essential property of a relation in a relational database. Database normalization is the process of representing a database in terms of relations in standard normal forms, where first normal is a minimal requirement. First normal form enforces these criteria:[3] Eliminate repeating groups[clarification needed] in individual tables Create a separate table for each set of related data[definition needed] Identify each set of related data with a primary key Contents 1 Examples 1.1 Designs that violate 1NF 1.2 Designs that comply with 1NF 2 Atomicity 3 1NF tables as representations of relations 4 See also 5 References 6 Further reading Examples[edit] The following scenarios first illustrate how a database design might violate first normal form, followed by examples that comply. Designs that violate 1NF[edit] Below is a table that stores the names and telephone numbers of customers. One requirement though is to retain multiple telephone numbers for some customers. The simplest way of satisfying this requirement is to allow the "Telephone Number" column in any given row to contain more than one value: Customer Customer ID First Name Surname Telephone Number 123 Pooja Singh 555-861-2025, 192-122-1111 456 San Zhang (555) 403-1659 Ext. 53; 182-929-2929 789 John Doe 555-808-9633 The telephone number column contains multiple phone numbers in a single value. For example, the first row has two telephone numbers separated by a comma. The column values are not atomic: it can be subdivided into two numbers. This violates first normal form. An apparent solution is to introduce more columns: Customer Customer ID First Name Surname Telephone Number1 Telephone Number2 123 Pooja Singh 555-861-2025 192-122-1111 456 San Zhang (555) 403-1659 Ext. 53 182-929-2929 789 John Doe 555-808-9633 Technically, this table does not violate the requirement for values to be atomic. However, informally, the two telephone number columns still form a "repeating group": they repeat what is conceptually the same attribute, namely a telephone number. An arbitrary and hence meaningless ordering has been introduced: why is 555-861-2025 put into the Telephone Number1 column rather than the Telephone Number2 column? There's no reason why customers could not have more than two telephone numbers, so how many Telephone NumberN columns should there be? It is not possible to search for a telephone number without searching an arbitrary number of columns. Adding an extra telephone number may require the table to be reorganized by the addition of a new column rather than just having a new row (tuple) added. (The null value for Telephone Number2 for customer 789 is also an issue.) Designs that comply with 1NF[edit] To bring the model into the first normal form, we split the strings we used to hold our telephone number information into "atomic" (i.e. indivisible) entities: single phone numbers. And we ensure no row contains more than one phone number. Customer Customer ID First Name Surname Telephone Number 123 Pooja Singh 555-861-2025 123 Pooja Singh 192-122-1111 456 San Zhang 182-929-2929 456 San Zhang (555) 403-1659 Ext. 53 789 John Doe 555-808-9633 Note that the "ID" is no longer unique in this solution with duplicated customers. To uniquely identify a row, we need to use a combination of (ID, Telephone Number). The value of the combination is unique although each column separately contains repeated values. Being able to uniquely identify a row (tuple) is a requirement of 1NF. An alternative design uses two tables: Customer Name Customer ID First Name Surname 123 Pooja Singh 456 San Zhang 789 John Doe Customer Telephone Number Telephone Number ID Customer ID Telephone Number 1 123 555-861-2025 2 123 192-122-1111 3 456 (555) 403-1659 Ext. 53 4 456 182-929-2929 5 789 555-808-9633 Columns do not contain more than one telephone number in this design. Instead, each Customer-to-Telephone Number link appears on its own row. Using Customer ID as key, a one-to-many relationship exists between the name and the number tables. A row in the "parent" table, Customer Name, can be associated with many telephone number rows in the "child" table, Customer Telephone Number, but each telephone number belongs to one, and only one customer. (In the "real" world, this would not be a good assumption.) It is worth noting that this design meets the additional requirements for second and third normal form. Atomicity[edit] Edgar F. Codd's definition of 1NF makes reference to the concept of 'atomicity'. Codd states that the "values in the domains on which each relation is defined are required to be atomic with respect to the DBMS."[4] Codd defines an atomic value as one that "cannot be decomposed into smaller pieces by the DBMS (excluding certain special functions)"[5] meaning a column should not be divided into parts with more than one kind of data in it such that what one part means to the DBMS depends on another part of the same column. Hugh Darwen and Chris Date have suggested that Codd's concept of an "atomic value" is ambiguous, and that this ambiguity has led to widespread confusion about how 1NF should be understood.[6][7] In particular, the notion of a "value that cannot be decomposed" is problematic, as it would seem to imply that few, if any, data types are atomic: A character string would seem not to be atomic, as the RDBMS typically provides operators to decompose it into substrings. A fixed-point number would seem not to be atomic, as the RDBMS typically provides operators to decompose it into integer and fractional components. An ISBN would seem not to be atomic, as it includes language and publisher identifier. Date suggests that "the notion of atomicity has no absolute meaning":[8][9] a value may be considered atomic for some purposes, but may be considered an assemblage of more basic elements for other purposes. If this position is accepted, 1NF cannot be defined with reference to atomicity. Columns of any conceivable data type (from string types and numeric types to array types and table types) are then acceptable in a 1NF table—although perhaps not always desirable; for example, it may be more desirable to separate a Customer Name column into two separate columns as First Name, Surname. 1NF tables as representations of relations[edit] According to Date's definition, a table is in first normal form if and only if it is "isomorphic to some relation", which means, specifically, that it satisfies the following five conditions:[10] There's no top-to-bottom ordering to the rows. There's no left-to-right ordering to the columns. There are no duplicate rows. Every row-and-column intersection contains exactly one value from the applicable domain (and nothing else). All columns are regular [i.e. rows have no hidden components such as row IDs, object IDs, or hidden timestamps]. Violation of any of these conditions would mean that the table is not strictly relational, and therefore that it is not in first normal form. Examples of tables (or views) that would not meet this definition of first normal form are: A table that lacks a unique key constraint. Such a table would be able to accommodate duplicate rows, in violation of condition 3. A view whose definition mandates that results be returned in a particular order, so that the row-ordering is an intrinsic and meaningful aspect of the view. (Such views cannot be created using SQL that conforms to the SQL:2003 standard.) This violates condition 1. The tuples in true relations are not ordered with respect to each other. A table with at least one nullable attribute. A nullable attribute would be in violation of condition 4, which requires every column to contain exactly one value from its column's domain. This aspect of condition 4 is controversial. It marks an important departure from Codd's later vision of the relational model,[11] which made explicit provision for nulls.[12] First normal form, as defined by Chris Date, permits relation-valued attributes (tables within tables). Date argues that relation-valued attributes, by means of which a column within a table can contain a table, are useful in rare cases.[13] See also[edit] For other normal forms, see the navigation bar at the bottom of the page. References[edit] ^ Elmasri, Ramez; Navathe, Shamkant B. (July 2003). Fundamentals of Database Systems (Fourth ed.). Pearson. p. 315. ISBN 0321204484. It states that the domain of an attribute must include only atomic (simple, indivisible) values and that the value of any attribute in a tuple must be a single value from the domain of that attribute. ^ Codd, E. F. (October 1972). Further normalization of the database relational model. Data Base Systems. Courant Institute: Prentice-Hall. ISBN 013196741X. A relation is in first normal form if it has the property that none of its domains has elements which are themselves sets. ^ Watt, Adrienne; Eng, Nelson (2014). Database Design (2nd ed.). Victoria, B.C: BCcampus. ^ Codd, E. F. The Relational Model for Database Management Version 2 (Addison-Wesley, 1990). ^ Codd, E. F. The Relational Model for Database Management Version 2 (Addison-Wesley, 1990), p. 6. ^ Darwen, Hugh. "Relation-Valued Attributes; or, Will the Real First Normal Form Please Stand Up?", in C. J. Date and Hugh Darwen, Relational Database Writings 1989-1991 (Addison-Wesley, 1992). ^ Date, C. J. (2007). What First Normal Form Really Means. Date on Database: Writings 2000–2006. Apress. p. 108. ISBN 978-1-4842-2029-0. '[F]or many years,' writes Date, 'I was as confused as anyone else. What's worse, I did my best (worst?) to spread that confusion through my writings, seminars, and other presentations.' ^ Date, C. J. (2007). What First Normal Form Really Means. Date on Database: Writings 2000–2006. Apress. p. 112. ISBN 978-1-4842-2029-0. ^ Date, C. J. (6 November 2015). SQL and Relational Theory: How to Write Accurate SQL Code. O'Reilly Media. pp. 50–. ISBN 978-1-4919-4115-7. Retrieved 31 October 2018. ^ Date, C. J. (2007). What First Normal Form Really Means. Date on Database: Writings 2000–2006. Apress. pp. 127–128. ISBN 978-1-4842-2029-0. ^ Date, C. J. (2009). "Appendix A.2". SQL and Relational Theory. O'Reilly. Codd first defined the relational model in 1969 and didn't introduce nulls until 1979 ^ Date, C. J. (October 14, 1985). "Is Your DBMS Really Relational?". Computerworld. Null values ... [must be] supported in a fully relational DBMS for representing missing information and inapplicable information in a systematic way, independent of data type. (the third of Codd's 12 rules) ^ Date, C. J. (2007). What First Normal Form Really Means. Date on Database: Writings 2000–2006. Apress. pp. 121–126. ISBN 978-1-4842-2029-0. Further reading[edit] Date, C. J., & Lorentzos, N., & Darwen, H. (2002). Temporal Data & the Relational Model (1st ed.). Morgan Kaufmann. ISBN 1-55860-855-9. Date, C. J. (1999), An Introduction to Database Systems (8th ed.). Addison-Wesley Longman. ISBN 0-321-19784-4. Kent, W. (1983) A Simple Guide to Five Normal Forms in Relational Database Theory, Communications of the ACM, vol. 26, pp. 120–125 Codd, E.F. (1970). A Relational Model of Data for. Large Shared Data Banks. IBM Research Laboratory, San Jose, California. Codd, E. F. (1971). Further Normalization of the Relational Model. Courant Computer Science Symposium 6 in Data Base Systems edited by Rustin, R. v t e Database normalization Unnormalized form (UNF/NF2) First normal form (1NF) Second normal form (2NF) Third normal form (3NF) Elementary key normal form (EKNF) Boyce–Codd normal form (3.5NF / BCNF) Fourth normal form (4NF) Fifth normal form (5NF / PJNF) Domain-key normal form (DKNF) Sixth normal form (6NF) Denormalization Retrieved from "https://en.wikipedia.org/w/index.php?title=First_normal_form&oldid=981612075" Categories: Database normalization Hidden categories: Wikipedia articles needing clarification from October 2018 Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages Deutsch Español 한국어 Bahasa Melayu Polski Русский Simple English Slovenščina Српски / srpski தமிழ் Türkçe Українська Tiếng Việt 中文 Edit links This page was last edited on 3 October 2020, at 11:54 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement