Structure and Interpretation of Computer Programs - Wikipedia Structure and Interpretation of Computer Programs From Wikipedia, the free encyclopedia (Redirected from 6.001) Jump to navigation Jump to search Computer science textbook Structure and Interpretation of Computer Programs Cover of the second edition Author Harold Abelson, Gerald Jay Sussman, Julie Sussman Subject Computer science Genre Textbook Publisher MIT Press Publication date 1985 (1st ed.), 1996 (2nd ed.) Pages 657 ISBN 0-262-51087-1 (2nd ed.) LC Class QA76.6 .A255 1996 Website mitpress.mit.edu/sicp Structure and Interpretation of Computer Programs (SICP) is a computer science textbook by Massachusetts Institute of Technology professors Harold Abelson and Gerald Jay Sussman with Julie Sussman. It is known as the Wizard Book in hacker culture.[1][2] It teaches fundamental principles of computer programming, including recursion, abstraction, modularity, and programming language design and implementation. The MIT Press published the first edition in 1985, and the second edition in 1996. It was formerly used as the textbook for MIT's introductory course in electrical engineering and computer science. SICP focuses on discovering general patterns for solving specific problems, and building software systems that make use of those patterns.[3] Contents 1 Content 2 Characters 3 License 4 Coursework 5 Reception 6 Influence 7 See also 8 References 9 External links Content[edit] The book describes computer science concepts using Scheme, a dialect of Lisp. It also uses a virtual register machine and assembler to implement Lisp interpreters and compilers. Characters[edit] Several fictional characters appear in the book: Alyssa P. Hacker, a Lisp hacker Ben Bitdiddle, a hardware expert Cy D. Fect, a "reformed C programmer" Eva Lu Ator, an evaluator Lem E. Tweakit, an irate user Louis Reasoner, a loose reasoner License[edit] The book is licensed under a Creative Commons Attribution ShareAlike 4.0 License.[4] Coursework[edit] The book was used as the textbook for MIT's former introductory programming course, 6.001.[5] That course was replaced by 6.0001,[6] which uses Python.[7] Other schools also made use of the book as a course textbook.[8] It is used as the textbook for MIT's Large Scale Symbolic Systems class, 6.945.[9] Reception[edit] Byte recommended SICP "for professional programmers who are really interested in their profession". The magazine said that the book was not easy to read, but that it would expose experienced programmers to both old and new topics.[10] Influence[edit] SICP has been influential in computer science education, and several later books have been inspired by its style. Structure and Interpretation of Classical Mechanics (SICM), another book by Gerald Jay Sussman that uses Scheme How to Design Programs (HtDP), which intends to be a more accessible book for introductory Computer Science, and to address perceived incongruities in SICP Essentials of Programming Languages (EoPL), a book for Programming Languages courses See also[edit] Structure and Interpretation of Computer Programs, JavaScript Adaptation References[edit] ^ "Wizard Book", The New Hacker's Dictionary (2nd ed.), 1993 ^ "The Top 91⁄2 Books in a Hacker's Bookshelf", Grok code, retrieved 2010-10-23 ^ Harvey, B (2011), "Why SICP matters?", The 150th anniversary of MIT, Boston Globe . ^ "SICP". MIT Press. . ^ "Electrical Engineering and Computer Science; 6.001 Structure and Interpretation of Computer Programs". OpenCourseWare. MIT. Spring 2005. Retrieved 2020-06-21. ^ "6.0001", Catalog, MIT . ^ Guy, Donald, "The End of an Era", MIT Admissions (blog comment), archived from the original on 2018-08-21, retrieved 2008-08-05, I talked to Professor Sussman on the phone... He said that he'd actually been trying to have 6.001 replaced for the last ten years (and I read somewhere that Professor Abelson was behind the move too). Understanding the principles is not essential for an introduction to the subject matter anymore. He sees 6.001 as obsolete. . ^ Martin, Edward C. (2009-07-20). "Schools". Schemers. Retrieved 2011-06-28. ^ "Large Scale Symbolic Systems class, 6.945". MIT Touchstone. Retrieved 2019-06-16. ^ Kilov, Haim (November 1986). Byte Magazine Volume 11 Number 12: Knowledge Representation. p. 70. External links[edit] Official website Video lectures Book compiled from TeX source v t e Lisp programming language Features Automatic storage management Conditionals Dynamic typing Higher-order functions Linked lists M-expressions (deprecated) Read–eval–print loop Recursion S-expressions Self-hosting compiler Tree data structures Object systems Common Lisp Object System (CLOS) CommonLoops Flavors Implementations Technical standard(s) exists Common Lisp Allegro Common Lisp Armed Bear Common Lisp (ABCL) CLISP Clozure CL CMU Common Lisp (CMUCL) Corman Common Lisp Embeddable Common Lisp (ECL) GNU Common Lisp (GCL) LispWorks Macintosh Common Lisp Mocl Movitz Poplog Steel Bank Common Lisp (SBCL) Symbolics Common Lisp Scheme History Bigloo Chez Scheme Chicken Gambit Game Oriented Assembly Lisp (GOAL) Ikarus JScheme Kawa Larceny MIT/GNU Scheme MultiLisp Pocket Scheme Racket RScheme Scheme 48 SCM SIOD T TinyScheme ISLISP OpenLisp Nonstandard Logo MSWLogo NetLogo StarLogo UCBLogo Arc AutoLISP BBN LISP Clojure Dylan (Apple, history) Emacs Lisp EuLisp Franz Lisp, PC-LISP Hy Interlisp Knowledge Engineering Environment *Lisp LeLisp LFE Lisp Machine Lisp Maclisp MDL MLisp newLISP NIL PC-LISP Picolisp Portable Standard Lisp RPL S-1 Lisp SKILL Spice Lisp Zetalisp Operating system Common Lisp Interface Manager, McCLIM Genera Scsh Hardware Lisp machines TI Explorer Space-cadet keyboard Community of practice Technical standards Scheme Requests for Implementation Common Lisp HyperSpec X3J13 Education Books Common Lisp the Language How to Design Programs (HTDP) On Lisp Practical Common Lisp Structure and Interpretation of Computer Programs (SICP) Curriculum ProgramByDesign Organizations Business Apple Computer Bolt, Beranek and Newman Harlequin Lucid Inc. Symbolics Xanalys Education Massachusetts Institute of Technology (MIT) MIT Computer Science and Artificial Intelligence Laboratory (CSAIL) Stanford Artificial Intelligence Laboratory University of California, Berkeley People Edmund Berkeley Daniel G. Bobrow William Clinger R. Kent Dybvig Matthias Felleisen Robert Bruce Findler Matthew Flatt Phyllis Fox Paul Graham Richard Greenblatt Timothy P. Hart Louis Hodes Mike Levin David Luckham John McCarthy Robert Tappan Morris Joel Moses David Park Steve Russell Richard Stallman Common Lisp Scott Fahlman Richard P. Gabriel Philip Greenspun (10th rule) David A. Moon Kent Pitman Guy L. Steele Jr. Daniel Weinreb Scheme Shriram Krishnamurthi Guy L. Steele Jr. Gerald Jay Sussman Julie Sussman Logo Hal Abelson Denison Bollay Wally Feurzeig Brian Harvey Seymour Papert Mitchel Resnick Cynthia Solomon Category Category List Retrieved from "https://en.wikipedia.org/w/index.php?title=Structure_and_Interpretation_of_Computer_Programs&oldid=983577601#Coursework" Categories: 1985 non-fiction books 1996 non-fiction books Computer science books Computer programming books Creative Commons-licensed books Massachusetts Institute of Technology Scheme (programming language) Lisp (programming language) Hidden categories: Articles with short description Short description matches Wikidata Official website different in Wikidata and Wikipedia Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages Deutsch Français Hrvatski Italiano 日本語 Русский Svenska Türkçe 中文 Edit links This page was last edited on 15 October 2020, at 01:16 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement