C++ - Wikipedia C++ From Wikipedia, the free encyclopedia Jump to navigation Jump to search General-purpose programming language "CXX" redirects here. For other uses, see CXX (disambiguation). C++ The C++ logo endorsed by Standard C++ Paradigms Multi-paradigm: procedural, functional, object-oriented, generic, modular Family C Designed by Bjarne Stroustrup Developer ISO/IEC JTC1 (Joint Technical Committee 1) / SC22 (Subcommittee 22) / WG21 (Working Group 21) First appeared 1985; 35 years ago (1985) Stable release C++17 (ISO/IEC 14882:2017) / 1 December 2017; 3 years ago (2017-12-01) Preview release C++20 Typing discipline Static, nominative, partially inferred OS Most major Filename extensions .C, .cc, .cpp, .cxx, .c++, .h, .hh, .hpp, .hxx, .h++ Website isocpp.org Major implementations GCC, LLVM Clang, Microsoft Visual C++, Embarcadero C++Builder, Intel C++ Compiler, IBM XL C++, EDG Influenced by Ada,[1] ALGOL 68, C, CLU,[1] ML, Mesa,[1] Modula-2,[1] Simula, Smalltalk[1] Influenced Ada 95, C#,[2] C99, Chapel,[3] Clojure,[4] D, Java,[5] JS++,[6] Lua, Nim,[7] Perl, PHP, Python,[8] Rust, Seed7 C++ Programming at Wikibooks C++ (/ˌsiːˌplʌsˈplʌs/) is a general-purpose programming language created by Bjarne Stroustrup as an extension of the C programming language, or "C with Classes". The language has expanded significantly over time, and modern C++ now has object-oriented, generic, and functional features in addition to facilities for low-level memory manipulation. It is almost always implemented as a compiled language, and many vendors provide C++ compilers, including the Free Software Foundation, LLVM, Microsoft, Intel, Oracle, and IBM, so it is available on many platforms.[9] C++ was designed with a bias toward system programming and embedded, resource-constrained software and large systems, with performance, efficiency, and flexibility of use as its design highlights.[10] C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications,[10] including desktop applications, video games, servers (e.g. e-commerce, Web search, or SQL servers), and performance-critical applications (e.g. telephone switches or space probes).[11] C++ is standardized by the International Organization for Standardization (ISO), with the latest standard version ratified and published by ISO in December 2017 as ISO/IEC 14882:2017 (informally known as C++17).[12] The C++ programming language was initially standardized in 1998 as ISO/IEC 14882:1998, which was then amended by the C++03, C++11 and C++14 standards. The current C++17 standard supersedes these with new features and an enlarged standard library. Before the initial standardization in 1998, C++ was developed by Danish computer scientist Bjarne Stroustrup at Bell Labs since 1979 as an extension of the C language; he wanted an efficient and flexible language similar to C that also provided high-level features for program organization.[13] Since 2012, C++ is on a three-year release schedule,[14] with C++20 the next planned standard (and then C++23).[15] Contents 1 History 1.1 Etymology 1.2 Philosophy 1.3 Standardization 2 Language 2.1 Object storage 2.1.1 Static storage duration objects 2.1.2 Thread storage duration objects 2.1.3 Automatic storage duration objects 2.1.4 Dynamic storage duration objects 2.2 Templates 2.3 Objects 2.3.1 Encapsulation 2.3.2 Inheritance 2.4 Operators and operator overloading 2.5 Polymorphism 2.5.1 Static polymorphism 2.5.2 Dynamic polymorphism 2.5.2.1 Inheritance 2.5.2.2 Virtual member functions 2.6 Lambda expressions 2.7 Exception handling 3 Standard library 4 C++ Core Guidelines 5 Compatibility 5.1 With C 6 Criticism 7 See also 8 References 9 Further reading 10 External links History[edit] Bjarne Stroustrup, the creator of C++, in his AT&T New Jersey office c. 2000 In 1979, Bjarne Stroustrup, a Danish computer scientist, began work on "C with Classes", the predecessor to C++.[16] The motivation for creating a new language originated from Stroustrup's experience in programming for his PhD thesis. Stroustrup found that Simula had features that were very helpful for large software development, but the language was too slow for practical use, while BCPL was fast but too low-level to be suitable for large software development. When Stroustrup started working in AT&T Bell Labs, he had the problem of analyzing the UNIX kernel with respect to distributed computing. Remembering his Ph.D. experience, Stroustrup set out to enhance the C language with Simula-like features.[17] C was chosen because it was general-purpose, fast, portable and widely used. As well as C and Simula's influences, other languages also influenced this new language, including ALGOL 68, Ada, CLU and ML. Initially, Stroustrup's "C with Classes" added features to the C compiler, Cpre, including classes, derived classes, strong typing, inlining and default arguments.[18] In 1982, Stroustrup started to develop a successor to C with Classes, which he named "C++" (++ being the increment operator in C) after going through several other names. New features were added, including virtual functions, function name and operator overloading, references, constants, type-safe free-store memory allocation (new/delete), improved type checking, and BCPL style single-line comments with two forward slashes (//). Furthermore, Stroustrup developed a new, standalone compiler for C++, Cfront. In 1984, Stroustrup implemented the first stream input/output library. The idea of providing an output operator rather than a named output function was suggested by Doug McIlroy[1] (who had previously suggested Unix pipes). In 1985, the first edition of The C++ Programming Language was released, which became the definitive reference for the language, as there was not yet an official standard.[19] The first commercial implementation of C++ was released in October of the same year.[16] In 1989, C++ 2.0 was released, followed by the updated second edition of The C++ Programming Language in 1991.[20] New features in 2.0 included multiple inheritance, abstract classes, static member functions, const member functions, and protected members. In 1990, The Annotated C++ Reference Manual was published. This work became the basis for the future standard. Later feature additions included templates, exceptions, namespaces, new casts, and a Boolean type. A quiz on C++11 features being given in Paris in 2015 In 1998, C++98 was released, standardizing the language, and a minor update (C++03) was released in 2003. After C++98, C++ evolved relatively slowly until, in 2011, the C++11 standard was released, adding numerous new features, enlarging the standard library further, and providing more facilities to C++ programmers. After a minor C++14 update released in December 2014, various new additions were introduced in C++17.[21] The C++20 standard became technically finalized in February 2020,[22] and a draft was approved on 4th September 2020; it is expected to be published by the end of 2020.[23][24] As of 2019,[update] C++ is now the fourth most popular programming language, behind Java, C, and Python.[25][26] On January 3, 2018, Stroustrup was announced as the 2018 winner of the Charles Stark Draper Prize for Engineering, "for conceptualizing and developing the C++ programming language".[27] Etymology[edit] According to Stroustrup, "the name signifies the evolutionary nature of the changes from C".[28] This name is credited to Rick Mascitti (mid-1983)[18] and was first used in December 1983. When Mascitti was questioned informally in 1992 about the naming, he indicated that it was given in a tongue-in-cheek spirit. The name comes from C's ++ operator (which increments the value of a variable) and a common naming convention of using "+" to indicate an enhanced computer program. During C++'s development period, the language had been referred to as "new C" and "C with Classes"[18][29] before acquiring its final name. Philosophy[edit] Throughout C++'s life, its development and evolution has been guided by a set of principles:[17] It must be driven by actual problems and its features should be immediately useful in real world programs. Every feature should be implementable (with a reasonably obvious way to do so). Programmers should be free to pick their own programming style, and that style should be fully supported by C++. Allowing a useful feature is more important than preventing every possible misuse of C++. It should provide facilities for organising programs into separate, well-defined parts, and provide facilities for combining separately developed parts. No implicit violations of the type system (but allow explicit violations; that is, those explicitly requested by the programmer). User-created types need to have the same support and performance as built-in types. Unused features should not negatively impact created executables (e.g. in lower performance). There should be no language beneath C++ (except assembly language). C++ should work alongside other existing programming languages, rather than fostering its own separate and incompatible programming environment. If the programmer's intent is unknown, allow the programmer to specify it by providing manual control. Standardization[edit] Scene during the C++ Standards Committee meeting in Stockholm in 1996 C++ standards Year C++ Standard Informal name 1998 ISO/IEC 14882:1998[30] C++98 2003 ISO/IEC 14882:2003[31] C++03 2011 ISO/IEC 14882:2011[32] C++11, C++0x 2014 ISO/IEC 14882:2014[33] C++14, C++1y 2017 ISO/IEC 14882:2017[12] C++17, C++1z 2020 to be determined C++20,[21] C++2a C++ is standardized by an ISO working group known as JTC1/SC22/WG21. So far, it has published five revisions of the C++ standard and is currently working on the next revision, C++20. In 1998, the ISO working group standardized C++ for the first time as ISO/IEC 14882:1998, which is informally known as C++98. In 2003, it published a new version of the C++ standard called ISO/IEC 14882:2003, which fixed problems identified in C++98. The next major revision of the standard was informally referred to as "C++0x", but it was not released until 2011.[34] C++11 (14882:2011) included many additions to both the core language and the standard library.[32] In 2014, C++14 (also known as C++1y) was released as a small extension to C++11, featuring mainly bug fixes and small improvements.[35] The Draft International Standard ballot procedures completed in mid-August 2014.[36] After C++14, a major revision C++17, informally known as C++1z, was completed by the ISO C++ Committee in mid July 2017 and was approved and published in December 2017.[37] As part of the standardization process, ISO also publishes technical reports and specifications: ISO/IEC TR 18015:2006[38] on the use of C++ in embedded systems and on performance implications of C++ language and library features, ISO/IEC TR 19768:2007[39] (also known as the C++ Technical Report 1) on library extensions mostly integrated into C++11, ISO/IEC TR 29124:2010[40] on special mathematical functions, ISO/IEC TR 24733:2011[41] on decimal floating point arithmetic, ISO/IEC TS 18822:2015[42] on the standard filesystem library, ISO/IEC TS 19570:2015[43] on parallel versions of the standard library algorithms, ISO/IEC TS 19841:2015[44] on software transactional memory, ISO/IEC TS 19568:2015[45] on a new set of library extensions, some of which are already integrated into C++17, ISO/IEC TS 19217:2015[46] on the C++ concepts, integrated into C++20 ISO/IEC TS 19571:2016[47] on the library extensions for concurrency ISO/IEC TS 19568:2017[48] on a new set of general-purpose library extensions ISO/IEC TS 21425:2017[49] on the library extensions for ranges, integrated into C++20 ISO/IEC TS 22277:2017[50] on coroutines ISO/IEC TS 19216:2018[51] on the networking library ISO/IEC TS 21544:2018[52] on modules ISO/IEC TS 19570:2018[53] on a new set of library extensions for parallelism More technical specifications are in development and pending approval, including static reflection.[54] Language[edit] The C++ language has two main components: a direct mapping of hardware features provided primarily by the C subset, and zero-overhead abstractions based on those mappings. Stroustrup describes C++ as "a light-weight abstraction programming language [designed] for building and using efficient and elegant abstractions";[10] and "offering both hardware access and abstraction is the basis of C++. Doing it efficiently is what distinguishes it from other languages."[55] C++ inherits most of C's syntax. The following is Bjarne Stroustrup's version of the Hello world program that uses the C++ Standard Library stream facility to write a message to standard output:[56][57] 1 #include <iostream>2 3 int main()4 {5     std::cout << "Hello, world!\n";6 } Object storage[edit] As in C, C++ supports four types of memory management: static storage duration objects, thread storage duration objects, automatic storage duration objects, and dynamic storage duration objects.[58] Static storage duration objects[edit] Static storage duration objects are created before main() is entered (see exceptions below) and destroyed in reverse order of creation after main() exits. The exact order of creation is not specified by the standard (though there are some rules defined below) to allow implementations some freedom in how to organize their implementation. More formally, objects of this type have a lifespan that "shall last for the duration of the program".[59] Static storage duration objects are initialized in two phases. First, "static initialization" is performed, and only after all static initialization is performed, "dynamic initialization" is performed. In static initialization, all objects are first initialized with zeros; after that, all objects that have a constant initialization phase are initialized with the constant expression (i.e. variables initialized with a literal or constexpr). Though it is not specified in the standard, the static initialization phase can be completed at compile time and saved in the data partition of the executable. Dynamic initialization involves all object initialization done via a constructor or function call (unless the function is marked with constexpr, in C++11). The dynamic initialization order is defined as the order of declaration within the compilation unit (i.e. the same file). No guarantees are provided about the order of initialization between compilation units. Thread storage duration objects[edit] Variables of this type are very similar to static storage duration objects. The main difference is the creation time is just prior to thread creation and destruction is done after the thread has been joined.[60] Automatic storage duration objects[edit] The most common variable types in C++ are local variables inside a function or block, and temporary variables.[61] The common feature about automatic variables is that they have a lifetime that is limited to the scope of the variable. They are created and potentially initialized at the point of declaration (see below for details) and destroyed in the reverse order of creation when the scope is left. This is implemented by allocation on the stack. Local variables are created as the point of execution passes the declaration point. If the variable has a constructor or initializer this is used to define the initial state of the object. Local variables are destroyed when the local block or function that they are declared in is closed. C++ destructors for local variables are called at the end of the object lifetime, allowing a discipline for automatic resource management termed RAII, which is widely used in C++. Member variables are created when the parent object is created. Array members are initialized from 0 to the last member of the array in order. Member variables are destroyed when the parent object is destroyed in the reverse order of creation. i.e. If the parent is an "automatic object" then it will be destroyed when it goes out of scope which triggers the destruction of all its members. Temporary variables are created as the result of expression evaluation and are destroyed when the statement containing the expression has been fully evaluated (usually at the ; at the end of a statement). Dynamic storage duration objects[edit] Main article: new and delete (C++) These objects have a dynamic lifespan and can be created directly with a call to new and destroyed explicitly with a call to delete.[62] C++ also supports malloc and free, from C, but these are not compatible with new and delete. Use of new returns an address to the allocated memory. The C++ Core Guidelines advise against using new directly for creating dynamic objects in favor of smart pointers through make_unique<T> for single ownership and make_shared<T> for reference-counted multiple ownership,[63] which were introduced in C++11. Templates[edit] See also: Template metaprogramming and Generic programming C++ templates enable generic programming. C++ supports function, class, alias, and variable templates. Templates may be parameterized by types, compile-time constants, and other templates. Templates are implemented by instantiation at compile-time. To instantiate a template, compilers substitute specific arguments for a template's parameters to generate a concrete function or class instance. Some substitutions are not possible; these are eliminated by an overload resolution policy described by the phrase "Substitution failure is not an error" (SFINAE). Templates are a powerful tool that can be used for generic programming, template metaprogramming, and code optimization, but this power implies a cost. Template use may increase code size, because each template instantiation produces a copy of the template code: one for each set of template arguments, however, this is the same or smaller amount of code that would be generated if the code was written by hand.[64] This is in contrast to run-time generics seen in other languages (e.g., Java) where at compile-time the type is erased and a single template body is preserved. Templates are different from macros: while both of these compile-time language features enable conditional compilation, templates are not restricted to lexical substitution. Templates are aware of the semantics and type system of their companion language, as well as all compile-time type definitions, and can perform high-level operations including programmatic flow control based on evaluation of strictly type-checked parameters. Macros are capable of conditional control over compilation based on predetermined criteria, but cannot instantiate new types, recurse, or perform type evaluation and in effect are limited to pre-compilation text-substitution and text-inclusion/exclusion. In other words, macros can control compilation flow based on pre-defined symbols but cannot, unlike templates, independently instantiate new symbols. Templates are a tool for static polymorphism (see below) and generic programming. In addition, templates are a compile time mechanism in C++ that is Turing-complete, meaning that any computation expressible by a computer program can be computed, in some form, by a template metaprogram prior to runtime. In summary, a template is a compile-time parameterized function or class written without knowledge of the specific arguments used to instantiate it. After instantiation, the resulting code is equivalent to code written specifically for the passed arguments. In this manner, templates provide a way to decouple generic, broadly applicable aspects of functions and classes (encoded in templates) from specific aspects (encoded in template parameters) without sacrificing performance due to abstraction. Objects[edit] Main article: C++ classes C++ introduces object-oriented programming (OOP) features to C. It offers classes, which provide the four features commonly present in OOP (and some non-OOP) languages: abstraction, encapsulation, inheritance, and polymorphism. One distinguishing feature of C++ classes compared to classes in other programming languages is support for deterministic destructors, which in turn provide support for the Resource Acquisition is Initialization (RAII) concept. Encapsulation[edit] Encapsulation is the hiding of information to ensure that data structures and operators are used as intended and to make the usage model more obvious to the developer. C++ provides the ability to define classes and functions as its primary encapsulation mechanisms. Within a class, members can be declared as either public, protected, or private to explicitly enforce encapsulation. A public member of the class is accessible to any function. A private member is accessible only to functions that are members of that class and to functions and classes explicitly granted access permission by the class ("friends"). A protected member is accessible to members of classes that inherit from the class in addition to the class itself and any friends. The object-oriented principle ensures the encapsulation of all and only the functions that access the internal representation of a type. C++ supports this principle via member functions and friend functions, but it does not enforce it. Programmers can declare parts or all of the representation of a type to be public, and they are allowed to make public entities not part of the representation of a type. Therefore, C++ supports not just object-oriented programming, but other decomposition paradigms such as modular programming. It is generally considered good practice to make all data private or protected, and to make public only those functions that are part of a minimal interface for users of the class. This can hide the details of data implementation, allowing the designer to later fundamentally change the implementation without changing the interface in any way.[65][66] Inheritance[edit] Inheritance allows one data type to acquire properties of other data types. Inheritance from a base class may be declared as public, protected, or private. This access specifier determines whether unrelated and derived classes can access the inherited public and protected members of the base class. Only public inheritance corresponds to what is usually meant by "inheritance". The other two forms are much less frequently used. If the access specifier is omitted, a "class" inherits privately, while a "struct" inherits publicly. Base classes may be declared as virtual; this is called virtual inheritance. Virtual inheritance ensures that only one instance of a base class exists in the inheritance graph, avoiding some of the ambiguity problems of multiple inheritance. Multiple inheritance is a C++ feature not found in most other languages, allowing a class to be derived from more than one base class; this allows for more elaborate inheritance relationships. For example, a "Flying Cat" class can inherit from both "Cat" and "Flying Mammal". Some other languages, such as C# or Java, accomplish something similar (although more limited) by allowing inheritance of multiple interfaces while restricting the number of base classes to one (interfaces, unlike classes, provide only declarations of member functions, no implementation or member data). An interface as in C# and Java can be defined in C++ as a class containing only pure virtual functions, often known as an abstract base class or "ABC". The member functions of such an abstract base class are normally explicitly defined in the derived class, not inherited implicitly. C++ virtual inheritance exhibits an ambiguity resolution feature called dominance. Operators and operator overloading[edit] Operators that cannot be overloaded Operator Symbol Scope resolution operator :: Conditional operator ?: dot operator . Member selection operator .* "sizeof" operator sizeof "typeid" operator typeid Main article: Operators in C and C++ C++ provides more than 35 operators, covering basic arithmetic, bit manipulation, indirection, comparisons, logical operations and others. Almost all operators can be overloaded for user-defined types, with a few notable exceptions such as member access (. and .*) as well as the conditional operator. The rich set of overloadable operators is central to making user-defined types in C++ seem like built-in types. Overloadable operators are also an essential part of many advanced C++ programming techniques, such as smart pointers. Overloading an operator does not change the precedence of calculations involving the operator, nor does it change the number of operands that the operator uses (any operand may however be ignored by the operator, though it will be evaluated prior to execution). Overloaded "&&" and "||" operators lose their short-circuit evaluation property. Polymorphism[edit] See also: Polymorphism (computer science) Polymorphism enables one common interface for many implementations, and for objects to act differently under different circumstances. C++ supports several kinds of static (resolved at compile-time) and dynamic (resolved at run-time) polymorphisms, supported by the language features described above. Compile-time polymorphism does not allow for certain run-time decisions, while runtime polymorphism typically incurs a performance penalty. Static polymorphism[edit] See also: Parametric polymorphism and ad hoc polymorphism Function overloading allows programs to declare multiple functions having the same name but with different arguments (i.e. ad hoc polymorphism). The functions are distinguished by the number or types of their formal parameters. Thus, the same function name can refer to different functions depending on the context in which it is used. The type returned by the function is not used to distinguish overloaded functions and would result in a compile-time error message. When declaring a function, a programmer can specify for one or more parameters a default value. Doing so allows the parameters with defaults to optionally be omitted when the function is called, in which case the default arguments will be used. When a function is called with fewer arguments than there are declared parameters, explicit arguments are matched to parameters in left-to-right order, with any unmatched parameters at the end of the parameter list being assigned their default arguments. In many cases, specifying default arguments in a single function declaration is preferable to providing overloaded function definitions with different numbers of parameters. Templates in C++ provide a sophisticated mechanism for writing generic, polymorphic code (i.e. parametric polymorphism). In particular, through the curiously recurring template pattern, it's possible to implement a form of static polymorphism that closely mimics the syntax for overriding virtual functions. Because C++ templates are type-aware and Turing-complete, they can also be used to let the compiler resolve recursive conditionals and generate substantial programs through template metaprogramming. Contrary to some opinion, template code will not generate a bulk code after compilation with the proper compiler settings.[64] Dynamic polymorphism[edit] Inheritance[edit] See also: Subtyping Variable pointers and references to a base class type in C++ can also refer to objects of any derived classes of that type. This allows arrays and other kinds of containers to hold pointers to objects of differing types (references cannot be directly held in containers). This enables dynamic (run-time) polymorphism, where the referred objects can behave differently, depending on their (actual, derived) types. C++ also provides the dynamic_cast operator, which allows code to safely attempt conversion of an object, via a base reference/pointer, to a more derived type: downcasting. The attempt is necessary as often one does not know which derived type is referenced. (Upcasting, conversion to a more general type, can always be checked/performed at compile-time via static_cast, as ancestral classes are specified in the derived class's interface, visible to all callers.) dynamic_cast relies on run-time type information (RTTI), metadata in the program that enables differentiating types and their relationships. If a dynamic_cast to a pointer fails, the result is the nullptr constant, whereas if the destination is a reference (which cannot be null), the cast throws an exception. Objects known to be of a certain derived type can be cast to that with static_cast, bypassing RTTI and the safe runtime type-checking of dynamic_cast, so this should be used only if the programmer is very confident the cast is, and will always be, valid. Virtual member functions[edit] Ordinarily, when a function in a derived class overrides a function in a base class, the function to call is determined by the type of the object. A given function is overridden when there exists no difference in the number or type of parameters between two or more definitions of that function. Hence, at compile time, it may not be possible to determine the type of the object and therefore the correct function to call, given only a base class pointer; the decision is therefore put off until runtime. This is called dynamic dispatch. Virtual member functions or methods[67] allow the most specific implementation of the function to be called, according to the actual run-time type of the object. In C++ implementations, this is commonly done using virtual function tables. If the object type is known, this may be bypassed by prepending a fully qualified class name before the function call, but in general calls to virtual functions are resolved at run time. In addition to standard member functions, operator overloads and destructors can be virtual. As a rule of thumb, if any function in the class is virtual, the destructor should be as well. As the type of an object at its creation is known at compile time, constructors, and by extension copy constructors, cannot be virtual. Nonetheless a situation may arise where a copy of an object needs to be created when a pointer to a derived object is passed as a pointer to a base object. In such a case, a common solution is to create a clone() (or similar) virtual function that creates and returns a copy of the derived class when called. A member function can also be made "pure virtual" by appending it with = 0 after the closing parenthesis and before the semicolon. A class containing a pure virtual function is called an abstract class. Objects cannot be created from an abstract class; they can only be derived from. Any derived class inherits the virtual function as pure and must provide a non-pure definition of it (and all other pure virtual functions) before objects of the derived class can be created. A program that attempts to create an object of a class with a pure virtual member function or inherited pure virtual member function is ill-formed. Lambda expressions[edit] C++ provides support for anonymous functions, also known as lambda expressions, with the following form: [capture](parameters) -> return_type { function_body } If the lambda takes no parameters, the () can be omitted, that is, [capture] -> return_type { function_body } Also, the return type of a lambda expression can be automatically inferred, if possible, e.g.: [](int x, int y) { return x + y; } // inferred[](int x, int y) -> int { return x + y; } // explicit The [capture] list supports the definition of closures. Such lambda expressions are defined in the standard as syntactic sugar for an unnamed function object. Exception handling[edit] Exception handling is used to communicate the existence of a runtime problem or error from where it was detected to where the issue can be handled.[68] It permits this to be done in a uniform manner and separately from the main code, while detecting all errors.[69] Should an error occur, an exception is thrown (raised), which is then caught by the nearest suitable exception handler. The exception causes the current scope to be exited, and also each outer scope (propagation) until a suitable handler is found, calling in turn the destructors of any objects in these exited scopes.[70] At the same time, an exception is presented as an object carrying the data about the detected problem.[71] Some C++ style guides, such as Google's,[72] LLVM's,[73] and Qt's[74] forbid the usage of exceptions. The exception-causing code is placed inside a try block. The exceptions are handled in separate catch blocks (the handlers); each try block can have multiple exception handlers, as it is visible in the example below.[75]  1 #include <iostream> 2 #include <vector> 3 #include <stdexcept> 4  5 int main() { 6     try { 7         std::vector<int> vec{3, 4, 3, 1}; 8         int i{vec.at(4)}; // Throws an exception, std::out_of_range (indexing for vec is from 0-3 not 1-4) 9     }10     // An exception handler, catches std::out_of_range, which is thrown by vec.at(4)11     catch (std::out_of_range &e) {12         std::cerr << "Accessing a non-existent element: " << e.what() << '\n';13     }14     // To catch any other standard library exceptions (they derive from std::exception)15     catch (std::exception &e) {16         std::cerr << "Exception thrown: " << e.what() << '\n';17     }18     // Catch any unrecognised exceptions (i.e. those which don't derive from std::exception)19     catch (...) {20         std::cerr << "Some fatal error\n";21     }22 } It is also possible to raise exceptions purposefully, using the throw keyword; these exceptions are handled in the usual way. In some cases, exceptions cannot be used due to technical reasons. One such example is a critical component of an embedded system, where every operation must be guaranteed to complete within a specified amount of time. This cannot be determined with exceptions as no tools exist to determine the maximum time required for an exception to be handled.[76] Unlike signal handling, in which the handling function is called from the point of failure, exception handling exits the current scope before the catch block is entered, which may be located in the current function or any of the previous function calls currently on the stack. Standard library[edit] The draft "Working Paper" standard that became approved as C++98; half of its size was devoted to the C++ Standard Library Main article: C++ Standard Library The C++ standard consists of two parts: the core language and the standard library. C++ programmers expect the latter on every major implementation of C++; it includes aggregate types (vectors, lists, maps, sets, queues, stacks, arrays, tuples), algorithms (find, for_each, binary_search, random_shuffle, etc.), input/output facilities (iostream, for reading from and writing to the console and files), filesystem library, localisation support, smart pointers for automatic memory management, regular expression support, multi-threading library, atomics support (allowing a variable to be read or written to by at most one thread at a time without any external synchronisation), time utilities (measurement, getting current time, etc.), a system for converting error reporting that doesn't use C++ exceptions into C++ exceptions, a random number generator and a slightly modified version of the C standard library (to make it comply with the C++ type system). A large part of the C++ library is based on the Standard Template Library (STL). Useful tools provided by the STL include containers as the collections of objects (such as vectors and lists), iterators that provide array-like access to containers, and algorithms that perform operations such as searching and sorting. Furthermore, (multi)maps (associative arrays) and (multi)sets are provided, all of which export compatible interfaces. Therefore, using templates it is possible to write generic algorithms that work with any container or on any sequence defined by iterators. As in C, the features of the library are accessed by using the #include directive to include a standard header. The C++ Standard Library provides 105 standard headers, of which 27 are deprecated. The standard incorporates the STL that was originally designed by Alexander Stepanov, who experimented with generic algorithms and containers for many years. When he started with C++, he finally found a language where it was possible to create generic algorithms (e.g., STL sort) that perform even better than, for example, the C standard library qsort, thanks to C++ features like using inlining and compile-time binding instead of function pointers. The standard does not refer to it as "STL", as it is merely a part of the standard library, but the term is still widely used to distinguish it from the rest of the standard library (input/output streams, internationalization, diagnostics, the C library subset, etc.).[77] Most C++ compilers, and all major ones, provide a standards-conforming implementation of the C++ standard library. C++ Core Guidelines[edit] The C++ Core Guidelines[78] are an initiative led by Bjarne Stroustrup, the inventor of C++, and Herb Sutter, the convener and chair of the C++ ISO Working Group, to help programmers write 'Modern C++' by using best practices for the language standards C++14 and newer, and to help developers of compilers and static checking tools to create rules for catching bad programming practices. The main aim is to efficiently and consistently write type and resource safe C++. The Core Guidelines were announced[79] in the opening keynote at CPPCon 2015. The Guidelines are accompanied by the Guideline Support Library (GSL),[80] a header only library of types and functions to implement the Core Guidelines and static checker tools for enforcing Guideline rules.[81] Compatibility[edit] To give compiler vendors greater freedom, the C++ standards committee decided not to dictate the implementation of name mangling, exception handling, and other implementation-specific features. The downside of this decision is that object code produced by different compilers is expected to be incompatible. There were, however, attempts to standardize compilers for particular machines or operating systems (for example C++ ABI),[82] though they seem to be largely abandoned now. With C[edit] Further information: Compatibility of C and C++ C++ is often considered to be a superset of C but this is not strictly true.[83] Most C code can easily be made to compile correctly in C++ but there are a few differences that cause some valid C code to be invalid or behave differently in C++. For example, C allows implicit conversion from void* to other pointer types but C++ does not (for type safety reasons). Also, C++ defines many new keywords, such as new and class, which may be used as identifiers (for example, variable names) in a C program. Some incompatibilities have been removed by the 1999 revision of the C standard (C99), which now supports C++ features such as line comments (//) and declarations mixed with code. On the other hand, C99 introduced a number of new features that C++ did not support that were incompatible or redundant in C++, such as variable-length arrays, native complex-number types (however, the std::complex class in the C++ standard library provides similar functionality, although not code-compatible), designated initializers, compound literals, and the restrict keyword.[84] Some of the C99-introduced features were included in the subsequent version of the C++ standard, C++11 (out of those which were not redundant).[85][86][87] However, the C++11 standard introduces new incompatibilities, such as disallowing assignment of a string literal to a character pointer, which remains valid C. To intermix C and C++ code, any function declaration or definition that is to be called from/used both in C and C++ must be declared with C linkage by placing it within an extern "C" {/*...*/} block. Such a function may not rely on features depending on name mangling (i.e., function overloading). Criticism[edit] Main article: Criticism of C++ Despite its widespread adoption, some notable programmers have criticized the C++ language, including Linus Torvalds,[88] Richard Stallman,[89] Joshua Bloch, Ken Thompson,[90][91][92] and Donald Knuth.[93][94] One of the most often criticised points of C++ is its perceived complexity as a language, with the criticism that a large number of non-orthogonal features in practice necessitates restricting code to subset of C++, thus eschewing the readability benefits of common style and idioms. As expressed by Joshua Bloch: I think C++ was pushed well beyond its complexity threshold, and yet there are a lot of people programming it. But what you do is you force people to subset it. So almost every shop that I know of that uses C++ says, “Yes, we’re using C++ but we’re not doing multiple-implementation inheritance and we’re not using operator overloading.” There are just a bunch of features that you’re not going to use because the complexity of the resulting code is too high. And I don’t think it’s good when you have to start doing that. You lose this programmer portability where everyone can read everyone else’s code, which I think is such a good thing. Donald Knuth (1993, commenting on pre-standardized C++), who said of Edsger Dijkstra that "to think of programming in C++" "would make him physically ill":[93][94] The problem that I have with them today is that... C++ is too complicated. At the moment, it's impossible for me to write portable code that I believe would work on lots of different systems, unless I avoid all exotic features. Whenever the C++ language designers had two competing ideas as to how they should solve some problem, they said "OK, we'll do them both". So the language is too baroque for my taste. Ken Thompson, who was a colleague of Stroustrup at Bell Labs, gives his assessment:[91][92] It certainly has its good points. But by and large I think it’s a bad language. It does a lot of things half well and it’s just a garbage heap of ideas that are mutually exclusive. Everybody I know, whether it’s personal or corporate, selects a subset and these subsets are different. So it’s not a good language to transport an algorithm—to say, “I wrote it; here, take it.” It’s way too big, way too complex. And it’s obviously built by a committee. Stroustrup campaigned for years and years and years, way beyond any sort of technical contributions he made to the language, to get it adopted and used. And he sort of ran all the standards committees with a whip and a chair. And he said “no” to no one. He put every feature in that language that ever existed. It wasn’t cleanly designed—it was just the union of everything that came along. And I think it suffered drastically from that. However Brian Kernighan, also a colleague at Bell Labs, disputes this assessment:[95] C++ has been enormously influential. ... Lots of people say C++ is too big and too complicated etc. etc. but in fact it is a very powerful language and pretty much everything that is in there is there for a really sound reason: it is not somebody doing random invention, it is actually people trying to solve real world problems. Now a lot of the programs that we take for granted today, that we just use, are C++ programs. Stroustrup himself comments that C++ semantics are much cleaner than its syntax: "within C++, there is a much smaller and cleaner language struggling to get out".[96] Other complaints may include a lack of reflection or garbage collection, long compilation times, perceived feature creep,[97] and verbose error messages, particularly from template metaprogramming.[98] See also[edit] Computer programming portal Comparison of programming languages List of C++ compilers Outline of C++ Category:C++ libraries References[edit] ^ a b c d e f Bjarne Stroustrup. "A history of C++: 1979-1991". doi:10.1145/234286.1057836. Cite journal requires |journal= (help) ^ Naugler, David (May 2007). "C# 2.0 for C++ and Java programmer: conference workshop". Journal of Computing Sciences in Colleges. 22 (5). Although C# has been strongly influenced by Java it has also been strongly influenced by C++ and is best viewed as a descendant of both C++ and Java. ^ "Chapel spec (Acknowledgements)" (PDF). Cray Inc. 1 October 2015. Retrieved 14 January 2016. ^ "Rich Hickey Q&A by Michael Fogus". Archived from the original on 11 January 2017. Retrieved 11 January 2017. ^ Harry. H. Chaudhary (28 July 2014). "Cracking The Java Programming Interview :: 2000+ Java Interview Que/Ans". Retrieved 29 May 2016. ^ Roger Poon (1 May 2017). "Scaling JS++: Abstraction, Performance, and Readability". Retrieved 21 April 2020. ^ "FAQ Nim Programming Language". Retrieved 21 April 2020. ^ "9. Classes — Python 3.6.4 documentation". docs.python.org. Retrieved 9 January 2018. ^ Stroustrup, Bjarne (1997). "1". The C++ Programming Language (Third ed.). ISBN 0-201-88954-4. OCLC 59193992. ^ a b c Stroustrup, B. (6 May 2014). "Lecture:The essence of C++. University of Edinburgh". Retrieved 12 June 2015. ^ Stroustrup, Bjarne (17 February 2014). "C++ Applications". stroustrup.com. Retrieved 5 May 2014. ^ a b "ISO/IEC 14882:2017". International Organization for Standardization. ^ "Bjarne Stroustrup's Homepage". www.stroustrup.com. ^ "C++ IS schedule" (PDF). ^ "C++; Where it's heading". ^ a b Stroustrup, Bjarne (7 March 2010). "Bjarne Stroustrup's FAQ: When was C++ invented?". stroustrup.com. Retrieved 16 September 2010. ^ a b Stroustrup, Bjarne. "Evolving a language in and for the real world: C++ 1991-2006" (PDF). ^ a b c Stroustrup, Bjarne. "A History of C ++ : 1979− 1991" (PDF). ^ Stroustrup, Bjarne. "The C++ Programming Language" (First ed.). Retrieved 16 September 2010. ^ Stroustrup, Bjarne. "The C++ Programming Language" (Second ed.). Retrieved 16 September 2010. ^ a b https://herbsutter.com/2016/06/30/trip-report-summer-iso-c-standards-meeting-oulu/ "the next standard after C++17 will be C++20" ^ Dusíková, Hana (6 November 2019). "N4817: 2020 Prague Meeting Invitation and Information" (PDF). Retrieved 13 February 2020. ^ "Current Status". isocpp.org. Retrieved 7 September 2020. ^ "C++20 Approved -- Herb Sutter". isocpp.org. Retrieved 8 September 2020. ^ "Latest news." TIOBE Index | TIOBE - The Software Quality Company. N.p., n.d. Web. 5 June 2017. ^ Krill, Paul. "Java, C, C face growing competition in popularity." InfoWorld. InfoWorld, 10 February 2017. Web. 5 June 2017. ^ https://www.nae.edu/177355.aspx "Computer Science Pioneer Bjarne Stroustrup to Receive the 2018 Charles Stark Draper Prize for Engineering" ^ "Bjarne Stroustrup's FAQ – Where did the name "C++" come from?". Retrieved 16 January 2008. ^ "C For C++ Programmers". Northeastern University. Archived from the original on 17 November 2010. Retrieved 7 September 2015. ^ "ISO/IEC 14882:1998". International Organization for Standardization. ^ "ISO/IEC 14882:2003". International Organization for Standardization. ^ a b "ISO/IEC 14882:2011". International Organization for Standardization. ^ "ISO/IEC 14882:2014". International Organization for Standardization. ^ "We have an international standard: C++0x is unanimously approved". Sutter's Mill. ^ "The Future of C++". ^ "We have C++14! : Standard C++". ^ Trip report: Summer ISO C++ standards meeting (Toronto) ^ "ISO/IEC TR 18015:2006". International Organization for Standardization. ^ "ISO/IEC TR 19768:2007". International Organization for Standardization. ^ "ISO/IEC TR 29124:2010". International Organization for Standardization. ^ "ISO/IEC TR 24733:2011". International Organization for Standardization. ^ "ISO/IEC TS 18822:2015". International Organization for Standardization. ^ "ISO/IEC TS 19570:2015". International Organization for Standardization. ^ "ISO/IEC TS 19841:2015". International Organization for Standardization. ^ "ISO/IEC TS 19568:2015". International Organization for Standardization. ^ "ISO/IEC TS 19217:2015". International Organization for Standardization. ^ "ISO/IEC TS 19571:2016". International Organization for Standardization. ^ "ISO/IEC TS 19568:2017". International Organization for Standardization. ^ "ISO/IEC TS 21425:2017". International Organization for Standardization. ^ "ISO/IEC TS 22277:2017". International Organization for Standardization. ^ "ISO/IEC TS 19216:2018". International Organization for Standardization. ^ "ISO/IEC TS 21544:2018". International Organization for Standardization. ^ "ISO/IEC TS 19570:2018". International Organization for Standardization. ^ See a list at https://en.cppreference.com/w/cpp/experimental visited 15 February 2019. ^ B. Stroustrup (interviewed by Sergio De Simone) (30 April 2015). "Stroustrup: Thoughts on C++17 - An Interview". Retrieved 8 July 2015. ^ Stroustrup, Bjarne (2000). The C++ Programming Language (Special ed.). Addison-Wesley. p. 46. ISBN 0-201-70073-5. ^ Stroustrup, Bjarne. "Open issues for The C++ Programming Language (3rd Edition)". This code is copied directly from Bjarne Stroustrup's errata page (p. 633). He addresses the use of '\n' rather than std::endl. Also see Can I write "void main()"? for an explanation of the implicit return 0; in the main function. This implicit return is not available in other functions. ^ ISO/IEC. Programming Languages – C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine §3.7 Storage duration [basic.stc] ^ ISO/IEC. Programming Languages – C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine §3.7.1 Static Storage duration [basic.stc.static] ^ ISO/IEC. Programming Languages – C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine §3.7.2 Thread Storage duration [basic.stc.thread] ^ ISO/IEC. Programming Languages – C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine §3.7.3 Automatic Storage duration [basic.stc.auto] ^ ISO/IEC. Programming Languages – C++11 Draft (n3797) Archived 2 October 2018 at the Wayback Machine §3.7.4 Dynamic Storage duration [basic.stc.dynamic] ^ "C++ Core Guidelines". isocpp.github.io. Retrieved 9 February 2020. ^ a b "Nobody Understands C++: Part 5: Template Code Bloat". articles.emptycrate.com/: EmptyCrate Software. Travel. Stuff. 6 May 2008. Retrieved 8 March 2010. On occasion you will read or hear someone talking about C++ templates causing code bloat. I was thinking about it the other day and thought to myself, "self, if the code does exactly the same thing then the compiled code cannot really be any bigger, can it?" [...] And what about compiled code size? Each were compiled with the command g++ <filename>.cpp -O3. Non-template version: 8140 bytes, template version: 8028 bytes! ^ Sutter, Herb; Alexandrescu, Andrei (2004). C++ Coding Standards: 101 Rules, Guidelines, and Best Practices. Addison-Wesley. ^ Henricson, Mats; Nyquist, Erik (1997). Industrial Strength C++. Prentice Hall. ISBN 0-13-120965-5. ^ Stroustrup, Bjarne (2000). The C++ Programming Language (Special ed.). Addison-Wesley. p. 310. ISBN 0-201-70073-5. A virtual member function is sometimes called a method. ^ Mycroft, Alan (2013). "C and C++ Exceptions | Templates" (PDF). Cambridge Computer Laboratory - Course Materials 2013-14. Retrieved 30 August 2016. ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. p. 345. ISBN 9780321563842. ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 363–365. ISBN 9780321563842. ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 345, 363. ISBN 9780321563842. ^ "Google C++ Style Guide". Retrieved 25 June 2019. ^ "LLVM Coding Standards". LLVM 9 documentation. Retrieved 25 June 2019. ^ "Coding Conventions". Qt Wiki. Retrieved 26 June 2019. ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. pp. 344, 370. ISBN 9780321563842. ^ Stroustrup, Bjarne (2013). The C++ Programming Language. Addison Wesley. p. 349. ISBN 9780321563842. ^ Graziano Lo Russo (2008). "An Interview with A. Stepanov". stlport.org. Retrieved 8 October 2015. ^ "C++ Core Guidelines". ^ "Bjarne Stroustrup announces C++ Core Guidelines". ^ "Guidelines Support Library". ^ "Use the C++ Core Guidelines checkers". ^ "C++ ABI Summary". 20 March 2001. Retrieved 30 May 2006. ^ "Bjarne Stroustrup's FAQ – Is C a subset of C++?". Retrieved 5 May 2014. ^ "C9X – The New C Standard". Retrieved 27 December 2008. ^ "C++0x Support in GCC". Retrieved 12 October 2010. ^ "C++0x Core Language Features In VC10: The Table". Retrieved 12 October 2010. ^ "Clang - C++98, C++11, and C++14 Status". Clang.llvm.org. 12 May 2013. Retrieved 10 June 2013. ^ "Re: [RFC] Convert builin-mailinfo.c to use The Better String Library" (Mailing list). 6 September 2007. Retrieved 31 March 2015. ^ "Re: Efforts to attract more users?" (Mailing list). 12 July 2010. Retrieved 31 March 2015. ^ Andrew Binstock (18 May 2011). "Dr. Dobb's: Interview with Ken Thompson". Retrieved 7 February 2014. ^ a b Peter Seibel (16 September 2009). Coders at Work: Reflections on the Craft of Programming. Apress. pp. 475–476. ISBN 978-1-4302-1948-4. ^ a b https://gigamonkeys.wordpress.com/2009/10/16/coders-c-plus-plus/ ^ a b https://www.drdobbs.com/architecture-and-design/an-interview-with-donald-knuth/228700500 ^ a b http://tex.loria.fr/litte/knuth-interview ^ Brian Kernighan (18 July 2018). Brian Kernighan Q&A - Computerphile. ^ http://www.stroustrup.com/bs_faq.html#really-say-that ^ Pike, Rob (2012). "Less is exponentially more". ^ Kreinin, Yossi (13 October 2009). "Defective C++". Retrieved 3 February 2016. Further reading[edit] Abrahams, David; Gurtovoy, Aleksey (2005). C++ Template Metaprogramming: Concepts, Tools, and Techniques from Boost and Beyond. Addison-Wesley. ISBN 0-321-22725-5. Alexandrescu, Andrei (2001). Modern C++ Design: Generic Programming and Design Patterns Applied. Addison-Wesley. ISBN 0-201-70431-5. Alexandrescu, Andrei; Sutter, Herb (2004). C++ Design and Coding Standards: Rules and Guidelines for Writing Programs. Addison-Wesley. ISBN 0-321-11358-6. Becker, Pete (2006). The C++ Standard Library Extensions : A Tutorial and Reference. Addison-Wesley. ISBN 0-321-41299-0. Brokken, Frank (2010). C++ Annotations. University of Groningen. ISBN 978-90-367-0470-0. Coplien, James O. (1994) [reprinted with corrections, original year of publication 1992]. Advanced C++: Programming Styles and Idioms. ISBN 0-201-54855-0. Dewhurst, Stephen C. (2005). C++ Common Knowledge: Essential Intermediate Programming. Addison-Wesley. ISBN 0-321-32192-8. Information Technology Industry Council (15 October 2003). Programming languages – C++ (Second ed.). Geneva: ISO/IEC. 14882:2003(E). Josuttis, Nicolai M. (2012). The C++ Standard Library, A Tutorial and Reference (Second ed.). Addison-Wesley. ISBN 978-0-321-62321-8. Koenig, Andrew; Moo, Barbara E. (2000). Accelerated C++ – Practical Programming by Example. Addison-Wesley. ISBN 0-201-70353-X. Lippman, Stanley B.; Lajoie, Josée; Moo, Barbara E. (2011). C++ Primer (Fifth ed.). Addison-Wesley. ISBN 978-0-321-71411-4. Lippman, Stanley B. (1996). Inside the C++ Object Model. Addison-Wesley. ISBN 0-201-83454-5. Meyers, Scott (2005). Effective C++ (Third ed.). Addison-Wesley. ISBN 0-321-33487-6. Stroustrup, Bjarne (2013). The C++ Programming Language (Fourth ed.). Addison-Wesley. ISBN 978-0-321-56384-2. Stroustrup, Bjarne (1994). The Design and Evolution of C++. Addison-Wesley. ISBN 0-201-54330-3. Stroustrup, Bjarne (2014). Programming: Principles and Practice Using C++ (Second ed.). Addison-Wesley. ISBN 978-0-321-99278-9. Sutter, Herb (2001). More Exceptional C++: 40 New Engineering Puzzles, Programming Problems, and Solutions. Addison-Wesley. ISBN 0-201-70434-X. Sutter, Herb (2004). Exceptional C++ Style. Addison-Wesley. ISBN 0-201-76042-8. Vandevoorde, David; Josuttis, Nicolai M. (2003). C++ Templates: The complete Guide. Addison-Wesley. ISBN 0-201-73484-2. External links[edit] C++at Wikipedia's sister projects Definitions from Wiktionary Media from Wikimedia Commons Quotations from Wikiquote Textbooks from Wikibooks Resources from Wikiversity JTC1/SC22/WG21 – the ISO/IEC C++ Standard Working Group Standard C++ Foundation – a non-profit organization that promotes the use and understanding of standard C++. Bjarne Stroustrup is a director of the organization. v t e ISO standards by standard number List of ISO standards / ISO romanizations / IEC standards 1–9999 1 2 3 4 5 6 7 9 16 17 31 -0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 128 216 217 226 228 233 259 269 302 306 361 428 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10005 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10303 -11 -21 -22 -28 -238 10383 10487 10585 10589 10646 10664 10746 10861 10957 10962 10967 11073 11170 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 (-2) 11941 11941 (TR) 11992 12006 12182 12207 12234-2 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14644 14649 14651 14698 14750 14764 14882 14971 15022 15189 15288 15291 15292 15398 15408 15444 -3 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 16023 16262 16355-1 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17799 18000 18004 18014 18245 18629 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000+ 20000 20022 20121 20400 21000 21047 21500 21827 22000 22300 22395 23270 23271 23360 24517 24613 24617 24707 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30170 31000 32000 37001 38500 40500 42010 45001 50001 55000 80000 -1 Category v t e Programming languages Comparison Timeline History ALGOL APL Assembly BASIC C C++ C# COBOL Go Erlang Forth Fortran Haskell Java JavaScript Kotlin Lisp ML Objective-C Pascal Perl PHP Prolog Python R Ruby Rust SQL Shell Simula Smalltalk Swift more... Category Lists: Alphabetical Categorical Generational Non-English-based v t e C++ C++ C++98 C++03 C++11 C++14 C++17 C++20 C++23 Features Classes Exception handling Function overloading new and delete Operator overloading Operators Templates Standard Library I/O Streams Smart pointers STL Strings Compilers Comparison of C++ compilers Borland C++ Borland Turbo C++ C++Builder Clang GCC Intel C++ Compiler Oracle Solaris Studio Visual C++ Watcom C/C++ IDEs Comparison of C IDEs Anjuta CLion Code::Blocks CodeLite DevC++ Eclipse Geany Microsoft Visual Studio NetBeans KDevelop Qt Creator Superset languages Objective-C++ C++/CLI C++/CX C++/WinRT Ch SYCL Dialects Embedded C++ Relative to other languages Compatibility of C and C++ Comparison of Java and C++ Comparison of ALGOL 68 and C++ Comparison of programming languages Category v t e List of International Electrotechnical Commission standards IEC standards IEC 60027 IEC 60034 IEC 60038 IEC 60062 IEC 60063 IEC 60068 IEC 60112 IEC 60228 IEC 60269 IEC 60297 IEC 60309 IEC 60320 IEC 60364 IEC 60446 IEC 60559 IEC 60601 IEC 60870 IEC 60870-5 IEC 60870-6 IEC 60906-1 IEC 60908 IEC 60929 IEC 60958 AES3 S/PDIF IEC 61030 IEC 61131 IEC 61131-3 IEC 61131-9 IEC 61158 IEC 61162 IEC 61334 IEC 61346 IEC 61355 IEC 61360 IEC 61400 IEC 61499 IEC 61508 IEC 61511 IEC 61784 IEC 61850 IEC 61851 IEC 61883 IEC 61960 IEC 61968 IEC 61970 IEC 62014-4 IEC 62026 IEC 62056 IEC 62061 IEC 62196 IEC 62262 IEC 62264 IEC 62304 IEC 62325 IEC 62351 IEC 62365 IEC 62366 IEC 62379 IEC 62386 IEC 62455 IEC 62680 IEC 62682 IEC 62700 IEC 63110 IEC 63119 ISO/IEC standards ISO/IEC 646 ISO/IEC 2022 ISO/IEC 4909 ISO/IEC 5218 ISO/IEC 6429 ISO/IEC 6523 ISO/IEC 7810 ISO/IEC 7811 ISO/IEC 7812 ISO/IEC 7813 ISO/IEC 7816 ISO/IEC 7942 ISO/IEC 8613 ISO/IEC 8632 ISO/IEC 8652 ISO/IEC 8859 ISO/IEC 9126 ISO/IEC 9293 ISO/IEC 9592 ISO/IEC 9593 ISO/IEC 9899 ISO/IEC 9945 ISO/IEC 9995 ISO/IEC 10021 ISO/IEC 10116 ISO/IEC 10165 ISO/IEC 10179 ISO/IEC 10646 ISO/IEC 10967 ISO/IEC 11172 ISO/IEC 11179 ISO/IEC 11404 ISO/IEC 11544 ISO/IEC 11801 ISO/IEC 12207 ISO/IEC 13250 ISO/IEC 13346 ISO/IEC 13522-5 ISO/IEC 13568 ISO/IEC 13818 ISO/IEC 14443 ISO/IEC 14496 ISO/IEC 14882 ISO/IEC 15288 ISO/IEC 15291 ISO/IEC 15408 ISO/IEC 15444 ISO/IEC 15445 ISO/IEC 15504 ISO/IEC 15511 ISO/IEC 15693 ISO/IEC 15897 ISO/IEC 15938 ISO/IEC 16262 ISO/IEC 17024 ISO/IEC 17025 ISO/IEC 18000 ISO/IEC 18004 ISO/IEC 18014 ISO/IEC 19752 ISO/IEC 19757 ISO/IEC 19770 ISO/IEC 19788 ISO/IEC 20000 ISO/IEC 21000 ISO/IEC 21827 ISO/IEC 23000 ISO/IEC 23003 ISO/IEC 23008 ISO/IEC 23270 ISO/IEC 23360 ISO/IEC 24707 ISO/IEC 24727 ISO/IEC 24744 ISO/IEC 24752 ISO/IEC 26300 ISO/IEC 27000 ISO/IEC 27000-series ISO/IEC 27002 ISO/IEC 27040 ISO/IEC 29119 ISO/IEC 33001 ISO/IEC 38500 ISO/IEC 42010 ISO/IEC 80000 Related International Electrotechnical Commission Authority control BNE: XX540250 BNF: cb12139768z (data) GND: 4193909-8 LCCN: sh87007505 SUDOC: 029859778 Retrieved from "https://en.wikipedia.org/w/index.php?title=C%2B%2B&oldid=992578207" Categories: C++ Algol programming language family C++ programming language family Class-based programming languages Cross-platform software High-level programming languages Object-oriented programming languages Programming languages created in 1983 Programming languages with an ISO standard Statically typed programming languages Hidden categories: CS1 errors: missing periodical Webarchive template wayback links Articles with short description Short description is different from Wikidata Wikipedia pages move-protected due to vandalism Use dmy dates from January 2020 Wikipedia articles scheduled for update tagging Articles containing potentially dated statements from 2019 All articles containing potentially dated statements Articles with example C code Wikipedia articles with BNE identifiers Wikipedia articles with BNF identifiers Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers Wikipedia articles with SUDOC identifiers Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikibooks Wikiquote Wikiversity Languages Afrikaans العربية Aragonés অসমীয়া Asturianu Azərbaycanca تۆرکجه বাংলা Bân-lâm-gú Беларуская Беларуская (тарашкевіца)‎ Български བོད་ཡིག Bosanski Brezhoneg Català Чӑвашла Čeština Dansk Deutsch Eesti Ελληνικά Español Esperanto Euskara فارسی Français Gaeilge Galego 贛語 ગુજરાતી 한국어 Հայերեն हिन्दी Hrvatski Bahasa Indonesia Interlingua Íslenska Italiano עברית Jawa ಕನ್ನಡ ქართული Қазақша Kiswahili Кыргызча Latina Latviešu Lëtzebuergesch Lietuvių Lumbaart Magyar Македонски മലയാളം मराठी مصرى Bahasa Melayu Minangkabau Монгол မြန်မာဘာသာ Na Vosa Vakaviti Nederlands नेपाल भाषा 日本語 Norsk bokmål Norsk nynorsk Occitan Oʻzbekcha/ўзбекча ਪੰਜਾਬੀ Pälzisch پنجابی Polski Português Qaraqalpaqsha Română Русский Саха тыла Shqip සිංහල Simple English Slovenčina Slovenščina Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska தமிழ் Татарча/tatarça తెలుగు ไทย Тоҷикӣ Türkçe Türkmençe ᨅᨔ ᨕᨘᨁᨗ Українська اردو Tiếng Việt Winaray 吴语 ייִדיש Yorùbá 粵語 Žemaitėška 中文 Edit links This page was last edited on 6 December 2020, at 00:47 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement