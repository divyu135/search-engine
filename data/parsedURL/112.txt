AutoLISP - Wikipedia AutoLISP From Wikipedia, the free encyclopedia Jump to navigation Jump to search AutoLISP Family Lisp Designed by David Betz Developers Autodesk, Basis Software First appeared January 1986; 34 years ago (1986-01) Stable release 13 / February 1995; 25 years ago (1995-02) Platform IA-32 OS Linux Dialects Vital-LISP, Visual LISP Influenced by Lisp, XLISP AutoLISP is a dialect of the programming language Lisp built specifically for use with the full version of AutoCAD and its derivatives, which include AutoCAD Map 3D, AutoCAD Architecture and AutoCAD Mechanical.[1] Neither the application programming interface (API) nor the interpreter to execute AutoLISP code are included in the AutoCAD LT product line.[2] Contents 1 Features 2 History 3 Examples 4 References 5 External links Features[edit] AutoLISP is a small, dynamically scoped, dynamically typed Lisp language dialect with garbage collection, immutable list structure, and settable symbols, lacking in such regular Lisp features as macro system, records definition facilities, arrays, functions with variable number of arguments or let bindings. Aside from the core language, most of the primitive functions are for geometry, accessing AutoCAD's internal DWG database, or manipulation of graphical entities in AutoCAD. The properties of these graphical entities are revealed to AutoLISP as association lists in which values are paired with AutoCAD group codes that indicate properties such as definitional points, radii, colors, layers, linetypes, etc. AutoCAD loads AutoLISP code from .LSP files.[3] AutoLISP code can interact with the user through AutoCAD's graphical editor by use of primitive functions that allow the user to pick points, choose objects on screen, and input numbers and other data. AutoLisp also has a built-in graphical user interface (GUI) mini- or domain-specific language (DSL), the Dialog Control Language, for creating modal dialog boxes with automated layout, within AutoCAD.[3] History[edit] AutoLISP was derived from an early version of XLISP, which was created by David Betz.[4] The language was introduced in AutoCAD Version 2.18 in January 1986, and continued to be enhanced in successive releases up to release 13 in February 1995. After that, its development was neglected by Autodesk in favor of more fashionable development environments like Visual Basic for Applications (VBA), .NET Framework, and ObjectARX. However, it has remained AutoCAD's main user customizing language. Vital-LISP, a considerably enhanced version of AutoLISP including an integrated development environment (IDE), debugger, compiler, and ActiveX support, was developed and sold by third party developer Basis Software. Vital LISP was a superset of the existing AutoLISP language that added VBA-like access to the AutoCAD object model, reactors (event handling for AutoCAD objects), general ActiveX support, and some other general Lisp functions. Autodesk purchased this, renamed it Visual LISP, and briefly sold it as an add-on to AutoCAD release 14 released in May 1997. It was incorporated into AutoCAD 2000 released in March 1999, as a replacement for AutoLISP. Since then, Autodesk has ceased major enhancements to Visual LISP and focused more effort on VBA and .NET, and C++. As of January 31, 2014[update], Autodesk no longer supports VBA versions older than 7.1. This is part of a long-term process of changing from VBA to .NET for user customizing.[5][6] AutoLISP has such a strong following that other computer-aided design (CAD) application vendors add it to their products. Bricscad, IntelliCAD, DraftSight and others have AutoLISP functionality, so that AutoLISP users can consider using them as an alternative to AutoCAD. Most development involving AutoLISP since AutoCAD 2000 is performed within Visual LISP since the original AutoLISP engine was replaced with the Visual LISP engine. There are thousands of utilities and applications that have been developed using AutoLISP or Visual LISP (distributed as LSP, FAS and VLX files).[7][8] Timeline of Lisp dialects(edit) 1955 1960 1965 1970 1975 1980 1985 1990 1995 2000 2005 2010 2015 2020 LISP 1, 1.5, LISP 2(abandoned) Maclisp Interlisp Lisp Machine Lisp Scheme R5RS R6RS R7RS small NIL Franz Lisp Common Lisp Le Lisp T Chez Scheme Emacs Lisp AutoLISP PicoLisp EuLisp ISLISP OpenLisp PLT Scheme Racket GNU Guile Visual LISP Clojure Arc LFE Hy Examples[edit] A simple Hello world program in AutoLISP would be: 1 (defun hello ( )2     (princ "\nHello World!")3     (princ)4 ) Note the final line inside the function definition: when evaluated with no arguments, the princ function returns a null symbol, which is not displayed by the AutoCAD command-line interface. As the AutoCAD command line functions as a read–eval–print loop (REPL), this would normally print "Hello World!" to the command line, followed immediately by the return value of the call to princ. Therefore, without the final call to the princ function, the result of this would be: Hello World!"\nHello World!" The prin1 function may also be used to achieve the same result. A more complex example might be:  1 (defun c:pointlabel ( / pnt ) 2     (if (setq pnt (getpoint "\nSpecify point: ")) 3         (progn 4             (entmake 5                 (list 6                    '(0 . "POINT") 7                     (cons 10 (trans pnt 1 0)) 8                 ) 9             )10             (entmake11                 (list12                    '(0 . "TEXT")13                     (cons 10 (trans (cons (+ (car pnt) 0.6) (cdr pnt)) 1 0))14                     (cons 40 (getvar 'textsize))15                     (cons  1 (strcat "X:" (rtos (car pnt)) " Y:" (rtos (cadr pnt))))16                 )17             )18         )19     )20     (princ)21 ) The above code defines a new function which generates an AutoCAD point object at a given point, with a one-line text object displaying the X and Y coordinates beside it. The name of the function includes a special prefix 'c:', which causes AutoCAD to recognize the function as a regular command. The user, upon typing 'pointlabel' at the AutoCAD command line, would be prompted to pick a point, either by typing the X and Y coordinates, or clicking a location in the drawing. The function would then place a marker at that point, and create a one-line text object next to it, containing the X and Y coordinates of the point expressed relative to the active User Coordinate System (UCS). The function requires no parameters, and contains one local variable ('pnt'). The above example could also be written using built-in AutoCAD commands to achieve the same result, however this approach is susceptible to changes to the command prompts between AutoCAD releases. References[edit] ^ "AutoLISP". Retrieved 14 April 2014. ^ "AutoCAD LT vs. AutoCAD". Archived from the original on 15 April 2014. Retrieved 14 April 2014. ^ a b "AutoLISP Developer's Guide" (PDF). Retrieved 14 April 2014. ^ "History of AutoLISP". ^ "Microsoft Visual Basic for Applications Module FAQ". Retrieved 14 April 2014. ^ "VBA support in AutoCAD 2011". Archived from the original on 15 April 2014. Retrieved 14 April 2014. ^ "BricsCAD Compare versions". Archived from the original on 2014-03-15. Retrieved 14 April 2014. ^ "IntelliCAD CAD Platform – Features and Benefits". Retrieved 14 April 2014. External links[edit] AutoLISP FAQ v t e Autodesk AutoCAD File formats DXF DWF DWFX DWG Related topics AutoLISP List of CAx companies Comparison of CAD editors for AEC v t e Lisp programming language Features Automatic storage management Conditionals Dynamic typing Higher-order functions Linked lists M-expressions (deprecated) Read–eval–print loop Recursion S-expressions Self-hosting compiler Tree data structures Object systems Common Lisp Object System (CLOS) CommonLoops Flavors Implementations Technical standard(s) exists Common Lisp Allegro Common Lisp Armed Bear Common Lisp (ABCL) CLISP Clozure CL CMU Common Lisp (CMUCL) Corman Common Lisp Embeddable Common Lisp (ECL) GNU Common Lisp (GCL) LispWorks Macintosh Common Lisp Mocl Movitz Poplog Steel Bank Common Lisp (SBCL) Symbolics Common Lisp Scheme History Bigloo Chez Scheme Chicken Gambit Game Oriented Assembly Lisp (GOAL) Ikarus JScheme Kawa Larceny MIT/GNU Scheme MultiLisp Pocket Scheme Racket RScheme Scheme 48 SCM SIOD T TinyScheme ISLISP OpenLisp Nonstandard Logo MSWLogo NetLogo StarLogo UCBLogo Arc AutoLISP BBN LISP Clojure Dylan (Apple, history) Emacs Lisp EuLisp Franz Lisp, PC-LISP Hy Interlisp Knowledge Engineering Environment *Lisp LeLisp LFE Lisp Machine Lisp Maclisp MDL MLisp newLISP NIL PC-LISP Picolisp Portable Standard Lisp RPL S-1 Lisp SKILL Spice Lisp Zetalisp Operating system Common Lisp Interface Manager, McCLIM Genera Scsh Hardware Lisp machines TI Explorer Space-cadet keyboard Community of practice Technical standards Scheme Requests for Implementation Common Lisp HyperSpec X3J13 Education Books Common Lisp the Language How to Design Programs (HTDP) On Lisp Practical Common Lisp Structure and Interpretation of Computer Programs (SICP) Curriculum ProgramByDesign Organizations Business Apple Computer Bolt, Beranek and Newman Harlequin Lucid Inc. Symbolics Xanalys Education Massachusetts Institute of Technology (MIT) MIT Computer Science and Artificial Intelligence Laboratory (CSAIL) Stanford Artificial Intelligence Laboratory University of California, Berkeley People Edmund Berkeley Daniel G. Bobrow William Clinger R. Kent Dybvig Matthias Felleisen Robert Bruce Findler Matthew Flatt Phyllis Fox Paul Graham Richard Greenblatt Timothy P. Hart Louis Hodes Mike Levin David Luckham John McCarthy Robert Tappan Morris Joel Moses David Park Steve Russell Richard Stallman Common Lisp Scott Fahlman Richard P. Gabriel Philip Greenspun (10th rule) David A. Moon Kent Pitman Guy L. Steele Jr. Daniel Weinreb Scheme Shriram Krishnamurthi Guy L. Steele Jr. Gerald Jay Sussman Julie Sussman Logo Hal Abelson Denison Bollay Wally Feurzeig Brian Harvey Seymour Papert Mitchel Resnick Cynthia Solomon Category Category List Retrieved from "https://en.wikipedia.org/w/index.php?title=AutoLISP&oldid=975826072" Categories: AutoCAD Lisp programming language family Computer-aided design software Scripting languages Hidden categories: Articles containing potentially dated statements from January 2014 All articles containing potentially dated statements Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages العربية Deutsch Español Italiano עברית Lietuvių Magyar Bahasa Melayu Nederlands Polski Português Svenska Türkçe Українська 中文 Edit links This page was last edited on 30 August 2020, at 16:42 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement