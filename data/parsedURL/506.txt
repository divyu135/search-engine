Read-only memory - Wikipedia Read-only memory From Wikipedia, the free encyclopedia (Redirected from Read only memory) Jump to navigation Jump to search The concept of read-only data can also refer to file system permissions. For the British book publisher, see Read-Only Memory (publisher). For other uses, see ROM (disambiguation). an EPROM Electronic memory that cannot be changed. Computer memory types General Memory cell Memory hierarchy MOS memory floating-gate Storage Volatile RAM DRAM SDRAM DDR GDDR HBM SRAM Historical Williams–Kilburn tube (1946–47) Delay line memory (1947) Mellon optical memory (1951) Selectron tube (1952) Dekatron T-RAM (2009) Z-RAM (2002–2010) Non-volatile ROM MROM PROM EPROM EEPROM Flash memory NVRAM PCM (3D XPoint) MRAM Early stage NVRAM FeRAM ReRAM FeFET memory Magnetic Magnetic tape data storage (Linear Tape-Open) Hard disk drive Optical Optical disc CD DVD Blu-ray In development CBRAM Racetrack memory NRAM Millipede memory ECRAM Historical Paper data storage (1725) Drum memory (1932) Magnetic-core memory (1949) Plated wire memory (1957) Core rope memory (1960s) Thin-film memory (1962) Disk pack (1962) Twistor memory (~1968) Bubble memory (~1970) Floppy disk (1971) v t e Read-only memory (ROM) is a type of non-volatile memory used in computers and other electronic devices. Data stored in ROM cannot be electronically modified after the manufacture of the memory device. Read-only memory is useful for storing software that is rarely changed during the life of the system, also known as firmware. Software applications (like video games) for programmable devices can be distributed as plug-in cartridges containing ROM. Strictly, read-only memory refers to memory that is hard-wired, such as diode matrix or a mask ROM integrated circuit (IC), which cannot be electronically[a] changed after manufacture. Although discrete circuits can be altered in principle, through the addition of bodge wires and/or the removal or replacement of components, ICs cannot. Correction of errors, or updates to the software, require new devices to be manufactured and to replace the installed device. Floating-gate ROM semiconductor memory in the form of erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM) and flash memory can be erased and re-programmed. But usually, this can only be done at relatively slow speeds, may require special equipment to achieve, and is typically only possible a certain number of times.[1] The term "ROM" is sometimes used to mean a ROM device containing specific software, or a file with software to be stored in EEPROM or Flash Memory. For example, users modifying or replacing the Android operating system describe files containing a modified or replacement operating system as "custom ROMs" after the type of storage the file used to be written to. Contents 1 History 1.1 Discrete-component ROM 1.2 Solid-state ROM 1.3 Use for storing programs 1.4 Use for storing data 2 Types 2.1 Factory programmed 2.2 Field programmable 2.3 Other technologies 3 Speed 3.1 Writing 4 Endurance and data retention 5 Content images 6 Timeline 7 See also 8 Notes 9 References History[edit] Discrete-component ROM[edit] IBM used capacitor read-only storage (CROS) and transformer read-only storage (TROS) to store microcode for the smaller System/360 models, the 360/85, and the initial two System/370 models (370/155 and 370/165). On some models there was also a writeable control store (WCS) for additional diagnostics and emulation support. The Apollo Guidance Computer used core rope memory, programmed by threading wires through magnetic cores. Solid-state ROM[edit] See also: Semiconductor memory Many game consoles use interchangeable ROM cartridges, allowing for one system to play multiple games. The simplest type of solid-state ROM is as old as the semiconductor technology itself. Combinational logic gates can be joined manually to map n-bit address input onto arbitrary values of m-bit data output (a look-up table). With the invention of the integrated circuit came mask ROM. Mask ROM consists of a grid of word lines (the address input) and bit lines (the data output), selectively joined together with transistor switches, and can represent an arbitrary look-up table with a regular physical layout and predictable propagation delay. In mask ROM, the data is physically encoded in the circuit, so it can only be programmed during fabrication. This leads to a number of serious disadvantages: It is only economical to buy mask ROM in large quantities, since users must contract with a foundry to produce a custom design. The turnaround time between completing the design for a mask ROM and receiving the finished product is long, for the same reason. Mask ROM is impractical for R&D work since designers frequently need to modify the contents of memory as they refine a design. If a product is shipped with faulty mask ROM, the only way to fix it is to recall the product and physically replace the ROM in every unit shipped. Subsequent developments have addressed these shortcomings. Programmable read-only memory (PROM), invented by Wen Tsing Chow in 1956,[2][3] allowed users to program its contents exactly once by physically altering its structure with the application of high-voltage pulses. This addressed problems 1 and 2 above, since a company can simply order a large batch of fresh PROM chips and program them with the desired contents at its designers' convenience. The advent of the metal–oxide–semiconductor field-effect transistor (MOSFET), invented at Bell Labs in 1959,[4] enabled the practical use of metal–oxide–semiconductor (MOS) transistors as memory cell storage elements in semiconductor memory, a function previously served by magnetic cores in computer memory.[5] In 1967, Dawon Kahng and Simon Sze of Bell Labs proposed that the floating gate of a MOS semiconductor device could be used for the cell of a reprogrammable ROM, which led to Dov Frohman of Intel inventing erasable programmable read-only memory (EPROM) in 1971.[6] The 1971 invention of EPROM essentially solved problem 3, since EPROM (unlike PROM) can be repeatedly reset to its unprogrammed state by exposure to strong ultraviolet light. Electrically erasable programmable read-only memory (EEPROM), developed by Yasuo Tarui, Yutaka Hayashi and Kiyoko Naga at the Electrotechnical Laboratory in 1972,[7] went a long way to solving problem 4, since an EEPROM can be programmed in-place if the containing device provides a means to receive the program contents from an external source (for example, a personal computer via a serial cable). Flash memory, invented by Fujio Masuoka at Toshiba in the early 1980s and commercialized in the late 1980s, is a form of EEPROM that makes very efficient use of chip area and can be erased and reprogrammed thousands of times without damage. It permits erasure and programming of only a specific part of the device, instead of the entire device. This can be done at high speed, hence the name "flash".[8][9] All of these technologies improved the flexibility of ROM, but at a significant cost-per-chip, so that in large quantities mask ROM would remain an economical choice for many years. (Decreasing cost of reprogrammable devices had almost eliminated the market for mask ROM by the year 2000.) Rewriteable technologies were envisioned as replacements for mask ROM. The most recent development is NAND flash, also invented at Toshiba. Its designers explicitly broke from past practice, stating plainly that "the aim of NAND flash is to replace hard disks,"[10] rather than the traditional use of ROM as a form of non-volatile primary storage. As of 2007[update], NAND has partially achieved this goal by offering throughput comparable to hard disks, higher tolerance of physical shock, extreme miniaturization (in the form of USB flash drives and tiny microSD memory cards, for example), and much lower power consumption. Use for storing programs[edit] Every stored-program computer may use a form of non-volatile storage (that is, storage that retains its data when power is removed) to store the initial program that runs when the computer is powered on or otherwise begins execution (a process known as bootstrapping, often abbreviated to "booting" or "booting up"). Likewise, every non-trivial computer needs some form of mutable memory to record changes in its state as it executes. Forms of read-only memory were employed as non-volatile storage for programs in most early stored-program computers, such as ENIAC after 1948. (Until then it was not a stored-program computer as every program had to be manually wired into the machine, which could take days to weeks.) Read-only memory was simpler to implement since it needed only a mechanism to read stored values, and not to change them in-place, and thus could be implemented with very crude electromechanical devices (see historical examples below). With the advent of integrated circuits in the 1960s, both ROM and its mutable counterpart static RAM were implemented as arrays of transistors in silicon chips; however, a ROM memory cell could be implemented using fewer transistors than an SRAM memory cell, since the latter needs a latch (comprising 5-20 transistors) to retain its contents, while a ROM cell might consist of the absence (logical 0) or presence (logical 1) of one transistor connecting a bit line to a word line.[11] Consequently, ROM could be implemented at a lower cost-per-bit than RAM for many years. Most home computers of the 1980s stored a BASIC interpreter or operating system in ROM as other forms of non-volatile storage such as magnetic disk drives were too costly. For example, the Commodore 64 included 64 KB of RAM and 20 KB of ROM contained a BASIC interpreter and the "KERNAL" of its operating system. Later home or office computers such as the IBM PC XT often included magnetic disk drives, and larger amounts of RAM, allowing them to load their operating systems from disk into RAM, with only a minimal hardware initialization core and bootloader remaining in ROM (known as the BIOS in IBM-compatible computers). This arrangement allowed for a more complex and easily upgradeable operating system. In modern PCs, "ROM" (usually NOR flash in PC) is used to store the basic bootstrapping firmware for the main processor, as well as the various firmware needed to internally control self-contained devices such as graphic cards, hard disks, DVD drives, TFT screens, etc., in the system. Today, many of these "read-only" memories – especially the BIOS – are often replaced with Flash memory (see below), to permit in-place reprogramming should the need for a firmware upgrade arise. However, simple and mature sub-systems (such as the keyboard or some communication controllers in the integrated circuits on the main board, for example) may employ mask ROM or OTP (one-time programmable). ROM and successor technologies such as flash are prevalent in embedded systems. These are in everything from industrial robots to home appliances and consumer electronics (MP3 players, set-top boxes, etc.) all of which are designed for specific functions, but are based on general-purpose microprocessors. With software usually tightly coupled to hardware, program changes are rarely needed in such devices (which typically lack hard disks for reasons of cost, size, or power consumption). As of 2008, most products use Flash rather than mask ROM, and many provide some means for connecting to a PC for firmware updates; for example, a digital audio player might be updated to support a new file format. Some hobbyists have taken advantage of this flexibility to reprogram consumer products for new purposes; for example, the iPodLinux and OpenWrt projects have enabled users to run full-featured Linux distributions on their MP3 players and wireless routers, respectively. ROM is also useful for binary storage of cryptographic data, as it makes them difficult to replace, which may be desirable in order to enhance information security. Use for storing data[edit] Since ROM (at least in hard-wired mask form) cannot be modified, it is only suitable for storing data which is not expected to need modification for the life of the device. To that end, ROM has been used in many computers to store look-up tables for the evaluation of mathematical and logical functions (for example, a floating-point unit might tabulate the sine function in order to facilitate faster computation). This was especially effective when CPUs were slow and ROM was cheap compared to RAM. Notably, the display adapters of early personal computers stored tables of bitmapped font characters in ROM. This usually meant that the text display font could not be changed interactively. This was the case for both the CGA and MDA adapters available with the IBM PC XT. The use of ROM to store such small amounts of data has disappeared almost completely in modern general-purpose computers. However, Flash ROM has taken over a new role as a medium for mass storage or secondary storage of files. Types[edit] The first EPROM, an Intel 1702, with the die and wire bonds clearly visible through the erase window. Factory programmed[edit] Mask ROM is a read-only memory whose contents are programmed by the integrated circuit manufacturer (rather than by the user). The desired memory contents are furnished by the customer to the device manufacturer. The desired data is converted into a custom mask layer for the final metallization of interconnections on the memory chip (hence the name). It is common practice to use rewritable non-volatile memory – such as UV-EPROM or EEPROM – for the development phase of a project, and to switch to mask ROM when the code has been finalized. For example, Atmel microcontrollers come in both EEPROM and mask ROM formats. The main advantage of mask ROM is its cost. Per bit, mask ROM is more compact than any other kind of semiconductor memory. Since the cost of an integrated circuit strongly depends on its size, mask ROM is significantly cheaper than any other kind of semiconductor memory. However, the one-time masking cost is high and there is a long turn-around time from design to product phase. Design errors are costly: if an error in the data or code is found, the mask ROM is useless and must be replaced in order to change the code or data. [12] As of 2003, four companies produce most such mask ROM chips: Samsung Electronics, NEC Corporation, Oki Electric Industry, and Macronix.[13][needs update] Some integrated circuits contain only mask ROM. Other integrated circuits contain mask ROM as well as a variety of other devices. In particular, many microprocessors have mask ROM to store their microcode. Some microcontrollers have mask ROM to store the bootloader or all of their firmware. Classic mask-programmed ROM chips are integrated circuits that physically encode the data to be stored, and thus it is impossible to change their contents after fabrication. Field programmable[edit] Programmable read-only memory (PROM), or one-time programmable ROM (OTP), can be written to or programmed via a special device called a PROM programmer. Typically, this device uses high voltages to permanently destroy or create internal links (fuses or antifuses) within the chip. Consequently, a PROM can only be programmed once. Erasable programmable read-only memory (EPROM) can be erased by exposure to strong ultraviolet light (typically for 10 minutes or longer), then rewritten with a process that again needs higher than usual voltage applied. Repeated exposure to UV light will eventually wear out an EPROM, but the endurance of most EPROM chips exceeds 1000 cycles of erasing and reprogramming. EPROM chip packages can often be identified by the prominent quartz "window" which allows UV light to enter. After programming, the window is typically covered with a label to prevent accidental erasure. Some EPROM chips are factory-erased before they are packaged, and include no window; these are effectively PROM. Electrically erasable programmable read-only memory (EEPROM) is based on a similar semiconductor structure to EPROM, but allows its entire contents (or selected banks) to be electrically erased, then rewritten electrically, so that they need not be removed from the computer (whether general-purpose or an embedded computer in a camera, MP3 player, etc.). Writing or flashing an EEPROM is much slower (milliseconds per bit) than reading from a ROM or writing to a RAM (nanoseconds in both cases). Electrically alterable read-only memory (EAROM) is a type of EEPROM that can be modified one bit at a time. Writing is a very slow process and again needs higher voltage (usually around 12 V) than is used for read access. EAROMs are intended for applications that require infrequent and only partial rewriting. EAROM may be used as non-volatile storage for critical system setup information; in many applications, EAROM has been supplanted by CMOS RAM supplied by mains power and backed-up with a lithium battery. Flash memory (or simply flash) is a modern type of EEPROM invented in 1984. Flash memory can be erased and rewritten faster than ordinary EEPROM, and newer designs feature very high endurance (exceeding 1,000,000 cycles). Modern NAND flash makes efficient use of silicon chip area, resulting in individual ICs with a capacity as high as 32 GB as of 2007[update]; this feature, along with its endurance and physical durability, has allowed NAND flash to replace magnetic in some applications (such as USB flash drives). NOR flash memory is sometimes called flash ROM or flash EEPROM when used as a replacement for older ROM types, but not in applications that take advantage of its ability to be modified quickly and frequently. By applying write protection, some types of reprogrammable ROMs may temporarily become read-only memory. Other technologies[edit] There are other types of non-volatile memory which are not based on solid-state IC technology, including: Optical storage media, such CD-ROM which is read-only (analogous to masked ROM). CD-R is Write Once Read Many (analogous to PROM), while CD-RW supports erase-rewrite cycles (analogous to EEPROM); both are designed for backwards-compatibility with CD-ROM. Transformer matrix ROM (TROS), from the IBM System 360/20 Diode matrix ROM, used in small amounts in many computers in the 1960s as well as electronic desk calculators and keyboard encoders for terminals. This ROM was programmed by installing discrete semiconductor diodes at selected locations between a matrix of word line traces and bit line traces on a printed circuit board. Resistor, capacitor, or transformer matrix ROM, used in many computers until the 1970s. Like diode matrix ROM, it was programmed by placing components at selected locations between a matrix of word lines and bit lines. ENIAC's Function Tables were resistor matrix ROM, programmed by manually setting rotary switches. Various models of the IBM System/360 and complex peripheral devices stored their microcode in either capacitor (called BCROS for balanced capacitor read-only storage on the 360/50 and 360/65, or CCROS for card capacitor read-only storage on the 360/30) or transformer (called TROS for transformer read-only storage on the 360/20, 360/40 and others) matrix ROM. Core rope, a form of transformer matrix ROM technology used where size and weight were critical. This was used in NASA/MIT's Apollo Spacecraft Computers, DEC's PDP-8 computers, the Hewlett-Packard 9100A calculator, and other places. This type of ROM was programmed by hand by weaving "word line wires" inside or outside of ferrite transformer cores. Diamond Ring stores, in which wires are threaded through a sequence of large ferrite rings that function only as sensing devices. These were used in TXE telephone exchanges. Speed[edit] Although the relative speed of RAM vs. ROM has varied over time, as of 2007[update] large RAM chips can be read faster than most ROMs. For this reason (and to allow uniform access), ROM content is sometimes copied to RAM or shadowed before its first use, and subsequently read from RAM. Writing[edit] For those types of ROM that can be electrically modified, writing speed has traditionally been much slower than reading speed, and it may need unusually high voltage, the movement of jumper plugs to apply write-enable signals, and special lock/unlock command codes. Modern NAND Flash achieves the highest write speeds of any rewritable ROM technology, with speeds as high as 10 GB/s, this has been enabled by the increased investment in both consumer and enterprise solid state drives and flash memory products for higher end mobile devices. On a technical level the gains have been achieved by increasing parallelism both in controller design and of storage, the use of large DRAM read/write caches and the implementation of memory cells which can store more than one bit (DLC, TLC and MLC). The latter approach is more failure prone but this has been largely mitigated by overprovisioning (the inclusion of spare capacity in a product which is visible only to the drive controller) and by increasingly sophisticated read/write algorithms in drive firmware. Endurance and data retention[edit] Because they are written by forcing electrons through a layer of electrical insulation onto a floating transistor gate, rewriteable ROMs can withstand only a limited number of write and erase cycles before the insulation is permanently damaged. In the earliest EPROMs, this might occur after as few as 1,000 write cycles, while in modern Flash EEPROM the endurance may exceed 1,000,000. The limited endurance, as well as the higher cost per bit, means that Flash-based storage is unlikely to completely supplant magnetic disk drives in the near future.[citation needed] The timespan over which a ROM remains accurately readable is not limited by write cycling. The data retention of EPROM, EAROM, EEPROM, and Flash may be time-limited by charge leaking from the floating gates of the memory cell transistors. Early generation EEPROM's, in the mid 1980's generally cited 5 or 6 year data retention. A review of EEPROM's offered in the year 2020 shows manufacturers citing 100 year data retention. Adverse environments will reduce the retention time ( Leakage is accelerated by high temperatures or radiation ). Masked ROM and fuse/antifuse PROM do not suffer from this effect, as their data retention depends on physical rather than electrical permanence of the integrated circuit, although fuse re-growth was once a problem in some systems.[14] Content images[edit] Main article: ROM image The contents of ROM chips can be extracted with special hardware devices and relevant controlling software. This practice is common for, as a main example, reading the contents of older video game console cartridges. Another example is making backups of firmware/OS ROMs from older computers or other devices - for archival purposes, as in many cases, the original chips are PROMs and thus at risk of exceeding their usable data lifetime. The resultant memory dump files are known as ROM images or abbreviated ROMs, and can be used to produce duplicate ROMs - for example to produce new cartridges or as digital files for playing in console emulators. The term ROM image originated when most console games were distributed on cartridges containing ROM chips, but achieved such widespread usage that it is still applied to images of newer games distributed on CD-ROMs or other optical media. ROM images of commercial games, firmware, etc. usually contain copyrighted software. The unauthorized copying and distribution of copyrighted software is a violation of copyright laws in many jurisdictions, although duplication for backup purposes may be considered fair use depending on location. In any case, there is a thriving community engaged in the distribution and trading of such software and abandonware for preservation/sharing purposes. Timeline[edit] See also: Flash memory § Timeline, Random-access memory § Timeline, and Transistor count § Memory Date of introduction Chip name Capacity (bits) ROM type MOSFET Manufacturer(s) Process Area Ref 1956 ? ? PROM ? Arma ? ? [2][3] 1965 ? 256-bit ROM Bipolar TTL Sylvania ? ? [15] 1965 ? 1 kb ROM MOS General Microelectronics ? ? 1969 3301 1 kb ROM Bipolar Intel ? ? [15] 1970 ? 512-bit PROM Bipolar TTL Radiation ? ? [6] 1971 1702 2 kb EPROM Static MOS (silicon gate) Intel ? 15 mm² [6][16] 1974 ? 4 kb ROM MOS AMD, General Instrument ? ? [15] 1974 ? ? EAROM MNOS General Instrument ? ? [6] 1975 2708 8 kb EPROM NMOS (FGMOS) Intel ? ? [17][18] 1976 ? 2 kb EEPROM MOS Toshiba ? ? [19] 1977 µCOM-43 (PMOS) 16 kb PROM PMOS NEC ? ? [20] 1977 2716 16 kb EPROM TTL Intel ? ? [21][22] 1978 EA8316F 16 kb ROM NMOS Electronic Arrays ? 436 mm² [15][23] 1978 µCOM-43 (CMOS) 16 kb PROM CMOS NEC ? ? [20] 1978 2732 32 kb EPROM NMOS (HMOS) Intel ? ? [17][24] 1978 2364 64 kb ROM NMOS Intel ? ? [25] 1980 ? 16 kb EEPROM NMOS Motorola 4,000 nm ? [17][26] 1981 2764 64 kb EPROM NMOS (HMOS II) Intel 3,500 nm ? [17][26][27] 1982 ? 32 kb EEPROM MOS Motorola ? ? [26] 1982 27128 128 kb EPROM NMOS (HMOS II) Intel ? ? [17][26][28] 1983 ? 64 kb EPROM CMOS Signetics 3,000 nm ? [26] 1983 27256 256 kb EPROM NMOS (HMOS) Intel ? ? [17][29] 1983 ? 256 kb EPROM CMOS Fujitsu ? ? [30] January 1984 MBM 2764 64 kb EEPROM NMOS Fujitsu ? 528 mm² [31] 1984 ? 512 kb EPROM NMOS AMD 1,700 nm ? [26] 1984 27512 512 kb EPROM NMOS (HMOS) Intel ? ? [17][32] 1984 ? 1 Mb EPROM CMOS NEC 1,200 nm ? [26] 1987 ? 4 Mb EPROM CMOS Toshiba 800 nm ? [26] 1990 ? 16 Mb EPROM CMOS NEC 600 nm ? [26] 1993 ? 8 Mb MROM CMOS Hyundai ? ? [33] 1995 ? 1 Mb EEPROM CMOS Hitachi ? ? [34] 1995 ? 16 Mb MROM CMOS AKM, Hitachi ? ? [34] See also[edit] Flash memory Random access memory Read-mostly memory (RMM) Write-only memory Notes[edit] ^ Some discrete component ROM could be mechanically altered, e.g., by adding and removing transformers. IC ROMs, however, cannot be mechanically changed. References[edit] Listen to this article (2.4 megabytes) This audio file was created from a revision of this article dated 12 April 2005 (2005-04-12), and does not reflect subsequent edits. (Audio help · More spoken articles) ^ "flash ROM Definition from PC Magazine Encyclopedia". pcmag.com. Archived from the original on November 10, 2013. ^ a b Han-Way Huang (5 December 2008). Embedded System Design with C805. Cengage Learning. p. 22. ISBN 978-1-111-81079-5. Archived from the original on 27 April 2018. ^ a b Marie-Aude Aufaure; Esteban Zimányi (17 January 2013). Business Intelligence: Second European Summer School, eBISS 2012, Brussels, Belgium, July 15-21, 2012, Tutorial Lectures. Springer. p. 136. ISBN 978-3-642-36318-4. Archived from the original on 27 April 2018. ^ "1960 - Metal Oxide Semiconductor (MOS) Transistor Demonstrated". The Silicon Engine. Computer History Museum. ^ "Transistors - an overview". ScienceDirect. Retrieved 8 August 2019. ^ a b c d "1971: Reusable semiconductor ROM introduced". Computer History Museum. Retrieved 19 June 2019. ^ Tarui, Y.; Hayashi, Y.; Nagai, K. (1972). "Electrically reprogrammable nonvolatile semiconductor memory". IEEE Journal of Solid-State Circuits. 7 (5): 369–375. Bibcode:1972IJSSC...7..369T. doi:10.1109/JSSC.1972.1052895. ISSN 0018-9200. ^ "1987: Toshiba Launches NAND Flash". eWEEK. ^ Detlev Richter (Sep 12, 2013). "Chapter 2. Fundamentals of Non-Volatile Memories". Flash Memories: Economic Principles of Performance, Cost and Reliability. Springer Science & Business Media. p. 6. ^ See page 6 of Toshiba's 1993 NAND Flash Applications Design Guide Archived 2009-10-07 at the Wayback Machine. ^ See chapters on "Combinatorial Digital Circuits" and "Sequential Digital Circuits" in Millman & Grable, Microelectronics, 2nd ed. ^ Paul Horowitz, Winfield Hill, The Art of Electronics (Third Edition), Cambridge University Press, ISBN 0-521-37095-7, page 817 ^ "Technology Analysis: Oki P2ROM to Replace Mask ROM, Flash EEPROM" Archived 2007-10-21 at the Wayback Machine by Motoyuki Oishi 2003 ^ "Memory Ic". transparentc. Archived from the original on 12 July 2016. Retrieved 22 July 2016. ^ a b c d "1965: Semiconductor Read-Only-Memory Chips Appear". Computer History Museum. Retrieved 20 June 2019. ^ "1702A Datasheet" (PDF). Intel. Retrieved 6 July 2019. ^ a b c d e f g "A chronological list of Intel products. The products are sorted by date" (PDF). Intel museum. Intel Corporation. July 2005. Archived from the original (PDF) on August 9, 2007. Retrieved July 31, 2007. ^ "2708 Datasheet" (PDF). Intel. Retrieved 6 July 2019. ^ Iizuka, H.; Masuoka, F.; Sato, Tai; Ishikawa, M. (1976). "Electrically alterable avalanche-injection-type MOS READ-ONLY memory with stacked-gate structure". IEEE Transactions on Electron Devices. 23 (4): 379–387. Bibcode:1976ITED...23..379I. doi:10.1109/T-ED.1976.18415. ISSN 0018-9383. ^ a b µCOM-43 SINGLE CHIP MICROCOMPUTER: USERS' MANUAL (PDF). NEC Microcomputers. January 1978. Retrieved 27 June 2019. ^ "Intel: 35 Years of Innovation (1968–2003)" (PDF). Intel. 2003. Retrieved 26 June 2019. ^ "2716: 16K (2K x 8) UV ERASABLE PROM" (PDF). Intel. Retrieved 27 June 2019. ^ "1982 CATALOG" (PDF). NEC Electronics. Retrieved 20 June 2019. ^ "2732A Datasheet" (PDF). Intel. Retrieved 6 July 2019. ^ Component Data Catalog (PDF). Intel. 1978. pp. 1–3. Retrieved 27 June 2019. ^ a b c d e f g h i "Memory". STOL (Semiconductor Technology Online). Retrieved 25 June 2019. ^ "2764A Datasheet" (PDF). Intel. Retrieved 6 July 2019. ^ "27128A Datasheet" (PDF). Intel. Retrieved 6 July 2019. ^ "27256 Datasheet" (PDF). Intel. Retrieved 2 July 2019. ^ "History of Fujitsu's Semiconductor Business". Fujitsu. Retrieved 2 July 2019. ^ "MBM 2764" (PDF). Fujitsu. January 1984. Retrieved 21 June 2019. ^ "D27512-30 Datasheet" (PDF). Intel. Retrieved 2 July 2019. ^ "History: 1990s". SK Hynix. Retrieved 6 July 2019. ^ a b "Japanese Company Profiles" (PDF). Smithsonian Institution. 1996. Retrieved 27 June 2019. Authority control BNF: cb119903445 (data) GND: 4121596-5 LCCN: sh85111639 Retrieved from "https://en.wikipedia.org/w/index.php?title=Read-only_memory&oldid=991568761" Categories: Computer memory Non-volatile memory Hidden categories: Webarchive template wayback links Articles with short description Short description is different from Wikidata Articles containing potentially dated statements from 2007 All articles containing potentially dated statements Wikipedia articles in need of updating from November 2013 All Wikipedia articles in need of updating All articles with unsourced statements Articles with unsourced statements from July 2016 Articles with hAudio microformats Spoken articles Wikipedia articles with BNF identifiers Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons Languages العربية Asturianu Azərbaycanca বাংলা Беларуская Български Bosanski Català Čeština Cymraeg Dansk Deutsch Eesti Ελληνικά Español Euskara فارسی Français Frysk Furlan Gaeilge Galego 한국어 हिन्दी Hrvatski Bahasa Indonesia Íslenska Italiano עברית Қазақша Kiswahili Latina Latviešu Lumbaart Magyar Македонски മലയാളം Bahasa Melayu Монгол Nederlands 日本語 Norsk bokmål Norsk nynorsk Олык марий ਪੰਜਾਬੀ Polski Português Română Русский Shqip සිංහල Simple English Slovenčina Slovenščina کوردی Српски / srpski Srpskohrvatski / српскохрватски Sunda Suomi Svenska தமிழ் తెలుగు ไทย Тоҷикӣ Türkçe Українська Tiếng Việt 吴语 粵語 中文 Edit links This page was last edited on 30 November 2020, at 19:11 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement