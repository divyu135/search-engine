cat (Unix) - Wikipedia cat (Unix) From Wikipedia, the free encyclopedia Jump to navigation Jump to search For other uses of cat, see Cat (disambiguation) and Cat. cat Original author(s) Ken Thompson, Dennis Ritchie Developer(s) AT&T Bell Laboratories Initial release November 3, 1971; 49 years ago (1971-11-03) Operating system Unix, Unix-like, Plan 9, Inferno Type Command cat is a standard Unix utility that reads files sequentially, writing them to standard output. The name is derived from its function to concatenate files. Contents 1 History 2 Usage 2.1 Options 3 Use cases 4 Examples 5 Unix culture 5.1 Jargon file definition 5.2 Useless use of cat 6 tac 7 See also 8 References 9 External links History[edit] cat was part of the early versions of Unix, e.g., Version 1, and replaced pr, a PDP-7 and Multics utility for copying a single file to the screen.[1] The version of cat bundled in GNU coreutils was written by Torbjorn Granlund and Richard Stallman.[2] Usage[edit] The Single Unix Specification defines the operation of cat to read files in the sequence given in its arguments, writing their contents to the standard output in the same sequence. The specification mandates the support of one option flag, u for unbuffered output, meaning that each byte is written after it has been read. Some operating systems, like the ones using GNU Core Utilities, do this by default and ignore the flag.[3] If one of the input filenames is specified as a single hyphen (-), then cat reads from standard input at that point in the sequence. If no files are specified, cat reads from standard input only. The command-syntax is: cat [options] [file_names] Options[edit] Example of some cat options:[4] -b (GNU: --number-nonblank), number non-blank output lines -e implies -v but also display end-of-line characters as $ (GNU only: -E the same, but without implying -v) -n (GNU: --number), number all output lines -s (GNU: --squeeze-blank), squeeze multiple adjacent blank lines -t implies -v, but also display tabs as ^I (GNU: -T the same, but without implying -v) -u use unbuffered I/O for stdout. POSIX does not specify the behavior without this option. -v (GNU: --show-nonprinting), displays nonprinting characters, except for tabs and the end of line character Use cases[edit] cat can be used to pipe a file to a program that expects plain text or binary data on its input stream. cat does not destroy non-text bytes when concatenating and outputting. As such, its two main use cases are text files and certain format-compatible types of binary files. Concatenation of text is limited to text files using the same legacy encoding, such as ASCII. cat does not provide a way to concatenate Unicode text files that have a Byte Order Mark or files using different text encodings from each other. For many structured binary data sets, the resulting combined file may not be valid; for example, if a file has a unique header or footer, the result will spuriously duplicate these. However, for some multimedia digital container formats, the resulting file is valid, and so cat provides an effective means of appending files. Video streams can be a significant example of files that cat can concatenate without issue, e.g. the MPEG program stream (MPEG-1 and MPEG-2) and DV (Digital Video) formats, which are fundamentally simple streams of packets. Examples[edit] Command Explanation cat file1.txt Display contents of file cat file1.txt file2.txt Concatenate two text files and display the result in the terminal cat file1.txt file2.txt > newcombinedfile.txt Concatenate two text files and write them to a new file cat >newfile.txt Create a file called newfile.txt. Type the desired input and press CTRL+D to finish. The text will be in file newfile.txt. cat -n file1.txt file2.txt > newnumberedfile.txt Some implementations of cat, with option -n, can also number lines cat file1.txt > file2.txt Copy the contents of file1.txt into file2.txt cat file1.txt >> file2.txt Append the contents of file1.txt to file2.txt cat file1.txt file2.txt file3.txt | sort > test4 Concatenate the files, sort the complete set of lines, and write the output to a newly created file cat file1.txt file2.txt | less Run the program "less" with the concatenation of file1 and file2 as its input command | cat Cancel "command" special behavior (e.g. paging) when it writes directly to TTY (cf. UUOC below) Unix culture[edit] Jargon file definition[edit] The Jargon File version 4.4.7 lists this as the definition of cat: To spew an entire file to the screen or some other output sink without pause (syn. blast). By extension, to dump large amounts of data at an unprepared target or with no intention of browsing it carefully. Usage: considered silly. Rare outside Unix sites. See also dd, BLT. Among Unix fans, cat(1) is considered an excellent example of user-interface design, because it delivers the file contents without such verbosity as spacing or headers between the files, and because it does not require the files to consist of lines of text, but works with any sort of data. Among Unix critics, cat(1) is considered the canonical example of bad user-interface design, because of its woefully unobvious name. It is far more often used to blast a single file to standard output than to concatenate two or more files. The name cat for the former operation is just as unintuitive as, say, LISP's cdr. Useless use of cat[edit] Useless use of cat (UUOC) is common Unix jargon for command line constructs that only provide a function of convenience to the user.[5] This is also referred to as "cat abuse". The activity of fixing instances of UUOC is sometimes called demoggification.[6] Example of a common cat abuse is given in the award: cat filename | command arg1 arg2 argn This can be rewritten using redirection of stdin instead, in either of the following forms (the first is more traditional):  command arg1 arg2 argn < filename <filename command arg1 arg2 argn Beyond other benefits, the input redirection forms allow command to perform random access on the file, whereas the cat examples do not. This is because the redirection form opens the file as the stdin file descriptor which command can fully access, while the cat form simply provides the data as a stream of bytes. Another common case where cat is unnecessary is where a command defaults to operating on stdin, but will read from a file, if the filename is given as an argument. This is the case for many common commands; the following examples  cat "$file" | grep "$pattern" cat "$file" | less can instead be written as  grep "$pattern" "$file" less "$file" A common interactive use of cat for a single file is to output the content of a file to standard output. However, if the output is piped or redirected, cat is unnecessary. A cat written with UUOC might still be preferred for readability reasons, as reading a piped stream left-to-right might be easier to conceptualize.[7] Also, one wrong use of the redirection symbol ">" instead of "<" (often adjacent on keyboards) may permanently delete the content of a file, in other words clobbering, and one way to avoid this is to use cat with pipes. Compare:  command < in | command2 > out <in command | command2 > out with: cat in | command | command2 > out tac[edit] tac is a Linux command that allows viewing files line-by-line, beginning from the last line. (tac doesn't reverse the contents of each individual line, only the order in which the lines are presented.) It is named by analogy with cat. Usage: Usage: tac [OPTION]... [FILE]...Write each FILE to standard output, last line first.With no FILE, or when FILE is -, read standard input.Mandatory arguments to long options are mandatory for short options too.  -b, --before             attach the separator before instead of after  -r, --regex              interpret the separator as a regular expression  -s, --separator=STRING   use STRING as the separator instead of newline      --help     display this help and exit      --version  output version information and exit See also[edit] paste split, a command that splits a file into pieces which cat can then rejoin. zcat less References[edit] ^ McIlroy, M. D. (1987). A Research Unix reader: annotated excerpts from the Programmer's Manual, 1971–1986 (PDF) (Technical report). CSTR. Bell Labs. 139. ^ https://linux.die.net/man/1/cat ^ GNU Coreutils. "GNU Coreutils manual", GNU, Retrieved on 1 Mars 2017. ^ OpenBSD manual page and the GNU Core Utiltites version of cat ^ comp.unix.shell. "Early award example of UUOC (1994)", comp.unix.shell via Google Groups, Retrieved on 1 Mars 2017. ^ Rose, John (2012). "Demoggification". YouTube. SoutEast LinuxFest. ^ Nguyen, Dan. "Stanford Computational Journalism Lab". stanford.edu. Retrieved 2017-10-08. External links[edit] The Wikibook Guide to Unix has a page on the topic of: Commands cat: concatenate and print files – Commands & Utilities Reference, The Single UNIX Specification, Issue 7 from The Open Group UNIX Style, or cat -v Considered Harmful - A paper by Rob Pike on proper Unix command design using cat as an example. cat(1) original manual page in the First Edition of Unix. cat(1): concatenate and write files – GNU Coreutils reference cat(1): concatenate and print files – OpenBSD General Commands Manual cat(1) – FreeBSD General Commands Manual cat(1) – Plan 9 Programmer's Manual, Volume 1 tac(1): concatenate and write files in reverse – GNU Coreutils reference v t e Unix command-line interface programs and shell builtins File system cat chmod chown chgrp cksum cmp cp dd du df file fuser ln ls mkdir mv pax pwd rm rmdir split tee touch type umask Processes at bg crontab fg kill nice ps time User environment env exit logname mesg talk tput uname who write Text processing awk basename comm csplit cut diff dirname ed ex fold head iconv join m4 more nl paste patch printf sed sort strings tail tr uniq vi wc xargs Shell builtins alias cd echo test unset wait Searching find grep Documentation man Software development ar ctags lex make nm strip yacc Miscellaneous bc cal expr lp od sleep true and false Categories Standard Unix programs Unix SUS2008 utilities List Retrieved from "https://en.wikipedia.org/w/index.php?title=Cat_(Unix)&oldid=992528149" Categories: Unix text processing utilities Standard Unix programs Unix SUS2008 utilities Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages العربية Azərbaycanca Беларуская Català Čeština Dansk Deutsch Ελληνικά Español فارسی Français 한국어 हिन्दी Hrvatski Italiano עברית Magyar മലയാളം Bahasa Melayu Nederlands 日本語 Polski Português Română Русский Slovenščina Svenska Türkçe Українська Tiếng Việt 中文 Edit links This page was last edited on 5 December 2020, at 19:11 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement