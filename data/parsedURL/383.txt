Lua (programming language) - Wikipedia Lua (programming language) From Wikipedia, the free encyclopedia Jump to navigation Jump to search The article is about the Lua programming language itself. For its use in Wikipedia, see Wikipedia:Lua. Lightweight programming language Lua Paradigm Multi-paradigm: scripting, imperative (procedural, prototype-based, object-oriented), functional Designed by Roberto Ierusalimschy Waldemar Celes Luiz Henrique de Figueiredo First appeared 1993; 27 years ago (1993) Stable release 5.4.1 / 9 October 2020; 55 days ago (2020-10-09) Typing discipline Dynamic, strong, duck Implementation language ANSI C OS Cross-platform License MIT License Filename extensions .lua Website www.lua.org Major implementations Lua, LuaJIT, LuaVela Dialects Metalua, Idle, GSL Shell, Luau Influenced by C++, CLU, Modula, Scheme, SNOBOL Influenced GameMonkey, Io, JavaScript, Julia, MiniD, Red, Ring,[1] Ruby, Squirrel, MoonScript, C-- Lua (/ˈluːə/ LOO-ə; from Portuguese: lua [ˈlu.(w)ɐ] meaning moon)[a] is a lightweight, high-level, multi-paradigm programming language designed primarily for embedded use in applications.[2] Lua is cross-platform, since the interpreter of compiled bytecode is written in ANSI C,[3] and Lua has a relatively simple C API to embed it into applications.[4] Lua was originally designed in 1993 as a language for extending software applications to meet the increasing demand for customization at the time. It provided the basic facilities of most procedural programming languages, but more complicated or domain-specific features were not included; rather, it included mechanisms for extending the language, allowing programmers to implement such features. As Lua was intended to be a general embeddable extension language, the designers of Lua focused on improving its speed, portability, extensibility, and ease-of-use in development. Contents 1 History 2 Features 2.1 Syntax 2.2 Control flow 2.3 Functions 2.4 Tables 2.5 Metatables 2.6 Object-oriented programming 3 Implementation 4 C API 5 Applications 6 Languages that compile to Lua 7 See also 8 Notes 9 References 10 Further reading 11 External links History[edit] Lua was created in 1993 by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, and Waldemar Celes, members of the Computer Graphics Technology Group (Tecgraf) at the Pontifical Catholic University of Rio de Janeiro, in Brazil. From 1977 until 1992, Brazil had a policy of strong trade barriers (called a market reserve) for computer hardware and software. In that atmosphere, Tecgraf's clients could not afford, either politically or financially, to buy customized software from abroad. Those reasons led Tecgraf to implement the basic tools it needed from scratch.[5] Lua's predecessors were the data-description/configuration languages SOL (Simple Object Language) and DEL (data-entry language).[6] They had been independently developed at Tecgraf in 1992–1993 to add some flexibility into two different projects (both were interactive graphical programs for engineering applications at Petrobras company). There was a lack of any flow-control structures in SOL and DEL, and Petrobras felt a growing need to add full programming power to them. In The Evolution of Lua, the language's authors wrote:[5] In 1993, the only real contender was Tcl, which had been explicitly designed to be embedded into applications. However, Tcl had unfamiliar syntax, did not offer good support for data description, and ran only on Unix platforms. We did not consider LISP or Scheme because of their unfriendly syntax. Python was still in its infancy. In the free, do-it-yourself atmosphere that then reigned in Tecgraf, it was quite natural that we should try to develop our own scripting language ... Because many potential users of the language were not professional programmers, the language should avoid cryptic syntax and semantics. The implementation of the new language should be highly portable, because Tecgraf's clients had a very diverse collection of computer platforms. Finally, since we expected that other Tecgraf products would also need to embed a scripting language, the new language should follow the example of SOL and be provided as a library with a C API. Lua 1.0 was designed in such a way that its object constructors, being then slightly different from the current light and flexible style, incorporated the data-description syntax of SOL (hence the name Lua: Sol is also the Portuguese word for "Sun", Lua being the word for "Moon"). Lua syntax for control structures was mostly borrowed from Modula (if, while, repeat/until), but also had taken influence from CLU (multiple assignments and multiple returns from function calls, as a simpler alternative to reference parameters or explicit pointers), C++ ("neat idea of allowing a local variable to be declared only where we need it"[5]), SNOBOL and AWK (associative arrays). In an article published in Dr. Dobb's Journal, Lua's creators also state that LISP and Scheme with their single, ubiquitous data-structure mechanism (the list) were a major influence on their decision to develop the table as the primary data structure of Lua.[7] Lua semantics have been increasingly influenced by Scheme over time,[5] especially with the introduction of anonymous functions and full lexical scoping. Several features were added in new Lua versions. Versions of Lua prior to version 5.0 were released under a license similar to the BSD license. From version 5.0 onwards, Lua has been licensed under the MIT License. Both are permissive free software licences and are almost identical. Features[edit] Lua is commonly described as a "multi-paradigm" language, providing a small set of general features that can be extended to fit different problem types. Lua does not contain explicit support for inheritance, but allows it to be implemented with metatables. Similarly, Lua allows programmers to implement namespaces, classes, and other related features using its single table implementation; first-class functions allow the employment of many techniques from functional programming; and full lexical scoping allows fine-grained information hiding to enforce the principle of least privilege. In general, Lua strives to provide simple, flexible meta-features that can be extended as needed, rather than supply a feature-set specific to one programming paradigm. As a result, the base language is light—the full reference interpreter is only about 247 kB compiled[3]—and easily adaptable to a broad range of applications. Lua is a dynamically typed language intended for use as an extension or scripting language and is compact enough to fit on a variety of host platforms. It supports only a small number of atomic data structures such as boolean values, numbers (double-precision floating point and 64-bit integers by default), and strings. Typical data structures such as arrays, sets, lists, and records can be represented using Lua's single native data structure, the table, which is essentially a heterogeneous associative array. Lua implements a small set of advanced features such as first-class functions, garbage collection, closures, proper tail calls, coercion (automatic conversion between string and number values at run time), coroutines (cooperative multitasking) and dynamic module loading. Syntax[edit] The classic "Hello, World!" program can be written as follows:[8] print("Hello World!") or as: print 'Hello World!' A comment in Lua starts with a double-hyphen and runs to the end of the line, similar to Ada, Eiffel, Haskell, SQL and VHDL. Multi-line strings and comments are adorned with double square brackets. The factorial function is implemented as a function in this example: function factorial(n)  local x = 1  for i = 2, n do    x = x * i  end  return xend Control flow[edit] Lua has four types of loops: the while loop, the repeat loop (similar to a do while loop), the numeric for loop, and the generic for loop. --condition = truewhile condition do  --statementsendrepeat  --statementsuntil conditionfor i = first, last, delta do  --delta may be negative, allowing the for loop to count down or up  --statements  --example: print(i)end The generic for loop: for key, value in pairs(_G) do  print(key, value)end would iterate over the table _G using the standard iterator function pairs, until it returns nil. You can also do a nested loop, which is a loop inside of another loop. local grid = {  { 11, 12, 13 },  { 21, 22, 23 },  { 31, 32, 33 }}for y, row in ipairs(grid) do  for x, value in ipairs(row) do    print(x, y, grid[y][x])  endend Functions[edit] Lua's treatment of functions as first-class values is shown in the following example, where the print function's behavior is modified: do  local oldprint = print  -- Store current print function as oldprint  function print(s)    --[[ Redefine print function. The usual print function can still be used      through oldprint. The new one has only one argument.]]    oldprint(s == "foo" and "bar" or s)  endend Any future calls to print will now be routed through the new function, and because of Lua's lexical scoping, the old print function will only be accessible by the new, modified print. Lua also supports closures, as demonstrated below: function addto(x)  -- Return a new function that adds x to the argument  return function(y)    --[=[ When we refer to the variable x, which is outside the current      scope and whose lifetime would be shorter than that of this anonymous      function, Lua creates a closure.]=]    return x + y  endendfourplus = addto(4)print(fourplus(3))  -- Prints 7--This can also be achieved by calling the function in the following way:print(addto(4)(3))--[[ This is because we are calling the returned function from 'addto(4)' with the argument '3' directly.  This also helps to reduce data cost and up performance if being called iteratively.]] A new closure for the variable x is created every time addto is called, so that each new anonymous function returned will always access its own x parameter. The closure is managed by Lua's garbage collector, just like any other object. Tables[edit] Tables are the most important data structures (and, by design, the only built-in composite data type) in Lua and are the foundation of all user-created types. They are associative arrays with addition of automatic numeric key and special syntax. A table is a collection of key and data pairs, where the data is referenced by key; in other words, it is a hashed heterogeneous associative array. Tables are created using the {} constructor syntax. a_table = {} -- Creates a new, empty table Tables are always passed by reference (see Call by sharing). A key (index) can be any value except nil and NaN, including functions. a_table = {x = 10}  -- Creates a new table, with one entry mapping "x" to the number 10.print(a_table["x"]) -- Prints the value associated with the string key, in this case 10.b_table = a_tableb_table["x"] = 20   -- The value in the table has been changed to 20.print(b_table["x"]) -- Prints 20.print(a_table["x"]) -- Also prints 20, because a_table and b_table both refer to the same table. A table is often used as structure (or record) by using strings as keys. Because such use is very common, Lua features a special syntax for accessing such fields.[9] point = { x = 10, y = 20 }   -- Create new tableprint(point["x"])            -- Prints 10print(point.x)               -- Has exactly the same meaning as line above. The easier-to-read dot notation is just syntactic sugar. By using a table to store related functions, it can act as a namespace. Point = {}Point.new = function(x, y)  return {x = x, y = y}  --  return {["x"] = x, ["y"] = y}endPoint.set_x = function(point, x)  point.x = x  --  point["x"] = x;end Tables are automatically assigned a numerical key, enabling them to be used as an array data type. The first automatic index is 1 rather than 0 as it is for many other programming languages (though an explicit index of 0 is allowed). A numeric key 1 is distinct from a string key "1". array = { "a", "b", "c", "d" }   -- Indices are assigned automatically.print(array[2])                  -- Prints "b". Automatic indexing in Lua starts at 1.print(#array)                    -- Prints 4.  # is the length operator for tables and strings.array[0] = "z"                   -- Zero is a legal index.print(#array)                    -- Still prints 4, as Lua arrays are 1-based. The length of a table t is defined to be any integer index n such that t[n] is not nil and t[n+1] is nil; moreover, if t[1] is nil, n can be zero. For a regular array, with non-nil values from 1 to a given n, its length is exactly that n, the index of its last value. If the array has "holes" (that is, nil values between other non-nil values), then #t can be any of the indices that directly precedes a nil value (that is, it may consider any such nil value as the end of the array).[10] ExampleTable ={  {1, 2, 3, 4},  {5, 6, 7, 8}}print(ExampleTable[1][3]) -- Prints "3"print(ExampleTable[2][4]) -- Prints "8" A table can be an array of objects. function Point(x, y)        -- "Point" object constructor  return { x = x, y = y }   -- Creates and returns a new object (table)endarray = { Point(10, 20), Point(30, 40), Point(50, 60) }   -- Creates array of points                        -- array = { { x = 10, y = 20 }, { x = 30, y = 40 }, { x = 50, y = 60 } };print(array[2].y)                                         -- Prints 40 Using a hash map to emulate an array normally is slower than using an actual array; however, Lua tables are optimized for use as arrays to help avoid this issue.[11] Metatables[edit] Extensible semantics is a key feature of Lua, and the metatable concept allows Lua's tables to be customized in powerful ways. The following example demonstrates an "infinite" table. For any n, fibs[n] will give the n-th Fibonacci number using dynamic programming and memoization. fibs = { 1, 1 }                                -- Initial values for fibs[1] and fibs[2].setmetatable(fibs, {  __index = function(values, n)                --[[__index is a function predefined by Lua,                                                    it is called if key "n" does not exist.]]    values[n] = values[n - 1] + values[n - 2]  -- Calculate and memorize fibs[n].    return values[n]  end}) Object-oriented programming[edit] Although Lua does not have a built-in concept of classes, object-oriented programming can be achieved using two language features: first-class functions and tables. By placing functions and related data into a table, an object is formed. Inheritance (both single and multiple) can be implemented using the metatable mechanism, telling the object to look up nonexistent methods and fields in parent object(s). There is no such concept as "class" with these techniques; rather, prototypes are used, similar to Self or JavaScript. New objects are created either with a factory method (that constructs new objects from scratch) or by cloning an existing object. Lua provides some syntactic sugar to facilitate object orientation. To declare member functions inside a prototype table, one can use function table:func(args), which is equivalent to function table.func(self, args). Calling class methods also makes use of the colon: object:func(args) is equivalent to object.func(object, args). Creating a basic vector object: local Vector = {}Vector.__index = Vectorfunction Vector:new(x, y, z)    -- The constructor  return setmetatable({x = x, y = y, z = z}, Vector)endfunction Vector:magnitude()     -- Another method  -- Reference the implicit object using self  return math.sqrt(self.x^2 + self.y^2 + self.z^2)endlocal vec = Vector:new(0, 1, 0) -- Create a vectorprint(vec:magnitude())          -- Call a method (output: 1)print(vec.x)                    -- Access a member variable (output: 0) Implementation[edit] Lua programs are not interpreted directly from the textual Lua file, but are compiled into bytecode, which is then run on the Lua virtual machine. The compilation process is typically invisible to the user and is performed during run-time, but it can be done offline in order to increase loading performance or reduce the memory footprint of the host environment by leaving out the compiler. Lua bytecode can also be produced and executed from within Lua, using the dump function from the string library and the load/loadstring/loadfile functions. Lua version 5.3.4 is implemented in approximately 24,000 lines of C code.[2][3] Like most CPUs, and unlike most virtual machines (which are stack-based), the Lua VM is register-based, and therefore more closely resembles an actual hardware design. The register architecture both avoids excessive copying of values and reduces the total number of instructions per function. The virtual machine of Lua 5 is one of the first register-based pure VMs to have a wide use.[12] Parrot and Android's Dalvik are two other well-known register-based VMs. PCScheme's VM was also register-based.[13] This example is the bytecode listing of the factorial function defined above (as shown by the luac 5.1 compiler):[14] function <factorial.lua:1,7> (9 instructions, 36 bytes at 0x8063c60)1 param, 6 slots, 0 upvalues, 6 locals, 2 constants, 0 functions	1	[2]	LOADK    	1 -1	; 1	2	[3]	LOADK    	2 -2	; 2	3	[3]	MOVE     	3 0	4	[3]	LOADK    	4 -1	; 1	5	[3]	FORPREP  	2 1	; to 7	6	[4]	MUL      	1 1 5	7	[3]	FORLOOP  	2 -2	; to 6	8	[6]	RETURN   	1 2	9	[7]	RETURN   	0 1 C API[edit] Lua is intended to be embedded into other applications, and provides a C API for this purpose. The API is divided into two parts: the Lua core and the Lua auxiliary library.[15] The Lua API's design eliminates the need for manual reference management in C code, unlike Python's API. The API, like the language, is minimalistic. Advanced functionality is provided by the auxiliary library, which consists largely of preprocessor macros which assist with complex table operations. The Lua C API is stack based. Lua provides functions to push and pop most simple C data types (integers, floats, etc.) to and from the stack, as well as functions for manipulating tables through the stack. The Lua stack is somewhat different from a traditional stack; the stack can be indexed directly, for example. Negative indices indicate offsets from the top of the stack. For example, −1 is the top (most recently pushed value), while positive indices indicate offsets from the bottom (oldest value). Marshalling data between C and Lua functions is also done using the stack. To call a Lua function, arguments are pushed onto the stack, and then the lua_call is used to call the actual function. When writing a C function to be directly called from Lua, the arguments are read from the stack. Here is an example of calling a Lua function from C: #include <stdio.h>#include <lua.h> // Lua main library (lua_*)#include <lauxlib.h> // Lua auxiliary library (luaL_*)int main(void){    // create a Lua state    lua_State *L = luaL_newstate();    // load and execute a string    if (luaL_dostring(L, "function foo (x,y) return x+y end")) {        lua_close(L);        return -1;    }    // push value of global "foo" (the function defined above)    // to the stack, followed by integers 5 and 3    lua_getglobal(L, "foo");    lua_pushinteger(L, 5);    lua_pushinteger(L, 3);    lua_call(L, 2, 1); // call a function with two arguments and one return value    printf("Result: %d\n", lua_tointeger(L, -1)); // print integer value of item at stack top    lua_pop(L, 1); // return stack to original state    lua_close(L); // close Lua state    return 0;} Running this example gives: $ cc -o example example.c -llua$ ./exampleResult: 8 The C API also provides some special tables, located at various "pseudo-indices" in the Lua stack. At LUA_GLOBALSINDEX prior to Lua 5.2[16] is the globals table, _G from within Lua, which is the main namespace. There is also a registry located at LUA_REGISTRYINDEX where C programs can store Lua values for later retrieval. It is possible to write extension modules using the Lua API. Extension modules are shared objects which can be used to extend the functionality of the interpreter by providing native facilities to Lua scripts. From the Lua side, such a module appears as a namespace table holding its functions and variables. Lua scripts may load extension modules using require,[15] just like modules written in Lua itself. A growing collection of modules known as rocks are available through a package management system called LuaRocks,[17] in the spirit of CPAN, RubyGems and Python eggs. Prewritten Lua bindings exist for most popular programming languages, including other scripting languages.[18] For C++, there are a number of template-based approaches and some automatic binding generators. Applications[edit] Main article: List of applications using Lua In video game development, Lua is widely used as a scripting language by programmers, mainly due to its perceived easiness to embed, fast execution, and short learning curve.[19] It is often used for manipulating the objects and elements players see in the game.[20] In 2003, a poll conducted by GameDev.net showed Lua was the most popular scripting language for game programming.[21] On 12 January 2012, Lua was announced as a winner of the Front Line Award 2011 from the magazine Game Developer in the category Programming Tools.[22] A large number of non-game applications also use Lua for extensibility, such as LuaTeX, an implementation of the TeX type-setting language, Redis, a key-value database, Neovim, a text editor, and Nginx, a web server. Through the Scribunto extension, Lua is available as a server side scripting language in the MediaWiki software that powers Wikipedia and other wikis.[23][24][circular reference] Among its uses are allowing the integration of data from Wikidata into articles,[25] and powering the automated taxobox system. Languages that compile to Lua[edit] Moonscript is a dynamic, whitespace-sensitive scripting language inspired by CoffeeScript, which compiles into Lua. This means that instead of using do and end (or { and }) to delimit sections of code it uses line breaks and indentation style.[26][27][28] A notable usage of MoonScript is a video game distribution website Itch.io. Fennel.[28] Urn.[28] Amulet ML.[28] See also[edit] Comparison of programming languages Notes[edit] ^ The name is commonly, but incorrectly, rendered as "LUA". This is incorrect because the name is not an acronym. References[edit] ^ Ring Team (5 December 2017). "The Ring programming language and other languages". ring-lang.net. ring-lang. ^ a b Ierusalimschy, Roberto; de Figueiredo, Luiz Henrique; Filho, Waldemar Celes (June 1996). "Lua—An Extensible Extension Language". Software: Practice and Experience. 26 (6): 635–652. doi:10.1002/(SICI)1097-024X(199606)26:6<635::AID-SPE26>3.0.CO;2-P. Retrieved 24 October 2015. ^ a b c "About Lua". Lua.org. Retrieved 11 August 2011. ^ Yuri Takhteyev (21 April 2013). "From Brazil to Wikipedia". Foreign Affairs. Retrieved 25 April 2013. ^ a b c d Ierusalimschy, R.; Figueiredo, L. H.; Celes, W. (2007). "The evolution of Lua" (PDF). Proc. of ACM HOPL III. pp. 2–1–2–26. doi:10.1145/1238844.1238846. ISBN 978-1-59593-766-7. S2CID 475143. [dead link] ^ "The evolution of an extension language: a history of Lua". 2001. Retrieved 18 December 2008. ^ Figueiredo, L. H.; Ierusalimschy, R.; Celes, W. (December 1996). "Lua: an Extensible Embedded Language. A few metamechanisms replace a host of features". Dr. Dobb's Journal. 21 (12). pp. 26–33. ^ "Programming in Lua : 1". ^ "Lua 5.1 Reference Manual". 2014. Retrieved 27 February 2014. ^ "Lua 5.1 Reference Manual". 2012. Retrieved 16 October 2012. ^ "Lua 5.1 Source Code". 2006. Retrieved 24 March 2011. ^ Ierusalimschy, R.; Figueiredo, L. H.; Celes, W. (2005). "The implementation of Lua 5.0". J. Of Universal Comp. Sci. 11 (7): 1159–1176. ^ Texas Instruments (1990). PC Scheme: Users Guide and Language Reference Manual, Trade Edition. ISBN 0-262-70040-9. ^ Kein-Hong Man (2006). "A No-Frills Introduction to Lua 5.1 VM Instructions" (PDF). Archived from the original (PDF) on 19 June 2010. Retrieved 20 December 2008. ^ a b "Lua 5.2 Reference Manual". Lua.org. Retrieved 23 October 2012. ^ "Changes in the API". Lua 5.2 Reference Manual. Lua.org. Retrieved 9 May 2014. ^ "LuaRocks". LuaRocks wiki. Retrieved 24 May 2009. ^ "Binding Code To Lua". Lua-users wiki. Retrieved 24 May 2009. ^ "Why is Lua considered a game language?". Archived from the original on 20 August 2013. Retrieved 22 April 2017.CS1 maint: BOT: original-url status unknown (link) ^ "5 Game Development Languages You Must Learn Right Now". NarraSoft. 16 October 2020. Retrieved 21 November 2020. ^ "Poll Results". Archived from the original on 7 December 2003. Retrieved 22 April 2017.CS1 maint: BOT: original-url status unknown (link) ^ "Front Line Award Winners Announced". Archived from the original on 15 June 2013. Retrieved 22 April 2017.CS1 maint: BOT: original-url status unknown (link) ^ "Extension:Scribunto - MediaWiki". MediaWiki.org. Retrieved 21 February 2019. ^ "Wikipedia:Lua". Retrieved 19 December 2018. ^ "Wikidata:Infobox Tutorial - Wikidata". www.wikidata.org. Retrieved 21 December 2018. ^ "Language Guide - MoonScript 0.5.0". moonscript.org. Retrieved 25 September 2020. ^ leaf (23 September 2020), leafo/moonscript, retrieved 25 September 2020 ^ a b c d Andre Alves Garzia. "Languages that compile to Lua". AndreGarzia.com. Retrieved 25 September 2020. Further reading[edit] Ierusalimschy, R. (2013). Programming in Lua (3rd ed.). Lua.org. ISBN 978-85-903798-5-0. (The 1st ed. is available online.) Gutschmidt, T. (2003). Game Programming with Python, Lua, and Ruby. Course Technology PTR. ISBN 978-1-59200-077-7. Schuytema, P.; Manyen, M. (2005). Game Development with Lua. Charles River Media. ISBN 978-1-58450-404-7. Jung, K.; Brown, A. (2007). Beginning Lua Programming. Wrox Press. ISBN 978-0-470-06917-2. Archived from the original on 8 July 2018. Retrieved 7 July 2018. Figueiredo, L. H.; Celes, W.; Ierusalimschy, R., eds. (2008). Lua Programming Gems. Lua.org. ISBN 978-85-903798-4-3. Takhteyev, Yuri (2012). Coding Places: Software Practice in a South American City. The MIT Press. ISBN 978-0-262-01807-4. Archived from the original on 2 November 2012. Chapters 6 and 7 are dedicated to Lua, while others look at software in Brazil more broadly. Varma, Jayant (2012). Learn Lua for iOS Game Development. Apress. ISBN 978-1-4302-4662-6. Matheson, Ash (29 April 2003). "An Introduction to Lua". GameDev.net. Archived from the original on 18 December 2012. Retrieved 3 January 2013. Fieldhouse, Keith (16 February 2006). "Introducing Lua". ONLamp.com. O'Reilly Media. Archived from the original on 12 March 2006. Retrieved 28 February 2006. Streicher, Martin (28 April 2006). "Embeddable scripting with Lua". developerWorks. IBM. Quigley, Joseph (1 June 2007). "A Look at Lua". Linux Journal. Hamilton, Naomi (11 September 2008). "The A-Z of Programming Languages: Lua". Computerworld. IDG. Archived from the original on 8 July 2018. Retrieved 7 July 2018. Interview with Roberto Ierusalimschy. Ierusalimschy, Roberto; de Figueiredo, Luiz Henrique; Celes, Waldemar (12 May 2011). "Passing a Language through the Eye of a Needle". ACM Queue. 9 (5): 20–29. doi:10.1145/1978862.1983083. S2CID 19484689. Archived from the original on 8 July 2018. Retrieved 7 July 2018. How the embeddability of Lua impacted its design. Ierusalimschy, Roberto; de Figueiredo, Luiz Henrique; Celes, Waldemar (November 2018). "A Look at the Design of Lua". Communications of the ACM. 61 (11): 114–123. doi:10.1145/3186277. S2CID 53114923. [permanent dead link] Lua papers and theses External links[edit] Luaat Wikipedia's sister projects News from Wikinews Textbooks from Wikibooks Resources from Wikiversity Official website Lua Users, Community Projects in Lua Lua Forum v t e Lua programming language Interpreters and compilers Lua (reference implementation from PUC-Rio) LuaJIT Parrot Package manager LuaRocks Ports and distributions Plua Lua Player Solar2D IDEs Decoda SciTE Comparison of Lua IDEs Applications and frameworks Prosody Torch Tarantool IUP Lua in Wikipedia v t e Free and open-source software General Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Timeline Software packages Audio Bioinformatics Codecs Configuration management Graphics Wireless Geophysics Health Mathematics Operating systems Programming languages Routing Television Video games Web applications E-commerce Android apps iOS apps Commercial Trademarked Formerly proprietary Formerly open-source Community Free software movement History Open-source-software movement Organizations Events Licenses AFL Apache APSL Artistic Beerware BSD Creative Commons CDDL EPL Free Software Foundation GNU GPL GNU LGPL ISC MIT MPL Python Python Software Foundation License Shared Source Initiative Sleepycat Unlicense WTFPL zlib Types and standards Comparison of licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Viral license Challenges Digital rights management Hardware restrictions License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Software patents Software security Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Portal Category Book v t e Programming languages Comparison Timeline History ALGOL APL Assembly BASIC C C++ C# COBOL Go Erlang Forth Fortran Haskell Java JavaScript Kotlin Lisp ML Objective-C Pascal Perl PHP Prolog Python R Ruby Rust SQL Shell Simula Smalltalk Swift more... Category Lists: Alphabetical Categorical Generational Non-English-based Authority control BNF: cb166522948 (data) GND: 7547043-3 LCCN: sh2004007514 Free and open-source software portal Computer programming portal Retrieved from "https://en.wikipedia.org/w/index.php?title=Lua_(programming_language)&oldid=991363577" Categories: Lua (programming language) Brazilian inventions Cross-platform free software Cross-platform software Dynamic programming languages Dynamically typed programming languages Embedded systems Free compilers and interpreters Free computer libraries Free software programmed in C Object-oriented programming languages Pontifical Catholic University of Rio de Janeiro Programming languages Programming languages created in 1993 Prototype-based programming languages Register-based virtual machines Scripting languages Software using the MIT license Hidden categories: All articles with dead external links Articles with dead external links from July 2018 CS1 maint: BOT: original-url status unknown Articles with short description Short description matches Wikidata Articles containing Portuguese-language text All articles lacking reliable references Articles lacking reliable references from October 2020 Articles with dead external links from June 2020 Articles with permanently dead external links Official website different in Wikidata and Wikipedia Wikipedia articles with BNF identifiers Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers Use dmy dates from September 2017 Articles with example C code Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons MediaWiki Meta-Wiki Wikibooks Wikiversity Languages العربية Azərbaycanca বাংলা Bân-lâm-gú Bosanski Català Čeština Dansk Deutsch Eesti Ελληνικά Español Esperanto Euskara فارسی Français Galego 한국어 Հայերեն हिन्दी Bahasa Indonesia Interlingua Íslenska Italiano עברית ქართული Kiswahili Latina Latviešu Magyar മലയാളം Bahasa Melayu Nederlands 日本語 Norsk bokmål ଓଡ଼ିଆ ਪੰਜਾਬੀ پنجابی ភាសាខ្មែរ Polski Português Română Русский Scots Shqip Simple English Slovenčina Slovenščina کوردی Српски / srpski Suomi Svenska தமிழ் Тоҷикӣ Türkçe Удмурт Українська اردو Tiếng Việt 吴语 Zazaki 中文 Edit links This page was last edited on 29 November 2020, at 17:44 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement