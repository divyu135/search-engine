AppleScript - Wikipedia AppleScript From Wikipedia, the free encyclopedia Jump to navigation Jump to search Scripting language This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. Find sources: "AppleScript" – news · newspapers · books · scholar · JSTOR (June 2012) (Learn how and when to remove this template message) AppleScript Paradigm Natural language programming, Scripting Developer Apple Inc. First appeared 1993; 27 years ago (1993) Stable release 2.5 / October 16, 2014; 6 years ago (2014-10-16)[1] Typing discipline Weak, dynamic OS System 7, Mac OS 8, Mac OS 9, macOS License Proprietary (parts available under APSL) Filename extensions .scpt, .scptd, .applescript Website https://developer.apple.com/applescript Influenced by Natural language, HyperTalk AppleScript is a scripting language created by Apple Inc. that facilitates automated control over scriptable Mac applications. First introduced in System 7, it is currently included in all versions of macOS as part of a package of system automation tools.[2][3] The term "AppleScript" may refer to the language itself, to an individual script written in the language, or, informally, to the macOS Open Scripting Architecture that underlies the language.[2][3] Contents 1 Overview 2 History 3 Basic concepts 4 Comments 5 Hello, world! 6 Natural language metaphor 7 Examples of scripts 8 Development tools 8.1 Script editors 8.1.1 From Apple 8.1.2 From third parties 8.2 Script launchers 8.3 Related scripting issues 9 Language essentials 9.1 Classes (data types) 9.2 Language structures 9.2.1 Conditionals 9.2.2 Loops 9.3 Miscellaneous information 10 Open Scripting Architecture 10.1 JavaScript for Automation 11 See also 12 References 13 Further reading 14 External links Overview[edit] AppleScript is primarily a scripting language developed by Apple to do inter-application communication (IAC) using Apple events.[2][3] AppleScript is related to, but different from, Apple events. Apple events are designed to exchange data between and control other applications in order to automate repetitive tasks. AppleScript has some processing abilities of its own, in addition to sending and receiving Apple events to applications. AppleScript can do basic calculations and text processing, and is extensible, allowing the use of scripting additions that add new functions to the language. Mainly, however, AppleScript relies on the functionality of applications and processes to handle complex tasks. As a structured command language, AppleScript can be compared to Unix shells, the Microsoft Windows Script Host, or IBM REXX in its purpose,[citation needed] but it is distinct from all three. Essential to its functionality is the fact that Macintosh applications publish "dictionaries" of addressable objects and operations. AppleScript has some elements of procedural programming, object-oriented programming (particularly in the construction of script objects), and natural language programming tendencies in its syntax, but does not strictly conform to any of these programming paradigms.[3]:xxvi History[edit] In the late 1980s Apple considered using HyperCard's HyperTalk scripting language as the standard language for end-user development across the company and within its classic Mac OS operating system, and for interprocess communication between Apple and non-Apple products.[4] HyperTalk could be used by novices to program a HyperCard stack. Apple engineers recognized that a similar, but more object-oriented scripting language could be designed to be used with any application, and the AppleScript project was born as a spin-off of a research effort to modernize the Macintosh as a whole and finally became part of System 7.[5] AppleScript was released in October 1993 as part of System 7.1.1 (System 7 Pro, the first major upgrade to System 7).[5] QuarkXPress (ver. 3.2) was one of the first major software applications that supported AppleScript. This in turn led to AppleScript being widely adopted within the publishing and prepress world, often tying together complex workflows. This was a key factor in retaining the Macintosh's dominant position in publishing and prepress, even after QuarkXpress and other publishing applications were ported to Microsoft Windows. After some uncertainty about the future of AppleScript on Apple's next generation OS, the move to Mac OS X (around 2002) and its Cocoa frameworks greatly increased the usefulness and flexibility of AppleScript. Cocoa applications allow application developers to implement basic scriptability for their apps with minimal effort, broadening the number of applications that are directly scriptable. At the same time, the shift to the Unix underpinnings and AppleScript's ability to run Unix commands directly, with the do shell script command,[6] allowed AppleScripts much greater control over the operating system itself.[3]:863 AppleScript Studio, released with Mac OS X 10.2 as part of Xcode, and later AppleScriptObjC framework, released in Mac OS X 10.6, allowed users to build Cocoa applications using AppleScript.[3]:969 In a 2006 article, Macworld included AppleScript among its rankings of Apple's 30 most significant products to date, placing it at #17.[7] In a 2013 article for Macworld, veteran Mac software developer and commentator John Gruber concluded his reflection on "the unlikely persistence of AppleScript" by noting: "In theory, AppleScript could be much better; in practice, though, it's the best thing we have that works. It exemplifies the Mac's advantages over iOS for tinkerers and advanced users."[8] In October 2016, longtime AppleScript product manager and automation evangelist Sal Soghoian left Apple when his position was eliminated "for business reasons".[9] Veterans in the Mac community such as John Gruber and Andy Ihnatko generally responded with concern, questioning Apple's commitment to the developer community and pro users.[10] Apple senior vice president of software engineering Craig Federighi responded in an email saying that "We have every intent to continue our support for the great automation technologies in macOS!", though Jeff Gamet at The Mac Observer opined that it did little to assuage his doubt about the future of Apple automation in general and AppleScript in particular.[11] For the time being, AppleScript remains one component of macOS automation technologies, along with Services, Automator, and shell scripting. Basic concepts[edit] AppleScript was designed to be used as an accessible end-user scripting language, offering users an intelligent mechanism to control applications, and to access and modify data and documents. AppleScript uses Apple events, a set of standardized data formats that the Macintosh operating system uses to send information to applications, roughly analogous to sending XPath queries over XML-RPC in the world of web services.[3]:xxvi Apple events allow a script to work with multiple applications simultaneously, passing data between them so that complex tasks can be accomplished without human interaction.[2] For example, an AppleScript to create a simple web gallery might do the following: Open a photo in a photo-editing application (by sending that application an Open File Apple event). Tell the photo-editing application to manipulate the image (e.g. reduce its resolution, add a border, add a photo credit) Tell the photo-editing application to save the changed image in a file in some different folder (by sending that application a Save and/or Close Apple event). Send the new file path (via another Apple event) to a text editor or web editor application Tell that editor application to write a link for the photo into an HTML file. Repeat the above steps for an entire folder of images (hundreds or even thousands of photos). Upload the HTML file and folder of revised photos to a website, by sending Apple events to a graphical FTP client, by using built-in AppleScript commands, or by sending Apple events to Unix FTP utilities. For the user, hundreds or thousands of steps in multiple applications have been reduced to the single act of running the script, and the task is accomplished in much less time and with no possibility of random human error. A large complex script could be developed to run only once, while other scripts are used again and again. An application's scriptable elements are visible in the application's Scripting Dictionary (distributed as part of the application), which can be viewed in any script editor. Elements are generally grouped into suites, according to loose functional relationships between them. There are two basic kinds of elements present in any suite: classes and commands. Classes are scriptable objects—for example, a text editing application will almost certainly have classes for windows, documents, and texts—and these classes will have properties that can be changed (window size, document background color, text font size, etc.), and may contain other classes (a window will contain one or more documents, a document will contain text, a text object will contain paragraphs and words and characters). Commands, by contrast, are instructions that can be given to scriptable objects. The general format for a block of AppleScript is to tell a scriptable object to run a command. All scriptable applications share a few basic commands and objects, usually called the Standard Suite—commands to open, close or save a file, to print something, to quit, to set data to variables—as well as a basic application object that gives the scriptable properties of the application itself. Many applications have numerous suites capable of performing any task the application itself can perform. In exceptional cases, applications may support plugins which include their own scripting dictionaries. AppleScript was designed with the ability to build scripts intuitively by recording user actions. Such AppleScript recordability has to be engineered into the app—the app must support Apple events and AppleScript recording;[12] as Finder supports AppleScript recording, it can be useful for reference. When AppleScript Editor (Script Editor) is open and the Record button clicked, user actions for recordable apps are converted to their equivalent AppleScript commands and output to the Script Editor window. The resulting script can be saved and re-run to duplicate the original actions, or modified to be more generally useful. Comments[edit] Comments can be made multiple ways. A one-line comment can begin with 2 hyphens ( --). In AppleScript 2.0, first released in Mac OS X Leopard, it may also begin with a number sign (#). This permits a self-contained AppleScript script to be stored as an executable text file beginning with the shebang line #!/usr/bin/osascriptExample: --This is a one line comment# So is this! (in Mac OS X Leopard or later) For comments that take up multiple lines, AppleScript uses parentheses with asterisks inside.Example: (* This is amultiplelinecomment *) Hello, world![edit] In AppleScript, the traditional "Hello, World!" program could be written in many different forms, including: display dialog "Hello, world!" -- a modal window with "OK" and "Cancel" buttons-- ordisplay alert "Hello, world!" -- a modal window with a single "OK" button and an icon representing the app displaying the alert-- orsay "Hello, world!" -- an audio message using a synthesized computer voice AppleScript has several user interface options, including dialogs, alerts, and list of choices. (The character ¬, produced by typing ⌥ Option+return in the Script Editor, denotes continuation of a single statement across multiple lines.) -- Dialogset dialogReply to display dialog "Dialog Text" ¬	default answer "Text Answer" ¬	hidden answer false ¬	buttons {"Skip", "Okay", "Cancel"} ¬	default button "Okay" ¬	cancel button "Skip" ¬	with title "Dialog Window Title" ¬	with icon note ¬	giving up after 15 -- Choose from listset chosenListItem to choose from list {"A", "B", "3"} ¬	with title "List Title" ¬	with prompt "Prompt Text" ¬	default items "B" ¬	OK button name "Looks Good!" ¬	cancel button name "Nope, try again" ¬	multiple selections allowed false ¬	with empty selection allowed  -- Alertset resultAlertReply to display alert "Alert Text" ¬	as warning ¬	buttons {"Skip", "Okay", "Cancel"} ¬	default button 2 ¬	cancel button 1 ¬	giving up after 2 Each user interaction method can return the values of buttons clicked, items chosen or text entered for further processing. For example: display alert "Hello, world!" buttons {"Rudely decline", "Happily accept"}set theAnswer to button returned of the resultif theAnswer is "Happily accept" then	beep 5else	say "Piffle!"end if Natural language metaphor[edit] Whereas Apple events are a way to send messages into applications, AppleScript is a particular language designed to send Apple events. In keeping with the objective of ease-of-use for beginners, the AppleScript language is designed on the natural language metaphor, just as the graphical user interface is designed on the desktop metaphor. A well-written AppleScript should be clear enough to be read and understood by anyone, and easily edited. The language is based largely on HyperCard's HyperTalk language, extended to refer not only to the HyperCard world of cards and stacks, but also theoretically to any document. To this end, the AppleScript team introduced the AppleEvent Object Model (AEOM), which specifies the objects any particular application "knows". The heart of the AppleScript language is the use of terms that act as nouns and verbs that can be combined. For example, rather than a different verb to print a page, document or range of pages (such as printPage, printDocument, printRange), AppleScript uses a single "print" verb which can be combined with an object, such as a page, a document or a range of pages. print page 1print document 2print pages 1 thru 5 of document 2 Generally, AEOM defines a number of objects—like "document" or "paragraph"—and corresponding actions—like "cut" and "close". The system also defines ways to refer to properties of objects, so one can refer to the "third paragraph of the document 'Good Day'", or the "color of the last word of the front window". AEOM uses an application dictionary to associate the Apple events with human-readable terms, allowing the translation back and forth between human-readable AppleScript and bytecode Apple events. To discover what elements of a program are scriptable, dictionaries for supported applications may be viewed. (In the Xcode and Script Editor applications, this is under File → Open Dictionary.) To designate which application is meant to be the target of such a message, AppleScript uses a "tell" construct: tell application "Microsoft Word"  quitend tell Alternatively, the tell may be expressed in one line by using an infinitive: tell application "Microsoft Word" to quit For events in the "Core Suite" (activate, open, reopen, close, print, and quit), the application may be supplied as the direct object to transitive commands: quit application "Microsoft Word" The concept of an object hierarchy can be expressed using nested blocks: tell application "QuarkXPress"  tell document 1    tell page 2      tell text box 1        set word 5 to "Apple"      end tell    end tell  end tellend tell The concept of an object hierarchy can also be expressed using nested prepositional phrases: pixel 7 of row 3 of TIFF image "my bitmap" which in another programming language might be expressed as sequential method calls, like in this pseudocode: getTIFF("my bitmap").getRow(3).getPixel(7); AppleScript includes syntax for ordinal counting, "the first paragraph", as well as cardinal, "paragraph one". Likewise, the numbers themselves can be referred to as text or numerically, "five", "fifth" and "5" are all supported; they are synonyms in AppleScript. Also, the word "the" can legally be used anywhere in the script in order to enhance readability: it has no effect on the functionality of the script. Examples of scripts[edit] A failsafe calculator: tell application "Finder"	-- Set variables	set the1 to text returned of (display dialog "1st" default answer "Number here" buttons {"Continue"} default button 1)	set the2 to text returned of (display dialog "2nd" default answer "Number here" buttons {"Continue"} default button 1)	try		set the1 to the1 as integer		set the2 to the2 as integer	on error		display dialog "You may only input numbers into a calculator." with title "ERROR" buttons {"OK"} default button 1		return	end try		-- Add?	if the button returned of (display dialog "Add?" buttons {"No", "Yes"} default button 2) is "Yes" then		set ans to (the1 + the2)		display dialog ans with title "Answer" buttons {"OK"} default button 1		say ans	-- Subtract?		else if the button returned of (display dialog "Subtract?" buttons {"No", "Yes"} default button 2) is "Yes" then		set ans to (the1 - the2)		display dialog ans with title "Answer" buttons {"OK"} default button 1		say ans	-- Multiply?		else if the button returned of (display dialog "Multiply?" buttons {"No", "Yes"} default button 2) is "Yes" then		set ans to (the1 * the2)		display dialog ans with title "Answer" buttons {"OK"} default button 1		say ans	-- Divide?		else if the button returned of (display dialog "Divide?" buttons {"No", "Yes"} default button 2) is "Yes" then		set ans to (the1 / the2)		display dialog ans with title "Answer" buttons {"OK"} default button 1		say ans	else		delay 1		say "You haven't selected a function. The operation has cancelled."	end if	end tell A simple username and password dialog box sequence. Here, the username is John and password is app123: tell application "Finder"	set passAns to "app123"	set userAns to "John"	if the text returned of (display dialog "Username" default answer "") is userAns then		display dialog "Correct" buttons {"Continue"} default button 1		if the text returned of (display dialog "Username : John" & return & "Password" default answer "" buttons {"Continue"} default button 1 with hidden answer) is passAns then			display dialog "Access granted" buttons {"OK"} default button 1		else			display dialog "Incorrect password" buttons {"OK"} default button 1		end if	else		display dialog "Incorrect username" buttons {"OK"} default button 1	end ifend tell Development tools[edit] Script editors[edit] Script editors provide a unified programing environment for AppleScripts, including tools for composing, validating, compiling, running, and debugging scripts. They also provide mechanisms for opening and viewing AppleScript dictionaries from scriptable applications, saving scripts in a number of formats (compiled script files, application packages, script bundles, and plain text files), and usually provide features such as syntax highlighting and prewritten code snippets. From Apple[edit] AppleScript Editor (Script Editor) The editor for AppleScript packaged with macOS, called AppleScript Editor in Mac OS X Snow Leopard (10.6) through OS X Mavericks (10.9) and Script Editor in all earlier and later versions of macOS. Scripts are written in document editing windows where they can be compiled and run, and these windows contain various panes in which logged information, execution results, and other information is available for debugging purposes. Access to scripting dictionaries and prewritten code snippets is available through the application menus. Since OS X Yosemite (10.10), Script Editor includes the ability to write in both AppleScript and JavaScript.[13] Xcode A suite of tools for developing applications with features for editing AppleScripts or creating full-fledged applications written with AppleScript. From third parties[edit] Script Debugger, from Late Night Software A third-party commercial IDE for AppleScript. Script Debugger is a more advanced AppleScript environment that allows the script writer to debug AppleScripts via single stepping, breakpoints, stepping in and out of functions/subroutines, variable tracking, etc. Script Debugger also contains an advanced dictionary browser that allows the user to see the dictionary in action in real world situations. That is, rather than just a listing of what the dictionary covers, one can open a document in Pages, for example, and see how the dictionary's terms apply to that document, making it easier to determine which parts of the dictionary to use. Script Debugger is not designed to create scripts with a GUI, other than basic alerts and dialogs, but is focused more on the coding and debugging of scripts. Smile and SmileLab A third-party freeware/commercial IDE for AppleScript, itself written entirely in AppleScript.[14] Smile is free, and primarily designed for AppleScript development. SmileLab is commercial software with extensive additions for numerical analysis, graphing, machine automation and web production. Smile and SmileLab use an assortment of different windows—AppleScript windows for running and saving full scripts, AppleScript terminals for testing code line-by-line, unicode windows for working with text and XML. Users can create complex interfaces—called dialogs—for situations where the built-in dialogs in AppleScript are insufficient. ASObjC Explorer 4, from Shane Stanley A discontinued third-party commercial IDE for AppleScript, especially for AppleScriptObjC.[15] The main feature is Cocoa-object/event logging, debugging and code-completion. Users can read Cocoa events and objects like other scriptable applications. This tool was originally built for AppleScript Libraries (available in OS X Mavericks). AppleScript Libraries aims for re-usable AppleScript components and supports built-in AppleScript dictionary (sdef). ASObjC Explorer 4 can be an external Xcode script editor, too. FaceSpan, from Late Night Software A discontinued third-party commercial IDE for creating AppleScript applications with graphic user interfaces.[16] Script launchers[edit] AppleScripts can be run from a script editor, but it is usually more convenient to run scripts directly, without opening a script editor application. There are a number of options for doing so: Applets AppleScripts can be saved from a script editor as applications (called applets, or droplets when they accept input via drag and drop).[3]:69 Applets can be run from the Dock, from the toolbar of Finder windows, from Spotlight, from third-party application launchers, or from any other place where applications can be run. Folder actions Using AppleScript folder actions, scripts can be launched when specific changes occur in folders (such as adding or removing files).[17] Folder actions can be assigned by clicking on a folder and choosing Folder Actions Setup... from the contextual menu; the location of this command differs slightly in Mac OS X 10.6.x from earlier versions. This same action can be achieved with third-party utilities such as Hazel.[18] Hotkey launchers Keyboard shortcuts can be assigned to AppleScripts in the script menu using the Keyboard & Mouse Settings Preference Pane in System Preferences. In addition, various third-party utilities are available—Alfred,[19] FastScripts,[20] Keyboard Maestro,[21] QuicKeys,[22] Quicksilver,[23] TextExpander[24]—which can run AppleScripts on demand using key combinations. Script menu This system-wide menu provides access to AppleScripts from the macOS menu bar, visible no matter what application is running.[25] (In addition, many Apple applications, some third party applications, and some add-ons provide their own script menus. These may be activated in different ways, but all function in essentially the same manner.) Selecting a script in the script menu launches it. Since Mac OS X 10.6.x, the system-wide script menu can be enabled from the preferences of Script Editor; in prior versions of Mac OS X, it could be enabled from the AppleScript Utility application. When first enabled, the script menu displays a default library of fairly generic, functional AppleScripts, which can also be opened in Script Editor and used as examples for learning AppleScript. Scripts can be organized so that they only appear in the menu when particular applications are in the foreground. Unix command line and launchd AppleScripts can be run from the Unix command line, or from launchd for scheduled tasks,[3]:716 by using the osascript command line tool.[26] The osascript tool can run compiled scripts (.scpt files) and plain text files (.applescript files—these are compiled by the tool at runtime). Script applications can be run using the Unix open command. Related scripting issues[edit] AppleScript Libraries Re-usable AppleScript modules (available since OS X Mavericks), written in AppleScript or AppleScriptObjC and saved as script files or bundles in certain locations,[27] that can be called from other scripts. When saved as a bundle, a library can include an AppleScript dictionary (sdef) file,[28] thus functioning like a scripting addition but written in AppleScript or AppleScriptObjC. AppleScript Studio A framework for attaching Cocoa interfaces to AppleScript applications, part of the Xcode package in Mac OS X 10.4 and 10.5, now deprecated in favor of AppleScriptObjC.[29]:438 AppleScriptObjC A Cocoa development software framework, also called AppleScript/Objective-C or ASOC,[30] part of the Xcode package since Mac OS X Snow Leopard.[31] AppleScriptObjC allows AppleScripts to use Cocoa classes and methods directly.[32] The following table shows the availability of AppleScriptObjC in various versions of macOS:[33] Where AppleScriptObjC can be used in each macOS version In Xcode In applets In AppleScript Libraries In Script Editor 10.6 10.7 10.8 10.9 10.10 Automator A graphical, modular editing environment in which workflows are built up from actions. It is intended to duplicate many of the functions of AppleScript without the necessity for programming knowledge. Automator has an action specifically designed to contain and run AppleScripts, for tasks that are too complex for Automator's simplified framework.[34] Scriptable core system applications These background-only applications, packaged with macOS, are used to allow AppleScript to access features that would not normally be scriptable. As of Mac OS X 10.6.3 they include the scriptable applications for VoiceOver (scriptable auditory and braille screen reader package), System Events (control of non-scriptable applications and access to certain system functions and basic file operations), Printer Setup Utility (scriptable utility for handling print jobs), Image Events (core image manipulation), HelpViewer (scriptable utility for showing help displays), Database Events (minimal SQLite3 database interface), and AppleScript Utility (for scripting a few AppleScript related preferences), as well as a few utility applications used by the system. Scripting Additions (OSAX) Plug-ins for AppleScript developed by Apple or third parties.[35] They are designed to extend the built-in command set, expanding AppleScript's features and making it somewhat less dependent on functionality provided by applications. macOS includes a collection of scripting additions referred to as Standard Additions (StandardAdditions.osax) that adds a set of commands and classes that are not part of AppleScript's core features, including user interaction dialogs, reading and writing files, file system commands, date functions, and text and mathematical operations; without this OSAX, AppleScript would have no capacity to perform many basic actions not directly provided by an application. Language essentials[edit] Classes (data types)[edit] While applications can define specialized classes (or data types), AppleScript also has a number of built-in classes. These basic data classes are directly supported by the language and tend to be universally recognized by scriptable applications. The most common ones are as follows: Basic objects application: an application object, used mostly as a specifier for tell statements (tell application "Finder" …). script: a script object. Script objects are containers for scripts. Every AppleScript creates a script object when run, and script objects may be created within AppleScripts. class: a meta-object that specifies the type of other objects. reference: an object that encapsulates an unevaluated object specifier that may or may not point to a valid object. Can be evaluated on-demand by accessing its contents property. Standard data objects constant: a constant value. There are a number of language-defined constants, such as pi, tab, and linefeed. boolean: a Boolean true/false value. Actually a subclass of constant. number: a rarely used abstract superclass of integer and real. integer: an integer. Can be manipulated with built-in mathematical operators. real: a floating-point (real) number. Can be manipulated with built-in mathematical operators. date: a date and time. text: text. In versions of AppleScript before 2.0 (Mac OS X 10.4 and below) the text class was distinct from string and Unicode text, and the three behaved somewhat differently; in 2.0 (10.5) and later, they are all synonyms and all text is handled as being UTF-16 (“Unicode”)-encoded.[36] Containers list: an ordered list of objects. Can contain any class, including other lists and classes defined by applications. record: a keyed list of objects. Like a list, except structured as key-value pairs. Runtime keyed access is unsupported; all keys must be compile-time constant identifiers. File system alias: a reference to a file system object (file or folder). The alias will maintain its link to the object if the object is moved or renamed. file: a reference to a file system object (file or folder). This is a static reference, and can point to an object that does not currently exist. POSIX file: a reference to a file system object (file or folder), in plain text, using Unix (POSIX)-style slash (/) notation. Not a true data type, as AppleScript automatically converts POSIX files to ordinary files whenever they are used.[37] Miscellaneous RGB color: specifies an RGB triplet (in 16-bit high color format), for use in commands and objects that work with colors. unit types: class that converts between standard units. For instance, a value can be defined as square yards, then converted to square feet by casting between unit types (using the as operator). Language structures[edit] Many AppleScript processes are managed by blocks of code, where a block begins with a command command and ends with an end command statement. The most important structures are described below. Conditionals[edit] AppleScript offers two kinds of conditionals. -- Simple conditionalif x < 1000 then set x to x + 1-- Compound conditionalif x is greater than 3 then     -- commandselse     -- other commandsend if Loops[edit] The repeat loop of AppleScript comes in several slightly different flavors. They all execute the block between repeat and end repeat lines a number of times. The looping can be prematurely stopped with command exit repeat. Repeat forever. repeat     -- commands to be repeatedend repeat Repeat a given number of times. repeat 10 times     -- commands to be repeatedend repeat Conditional loops. The block inside repeat while loop executes as long as the condition evaluates to true. The condition is re-evaluated after each execution of the block. The repeat until loop is otherwise identical, but the block is executed as long as the condition evaluates to false. set x to 5repeat while x > 0     set x to x - 1end repeatset x to 5repeat until x ≤ 0     set x to x - 1end repeat Loop with a variable. When starting the loop, the variable is assigned to the start value. After each execution of the block, the optional step value is added to the variable. Step value defaults to 1. -- repeat the block 2000 times, i gets all values from 1 to 2000repeat with i from 1 to 2000     -- commands to be repeatedend repeat-- repeat the block 4 times, i gets values 100, 75, 50 and 25repeat with i from 100 to 25 by -25    -- commands to be repeated end repeat Enumerate a list. On each iteration set the loopVariable to a new item in the given list set total to 0repeat with x in {1, 2, 3, 4, 5}	set total to total + xend repeat Application targeting Error handling -- Simple formtell application "Safari" to activate-- Compoundtell application "MyApp"     -- commands for append tell try     -- commands to be testedon error     -- error commands end try One important variation on this block structure is in the form of on —end ... blocks that are used to define handlers (function-like subroutines). Handlers begin with on functionName() and ending with end functionName, and are not executed as part of the normal script flow unless called from somewhere in the script. Function handler Folder actions block Run handler on myFunction(parameters...)     -- subroutine commands end myFunction on adding folder items to thisFolder after receiving theseItems     -- commands to apply to the folder or items 	end adding folder items to on run     -- commandsend run Handlers can also be defined using "to" in place of "on" and can be written to accept labeled parameters, not enclosed in parens. Handler with labeled parameters Handler using "to" and labeled parameters on rock around the clock	display dialog (clock as string)end rock-- called with:rock around the current date to check for yourNumber from bottom thru top	if bottom ≤ yourNumber and yourNumber ≤ top then		display dialog "Congratulations! You scored."	end ifend check--called with:check for 8 from 7 thru 10 There are four types of predefined handlers in AppleScript—run, open, idle, and quit—each of which is created in the same way as the run handler shown above. Run handler Defines the main code of the script, which is called when the script is run. Run handler blocks are optional, unless arguments are being passed to the script. If an explicit run handler block is omitted, then all code that is not contained inside handler blocks is executed as though it were in an implicit run handler. Open handler Defined using "on open theItems". on open theItems     repeat with thisItem in theItems         tell application "Finder" to update thisItem     end repeat end open When a script containing an "open handler' is saved as an applet, the applet becomes a droplet. A droplet can be identified in the Finder by its icon, which includes an arrow, indicating items can be dropped onto the icon. The droplet's open handler is executed when files or folders are dropped onto droplet's icon. References to the items dropped on the droplet's icon are passed to the droplet's script as the parameter of the open handler. A droplet can also be launched the same way as an ordinary applet, executing its run handler. Idle handler A subroutine that is run periodically by the system when the application is idle. on idle     --code to execute when the script's execution has completed  return 60 -- number of seconds to pause before executing idle handler againend idle An idle handler can be used in applets or droplets saved as stay-open applets, and is useful for scripts that watch for particular data or events. The length of the idle time is 30 seconds by default,[38] but can be changed by including a 'return x' statement at the end of the subroutine, where x is the number of seconds the system should wait before running the handler again. Quit handler A handler that is run when the applet receives a Quit request. This can be used to save data or do other ending tasks before quitting. on quit     --commands to execute before the script quits  continue quit -- required for the script to actually quitend quit Script objects Script objects may be defined explicitly using the syntax: script scriptName     -- commands and handlers specific to the scriptend script Script objects can use the same 'tell' structures that are used for application objects, and can be loaded from and saved to files. Runtime execution time can be reduced in some cases by using script objects. Miscellaneous information[edit] Variables are not strictly typed, and do not need to be declared. Variables can take any data type (including scripts and functions). The following commands are examples of the creation of variables: set variable1 to 1 -- create an integer variable called variable1set variable2 to "Hello" -- create a text variable called variable2copy {17, "doubleday"} to variable3 -- create a list variable called variable3set {variable4, variable5} to variable3 -- copy the list items of variable3 into separate variables variable4 and variable5set variable6 to script myScript -- set a variable to an instance of a script Script objects are full objects—they can encapsulate methods and data and inherit data and behavior from a parent script. Subroutines cannot be called directly from application tell blocks. Use the 'my' or 'of me' keywords to do so. tell application "Finder"    set x to my myHandler()    -- or    set x to myHandler() of meend tellon myHandler()    --commandsend myHandler Using the same technique for scripting addition commands can reduce errors and improve performance. tell application "Finder"	set anyNumber to my (random number from 5 to 50)end tell Open Scripting Architecture[edit] An important aspect of the AppleScript implementation is the Open Scripting Architecture (OSA).[39] Apple provides OSA for other scripting languages and third-party scripting/automation products such as QuicKeys and UserLand Frontier, to function on an equal status with AppleScript. AppleScript was implemented as a scripting component, and the basic specs for interfacing such components to the OSA were public, allowing other developers to add their own scripting components to the system. Public client APIs for loading, saving and compiling scripts would work the same for all such components, which also meant that applets and droplets could hold scripts in any of those scripting languages. One feature of the OSA is scripting additions, or OSAX for Open Scripting Architecture eXtension,[35] which were inspired by HyperCard's External Commands. Scripting additions are libraries that allow programmers to extend the function of AppleScript. Commands included as scripting additions are available system-wide, and are not dependent on an application (see also § AppleScript Libraries). The AppleScript Editor is also able to directly edit and run some of the OSA languages. JavaScript for Automation[edit] This section needs expansion with: comparison of JXA and AppleScript scripting. You can help by adding to it. (May 2017) Under OS X Yosemite and later versions of macOS, the JavaScript for Automation (JXA) component remains the only serious OSA language alternative to AppleScript,[13] though the Macintosh versions of Perl, Python, Ruby, and Tcl all support native means of working with Apple events without being OSA components.[29]:516 JXA also provides an Objective-C (and C language) foreign language interface.[13] Being an environment based on WebKit's JavaScriptCore engine, the JavaScript feature set is in sync with the system Safari browser engine. JXA provides a JavaScript module system and it is also possible to use CommonJS modules via browserify.[40] See also[edit] Computer programming portal BBEdit — a highly scriptable text editor References[edit] ^ "OS X 10.10 Yosemite release date". Retrieved November 16, 2014. ^ a b c d Goldstein, Adam (2005). AppleScript: the missing manual. Sebastopol, CA: O'Reilly Media. ISBN 0596008503. OCLC 56912218. ^ a b c d e f g h i Sanderson, Hamish; Rosenthal, Hanaan (2009). Learn AppleScript: the comprehensive guide to scripting and automation on Mac OS X (3rd ed.). Berkeley: Apress. doi:10.1007/978-1-4302-2362-7_27. ISBN 9781430223610. OCLC 308193726. ^ Flynn, Laurie (February 27, 1989). "Apple Ponders Standardizing on HyperTalk". InfoWorld. p. 31. ^ a b Cook, William (2007). "AppleScript" (PDF). History of Programming Languages (HOPL III). Proceedings of the third ACM SIGPLAN conference. Association for Computing Machinery: 1–21. doi:10.1145/1238844.1238845. ISBN 9781595937667. S2CID 220938191. ^ "AppleScript Language Guide commands reference: do shell script". developer.apple.com. Retrieved September 15, 2019. ^ "Apple's greatest hits: 30 significant products". macworld.com. Retrieved September 12, 2019. ^ Gruber, John (March 2013). "The unlikely persistence of AppleScript". Macworld. 30 (3): 100. ^ Lovejoy, Ben (November 17, 2016). "Sal Soghoian says 'ask Apple' about future of Mac user automation as company eliminates position". 9to5mac.com. Retrieved May 8, 2017. ^ Evans, Jonny (November 17, 2016). "Does Apple really want to kill Automator, AppleScript? Shock termination of veteran Apple developer guru sends shockwaves across the Mac community". Computerworld.com. Retrieved May 8, 2017. ^ Gamet, Jeff (November 23, 2016). "Apple's intent isn't the same as committing to mac automation". macobserver.com. Retrieved May 8, 2017. ^ "Scriptable Applications". developer.apple.com. Retrieved July 26, 2018. ^ a b c Siracusa, John (October 16, 2014). "OS X 10.10 Yosemite: The Ars Technica Review: JavaScript automation". Ars Technica. Retrieved May 8, 2017. ^ "Smile and SmileLab Home Page". satimage.fr. Retrieved May 8, 2017. ^ "ASObjC Explorer 4 Discontinued". macosxautomation.com. Archived from the original on June 21, 2017. Retrieved May 8, 2017. ^ "Mark Alldritt's Journal » FaceSpan". blog.latenightsw.com. Retrieved May 8, 2017. ^ "AppleScript Language Guide: Folder Actions Reference". developer.apple.com. Retrieved May 8, 2017. ^ Miller, Dan (December 22, 2010). "Capsule review: Hazel 2.3". Macworld.com. Retrieved May 8, 2017. ^ Beam, Brian (February 10, 2015). "Alfred review: This Mac app launcher continues to shine, but Alfred Remote doesn't stack up". Macworld.com. Retrieved May 10, 2017. ^ Frakes, Dan (June 2, 2011). "Capsule review: FastScripts 2.5". Macworld.com. Retrieved May 8, 2017. ^ Breen, Christopher (June 4, 2013). "Mac Gems: Keyboard Maestro 6 is a genius at repetitive tasks". Macworld.com. Retrieved May 10, 2017. ^ Breen, Christopher (May 7, 2010). "Capsule review: QuicKeys 4". Macworld.com. Retrieved May 8, 2017. ^ "AppleScripts – Quicksilver Wiki". qsapp.com. Retrieved May 10, 2017. ^ Fleishman, Glenn (June 12, 2015). "TextExpander 5 review". Macworld.com. Retrieved May 8, 2017. ^ "Mac Automation Scripting Guide: Using the Systemwide Script Menu". developer.apple.com. Retrieved May 8, 2017. ^ "osascript(1) Mac OS X Manual Page". developer.apple.com. Retrieved May 8, 2017. ^ "AppleScript Libraries". macosautomation.com. Retrieved May 8, 2017. ^ "WWDC 2013 Session 416: Introducing AppleScript Libraries". asciiwwdc.com. Retrieved May 8, 2017. ^ a b Neuburg, Matt (2006). AppleScript: the definitive guide (2nd ed.). Beijing: O'Reilly Media. ISBN 0596102119. OCLC 68694976. ^ Tsai, Michael (September 29, 2014). "AppleScript and Yosemite". mjtsai.com. Retrieved May 9, 2017. ^ "AppleScriptObjC Release Notes". developer.apple.com. Retrieved May 8, 2017. ^ Waldie, Ben (September 6, 2012). "Building a basic AppleScriptObjC (Cocoa-AppleScript) application with Xcode". peachpit.com. Retrieved May 9, 2017. ^ Table adapted from: Naganoya, Takaaki. "ASObjCExtras Scripting Guide" (PDF). piyocast.com. Retrieved May 9, 2017. ^ "Introduction to Automator AppleScript Actions Tutorial". developer.apple.com. Retrieved May 8, 2017. ^ a b "Technical Note TN1164: Scripting Additions for Mac OS X". developer.apple.com. Retrieved May 8, 2017. ^ "AppleScript Release Notes: 10.5 Changes". developer.apple.com. Retrieved May 8, 2017. ^ "POSIX file — Class Reference — AppleScript Language Guide". developer.apple.com. Retrieved January 8, 2018. ^ "AppleScript Language Guide: Handlers in Script Applications". developer.apple.com. Retrieved July 21, 2013. ^ "AppleScript Overview: Open Scripting Architecture". developer.apple.com. Retrieved May 8, 2017. ^ "Importing Scripts". GitHub. JXA-Cookbook. December 6, 2019. Retrieved December 9, 2019. Further reading[edit] "AppleScript Language Guide". developer.apple.com. 2016. Retrieved May 9, 2017. Older version (2015) in PDF format available from: CiteSeerx: 10.1.1.697.5220 Munro, Mark Conway (2010). AppleScript. Developer Reference. Wiley. ISBN 978-0-470-56229-1. Rosenthal, Hanaan; Sanderson, Hamish (2010). Learn AppleScript: The Comprehensive Guide to Scripting and Automation on Mac OS X (Third ed.). Apress. ISBN 978-1-4302-2361-0. Soghoian, Sal; Cheeseman, Bill (2009). Apple Training Series: AppleScript 1-2-3. Peachpit Press. ISBN 978-0-321-14931-2. Cook, William (2007). "AppleScript" (PDF). History of Programming Languages (HOPL III). Proceedings of the third ACM SIGPLAN conference. ACM: 1–21. doi:10.1145/1238844.1238845. ISBN 9781595937667. S2CID 220938191. Ford Jr., Jerry Lee (2007). AppleScript Programming for the Absolute Beginner. Course Technology. ISBN 978-1-59863-384-9. Neuburg, Matt (2006). AppleScript: The Definitive Guide. O'Reilly Media. ISBN 0-596-10211-9. Goldstein, Adam (2005). AppleScript: The Missing Manual. O'Reilly Media. ISBN 0-596-00850-3. Trinko, Tom (2004). AppleScript for Dummies. For Dummies. ISBN 978-0-7645-7494-8. External links[edit] Wikibooks has a book on the topic of: AppleScript AppleScript at Curlie "AppleScript Overview". developer.apple.com. 2007. Retrieved November 7, 2020. "AppleScript for Python Programmers (Comparison Chart)". aurelio.net. 2005. Retrieved May 9, 2017. "Doug's AppleScripts for iTunes". dougscripts.com. Retrieved May 9, 2017. "Mac OS X Automation". macosautomation.com. Retrieved May 9, 2017. "MacScripter AppleScript community". macscripter.net. Retrieved May 9, 2017. v t e macOS History Architecture Components Server Software Versions Server 1.0 Hera Public Beta Kodiak 10.0 Cheetah 10.1 Puma 10.2 Jaguar 10.3 Panther 10.4 Tiger 10.5 Leopard 10.6 Snow Leopard 10.7 Lion 10.8 Mountain Lion 10.9 Mavericks 10.10 Yosemite 10.11 El Capitan 10.12 Sierra 10.13 High Sierra 10.14 Mojave 10.15 Catalina 11 Big Sur Applications App Store Automator Calculator Calendar Chess Contacts Control Center Dictionary DVD Player FaceTime Finder Game Center Grapher Home Launchpad Mail Messages News Music Notes Notification Center Podcasts Photo Booth Photos Preview Quicktime Player Reminders Safari (version history) Siri Stickies TextEdit Time Machine Discontinued Dashboard Front Row iChat iPhoto iSync iTunes (history) Sherlock Utilities Activity Monitor AirPort Utility AppleScript Editor Archive Utility Audio MIDI Setup Bluetooth File Exchange Boot Camp ColorSync Configurator Console Crash Reporter DigitalColor Meter Directory Utility DiskImageMounter Disk Utility Font Book Grab Help Viewer Image Capture Installer Keychain Access Migration Assistant Network Utility ODBC Administrator Screen Sharing System Preferences System Information Terminal Universal Access VoiceOver Discontinued Software Update Remote Install Mac OS X Technology and user interface AirDrop Apple File System Apple menu Apple Push Notification service AppleScript Aqua Audio Units AVFoundation Bonjour Bundle CloudKit Cocoa ColorSync Command key Core Animation Core Audio Core Data Core Foundation Core Image Core OpenGL Core Text Core Video CUPS Cover Flow Darwin Dock FileVault Fonts Gatekeeper Grand Central Dispatch icns iCloud Kernel panic Keychain launchd Mach-O Menu extra Metal Mission Control Night Shift OpenCL Option key Preference Pane Property list Quartz Quick Look Rosetta Smart Folders Speakable items Spotlight Stacks System Integrity Protection Uniform Type Identifier Universal binary WebKit XNU XQuartz Deprecated HFS+ Discontinued BootX Brushed metal Carbon Classic Environment Inkwell QuickTime Spaces Xgrid Retrieved from "https://en.wikipedia.org/w/index.php?title=AppleScript&oldid=989631272" Categories: Macintosh operating systems development MacOS development Proprietary software Scripting languages Programming languages High-level programming languages Programming languages created in 1993 1993 software Dynamic programming languages Dynamically typed programming languages Hidden categories: Articles with short description Short description is different from Wikidata Use mdy dates from March 2020 Articles needing additional references from June 2012 All articles needing additional references All articles with unsourced statements Articles with unsourced statements from November 2019 Articles to be expanded from May 2017 All articles to be expanded Articles using small message boxes Articles with Curlie links Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages العربية Čeština Deutsch Ελληνικά Español فارسی Français 한국어 Italiano עברית Bahasa Melayu Nederlands 日本語 Norsk bokmål Polski Português Română Русский Shqip Simple English Suomi Svenska Українська 中文 Edit links This page was last edited on 20 November 2020, at 03:03 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement