Jakarta EE - Wikipedia Jakarta EE From Wikipedia, the free encyclopedia (Redirected from Java Platform, Enterprise Edition) Jump to navigation Jump to search This article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages) This article's lead section does not adequately summarize key points of its contents. Please consider expanding the lead to provide an accessible overview of all important aspects of the article. (August 2016) This article provides insufficient context for those unfamiliar with the subject. Please help improve the article by providing more context for the reader. (May 2018) (Learn how and when to remove this template message) (Learn how and when to remove this template message) Jakarta EE Developer(s) Eclipse Foundation Player software Java Programming language(s) Java Application(s) Application server Status Active License Eclipse Public License or GNU General Public License w/Classpath exception Java platform editions Java Card Java ME (Micro) Java SE (Standard) Jakarta EE (Enterprise) JavaFX (bundled in JRE from 8 to 10 but separately for JavaFX 1.x, 2.x and 11) PersonalJava (Discontinued) v t e Jakarta EE, formerly Java Platform, Enterprise Edition (Java EE) and Java 2 Platform, Enterprise Edition (J2EE) is a set of specifications, extending Java SE 8[1] with specifications for enterprise features such as distributed computing and web services.[2] Jakarta EE applications are run on reference runtimes, that can be microservices or application servers, which handle transactions, security, scalability, concurrency and management of the components it is deploying. Jakarta EE is defined by its specification. The specification defines APIs (application programming interface) and their interactions. As with other Java Community Process specifications, providers must meet certain conformance requirements in order to declare their products as Jakarta EE compliant. Examples of contexts in which Jakarta EE referencing runtimes are used are: e-commerce, accounting, banking information systems. Contents 1 History 2 Specifications 2.1 Web specifications 2.2 Web service specifications 2.3 Enterprise specifications 2.4 Other specifications 3 Web profile 4 Certified referencing runtimes 5 Code sample 5.1 Example Backing Bean class 5.2 Example Data Access Object class 5.3 Example Entity class 6 See also 7 References 8 External links History[edit] The platform was known as Java 2 Platform, Enterprise Edition or J2EE from version 1.2, until the name was changed to Java Platform, Enterprise Edition or Java EE in version 1.5. Java EE was maintained by Oracle under the Java Community Process. On September 12, 2017, Oracle Corporation announced that it would submit Java EE to the Eclipse Foundation.[3]The Eclipse top-level project has been named Eclipse Enterprise for Java (EE4J).[4] The Eclipse Foundation was forced to change the name because Oracle owns the trademark for the name "Java" and renamed the Java EE platform to Jakarta EE.[5][6] The name should not be confused with the former Jakarta Project which fostered a number of current and former Java projects at the Apache Software Foundation. J2EE 1.2 (December 12, 1999) J2EE 1.3 (September 24, 2001) J2EE 1.4 (November 11, 2003) Java EE 5 (May 11, 2006) Java EE 6 (December 10, 2009) Java EE 7 (May 28, 2013,[7] but April 5, 2013 according to spec document. June 12, 2013 was the planned kickoff date[8]) Java EE 8 (August 31, 2017[9]) Jakarta EE 8 (September 10, 2019) - fully compatible with Java EE 8[10] Jakarta EE 9 (Target: December 8, 2020)[11][12] Specifications[edit] Jakarta EE includes several specifications that serve different purposes, like generating web pages, reading and writing from a database in a transactional way, managing distributed queues. The Jakarta EE APIs include several technologies that extend the functionality of the base Java SE APIs, such as Jakarta Enterprise Beans, connectors, servlets, Jakarta Server Pages and several web service technologies. Web specifications[edit] Jakarta Servlet: defines how to manage HTTP requests, in a synchronous or asynchronous way. It is low level and other Jakarta EE specifications rely on it; Jakarta WebSocket: API specification that defines a set of APIs to service WebSocket connections; Jakarta Server Faces: a technology for constructing user interfaces out of components; Jakarta Expression Language (EL) is a simple language originally designed to satisfy the specific needs of web application developers. It is used specifically in Jakarta Server Faces to bind components to (backing) beans and in Contexts and Dependency Injection to name beans, but can be used throughout the entire platform. Web service specifications[edit] Jakarta RESTful Web Services provides support in creating web services according to the Representational State Transfer (REST) architectural pattern; Jakarta JSON Processing is a set of specifications to manage information encoded in JSON format; Jakarta JSON Binding provides specifications to convert JSON information into or from Java classes; Jakarta XML Binding allows mapping XML into Java objects; Jakarta XML Web Services can be used to create SOAP web services. Enterprise specifications[edit] Jakarta Contexts and Dependency Injection (CDI) is a specification to provide a dependency injection container; Jakarta Enterprise Beans (EJB) specification defines a set of lightweight APIs that an object container (the EJB container) will support in order to provide transactions (using JTA), remote procedure calls (using RMI or RMI-IIOP), concurrency control, dependency injection and access control for business objects. This package contains the Jakarta Enterprise Beans classes and interfaces that define the contracts between the enterprise bean and its clients and between the enterprise bean and the ejb container. Jakarta Persistence (JPA) are specifications about object-relational mapping between relation database tables and Java classes. Jakarta Transactions (JTA) contains the interfaces and annotations to interact with the transaction support offered by Jakarta EE. Even though this API abstracts from the really low-level details, the interfaces are also considered somewhat low-level and the average application developer in Jakarta EE is either assumed to be relying on transparent handling of transactions by the higher level EJB abstractions, or using the annotations provided by this API in combination with CDI managed beans. Jakarta Messaging (JMS) provides a common way for Java programs to create, send, receive and read an enterprise messaging system's messages. Other specifications[edit] Validation: This package contains the annotations and interfaces for the declarative validation support offered by the Bean Validation API. Bean Validation provides a unified way to provide constraints on beans (e.g. JPA model classes) that can be enforced cross-layer. In Jakarta EE, JPA honors bean validation constraints in the persistence layer, while JSF does so in the view layer. Jakarta Batch provides the means for batch processing in applications to run long running background tasks that possibly involve a large volume of data and which may need to be periodically executed. Jakarta Connectors is a Java-based tool for connecting application servers and enterprise information systems (EIS) as part of enterprise application integration (EAI). This is a low-level API aimed at vendors that the average application developer typically does not come in contact with. Web profile[edit] In an attempt to limit the footprint of web containers, both in physical and in conceptual terms, the web profile was created, a subset of the Jakarta EE specifications.The Jakarta EE web profile comprises the following: Specification Java EE 6[13] Java EE 7[7] Java EE 8[9] Jakarta EE 8[14] Jakarta EE 9[15] Jakarta Servlet 3.0 3.1 4.0 5.0 Jakarta Server Pages (JSP) 2.2 2.3 2.3 3.0 Jakarta Expression Language (EL) 2.2 3.0 3.0 4.0 Jakarta Debugging Support for Other Languages (JSR-45) 1.0 1.0 1.0 2.0 Jakarta Standard Tag Library (JSTL) 1.2 1.2 1.2 2.0 Jakarta Server Faces (JSF) 2.0 2.2 2.3 3.0 Jakarta RESTful Web Services (JAX-RS) 1.1 2.0 2.1 3.0 Jakarta WebSocket (WebSocket) N/A 1.0 1.1 2.0 Jakarta JSON Processing (JSON-P) N/A 1.0 1.1 2.0 Jakarta JSON Binding N/A N/A 1.1 2.0 Jakarta Annotations (JSR 250) 1.1 1.2 1.3 2.0 Jakarta Enterprise Beans (EJB) 3.1 Lite 3.2 Lite 3.2 Lite 4.0 Lite Jakarta Transactions (JTA) 1.1 1.2 1.2 2.0 Jakarta Persistence (JPA) 2.0 2.1 2.2 3.0 Jakarta Bean Validation 1.0 1.1 2.0 3.0 Jakarta Managed Beans 1.0 1.0 1.0 2.0 Jakarta Interceptors 1.1 1.2 1.2 2.0 Jakarta Contexts and Dependency Injection (CDI) 1.0 1.1 2.0 3.0 Jakarta Dependency Injection 1.0 1.0 1.0 2.0 Jakarta Security N/A N/A 1.0 2.0 Jakarta Authentication N/A 1.0 1.1 2.0 Certified referencing runtimes[edit] Although by definition all Jakarta EE implementations provide the same base level of technologies (namely, the Jakarta EE spec and the associated APIs), they can differ considerably with respect to extra features (like connectors, clustering, fault tolerance, high availability, security, etc.), installed size, memory footprint, startup time, etc. Referencing runtime Developer Java EE 8 certified – Full Java EE 8 certified – Web Java EE 7 certified – Full Java EE 7 certified – Web Java EE 6 certified – Full Official Oracle page for Java EE Compatibility. Java EE 6 certified – Web Java EE 5 certified J2EE 1.4 certified Licensing GlassFish server Open Source Edition Oracle Yes v5.0[16] Yes v5.0[16] Yes v4.x[17] Yes v4.x[17] Yes v3.x and upward[18] Yes v3.x Web Profile Yes v2.1.x[18] Free software Oracle GlassFish Server Oracle Yes v3[19] based on the open source GlassFish application server Yes Sun Java System Application Server v9.0 Yes Sun Java System Application Server v8.2 Proprietary software Oracle WebLogic Server Oracle Yes 14.1.1[20] Yes 12.2.1[21] Yes v12c[22] Yes v10.3.5.0 Yes v9 Proprietary software WildFly Red Hat Yes v14.x[16] Yes v14.x[16] Yes v8.1 [23] Yes v8.0.0.Final Yes v7.1[24] Yes v6.0[25] and v7.0[26] Yes v5.1[27][28] Yes v4.x Free software JBoss Enterprise Application Platform Red Hat Yes v7.2 [29] Yes v7.0[17] Yes v7.0[17] Yes v6.0[30] Yes v5 Proprietary software IBM WebSphere Application Server IBM Yes v9.x[16] Yes v9.x[17] Yes v8[31] Yes v7 Yes Proprietary software IBM WebSphere Application Server Liberty IBM Yes v18.0.0.2[32] Yes v18.0.0.2[32] Yes v8.5.5.6[33][34] Yes v8.5.5.6[17] Yes v8.5.5[35] Proprietary software Open Liberty IBM Yes v18.0.0.2 Yes v18.0.0.2 Free software IBM WebSphere Application Server Community Edition IBM Yes v3.0 Yes v2.1 Proprietary software Apache Geronimo Apache Yes v3.0-beta-1[36][37] Yes v2.0 Yes v1.0 Free software JEUS TmaxSoft Yes v8 Yes v7[38][39] Yes v6 Yes v5 Proprietary software Cosminexus Application Server Hitachi Yes v10.0[16] Yes v9[40] Proprietary software Fujitsu Interstage Application Server[41] Fujitsu Yes v12.0[16] Yes v1 Azure/v10.1[42][43] Yes Proprietary software WebOTX NEC Yes[44] Yes Proprietary software BES Application Server Baolande Yes v9.5[17] Apache TomEE[45][46] Apache No 7 (Java EE 7 like, but not certified[47]) Yes Free software Resin Server Caucho Yes v4.0[48] Yes Proprietary software Siwpas OW2 Yes v6.0[49] Free software JOnAS OW2 Yes v5.3 rc1[50] Yes Yes Free software SAP NetWeaver SAP Yes v2.x[51] Yes Yes Proprietary software Oracle Containers for Java EE Oracle Yes Proprietary software Oracle iPlanet Web Server Oracle Yes Sun Java System Web Server Proprietary software Oracle Application Server 10g Oracle Yes Proprietary software Pramati Server Pramati Technologies Yes v5.0 Proprietary software Trifork T4 Trifork Yes Proprietary software Sybase Enterprise Application Server[52] Sybase Yes Proprietary software Code sample[edit] The code sample shown below demonstrates how various technologies in Java EE 7 are used together to build a web form for editing a user. In Jakarta EE a (web) UI can be built using Jakarta Servlet, Jakarta Server Pages (JSP), or Jakarta Server Faces (JSF) with Facelets. The example below uses JSF and Facelets. Not explicitly shown is that the input components use the Jakarta EE Bean Validation API under the covers to validate constraints. <html xmlns="http://www.w3.org/1999/xhtml"      xmlns:h="http://xmlns.jcp.org/jsf/html" xmlns:f="http://xmlns.jcp.org/jsf/core">    <f:metadata>        <f:viewParam name="user_id" value="#{userEdit.user}" converter="#{userConvertor}" />    </f:metadata>    <h:body>        <h:messages />        <h:form>            <h:panelGrid columns="2">                <h:outputLabel for="firstName" value="First name" />                <h:inputText id="firstName" value="#{userEdit.user.firstName}" label="First name" />                <h:outputLabel for="lastName" value="Last name" />                <h:inputText id="lastName" value="#{userEdit.user.lastName}" label="Last name" />                <h:commandButton action="#{userEdit.saveUser}" value="Save" />            </h:panelGrid>        </h:form>    </h:body></html> Example Backing Bean class[edit] To assist the view, Jakarta EE uses a concept called a "Backing Bean". The example below uses Contexts and Dependency Injection (CDI) and Jakarta Enterprise Beans (EJB). @Named@ViewScopedpublic class UserEdit {    private User user;    @Inject    private UserDAO userDAO;    public String saveUser() {        userDAO.save(this.user);        addFlashMessage("User " + this.user.getId() + " saved");        return "users.xhtml?faces-redirect=true";    }    public void setUser(User user) {        this.user = user;    }    public User getUser() {        return user;    }} Example Data Access Object class[edit] To implement business logic, Jakarta Enterprise Beans (EJB) is the dedicated technology in Jakarta EE. For the actual persistence, JDBC or Jakarta Persistence (JPA) can be used. The example below uses EJB and JPA. Not explicitly shown is that JTA is used under the covers by EJB to control transactional behavior. @Statelesspublic class UserDAO {    @PersistenceContext    private EntityManager entityManager;    public void save(User user) {        entityManager.persist(user);    }    public void update(User user) {        entityManager.merge(user);    }    public List<User> getAll() {        return entityManager.createNamedQuery("User.getAll", User.class)                            .getResultList();    }} Example Entity class[edit] For defining entity/model classes Jakarta EE provides the Jakarta Persistence (JPA), and for expressing constraints on those entities it provides the Bean Validation API. The example below uses both these technologies. @Entitypublic class User {    @Id    @GeneratedValue(strategy = IDENTITY)    private Integer id;    @Size(min = 2, message="First name too short")    private String firstName;    @Size(min = 2, message="Last name too short")    private String lastName;    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getFirstName() {        return firstName;    }    public void setFirstName(String firstName) {        this.firstName = firstName;    }    public String getLastName() {        return lastName;    }    public void setLastName(String lastName) {        this.lastName = lastName;    }} See also[edit] Computer programming portal Web container Deployment descriptor Java BluePrints Sun Java System Portal Server Sun Community Source License Java Research License References[edit] ^ "Differences between Java EE and Java SE - Your First Cup: An Introduction to the Java EE Platform". Docs.oracle.com. 2012-04-01. Retrieved 2012-07-18. ^ "Java EE Overview". Oracle Corporation. Retrieved February 26, 2017. ^ John K. Waters (2017-09-12). "Java EE Is Moving to the Eclipse Foundation". ADTmag. Retrieved 2017-09-13. ^ Beaton, Wayne. "EE4J FAQ | The Eclipse Foundation". www.eclipse.org. ^ Chirgwin, Richard (March 4, 2018). "Java EE renamed 'Jakarta EE' after Big Red brand spat". Software. The Register. Retrieved 19 March 2018. ^ Vaughan-Nichols, Steven J. (March 5, 2018). "Good-bye JEE, hello Jakarta EE". Linux and Open Source. ZDNet. Retrieved 2020-07-10. ^ a b "JSR 342: Java™ Platform, Enterprise Edition 7 (Java EE 7) Specification". Java Community Process. ^ Wieldt, Tori. "Introducing Java EE 7: June 12 Kickoff". Archived from the original on 2013-09-13. Retrieved 2013-05-28. ^ a b "Java Platform, Enterprise Edition (Java EE) Specification, v8" (PDF). Oracle. ^ "Jakarta EE 8". projects.eclipse.org. Retrieved 2020-07-11. ^ "Jakarta EE 9". projects.eclipse.org. Retrieved 2020-07-11. ^ "Jakarta EE 9 schedule". Jakarta EE Platform Project. Retrieved 2020-07-11. ^ "JSR 316: Java™ Platform, Enterprise Edition 6 (Java EE 6) Specification". Java Community Process. ^ "Required Components". WebProfile. Jakarta EE. Retrieved 2020-07-11. ^ "Jakarta EE WebProfile". jakarta.ee. Retrieved 2020-07-15. ^ a b c d e f g "Java EE Compatibility". www.oracle.com. Retrieved 2018-08-05. ^ a b c d e f g "Java EE Compatibility". ^ a b "Comparing GlassFish Open Source Edition versions 2.x and 3.0.x". Archived from the original on 2012-12-20. ^ "Java EE Compatibility". Java.sun.com. 2010-09-07. Retrieved 2012-07-18. ^ "Oracle Weblogic Server 14.1.1". www.oracle.com. ^ "Oracle Weblogic Server 12.1.1". www.oracle.com. ^ Lyons, Will; Humphrey, Pieter (2011). "Oracle Web Logic Server 12c: Developing Modern, Lightweight Java EE 6 Applications" (PDF). Archived from the original (PDF) on 2011-12-15. Retrieved 2011-12-03. ^ "Java EE Compatibility". www.oracle.com. ^ "JBoss AS 7.1.0.Final "Thunder" released - Java EE 6 Full Profile certified! | My Wiki | Planet JBoss Community". Planet.jboss.org. 2012-02-17. Retrieved 2012-07-18. ^ "JBoss Application Server - JBoss Community". ^ "JBoss Application Server - JBoss Community". ^ "Java EE Compatibility". ^ "JBoss AS is now EE5 certified!". 15 September 2008. Archived from the original on 20 September 2008. Retrieved 7 August 2016. ^ "Red Hat JBoss Enterprise Application Platform 7.2 Availability". ^ Business Wire (2012-06-20). "Red Hat Launches JBoss Enterprise Application Platform 6 to Help Enterprises Move Application Development and Deployment to the Cloud". Business Wire. Retrieved 2012-07-18. ^ "What's new in WebSphere Application Server V8". Ibm.com. Retrieved 2012-07-18. ^ a b "IBM WebSphere Application Server Liberty delivers the first production-ready, Java EE 8-compatible application server and broadens support for Spring Boot applications". IBM. Retrieved 12 July 2018. ^ http://oracle.com/technetwork/java/javaee/overview/waslibertyprofile8556-2587134.html ^ "Java EE 7 has landed in WAS Liberty - WASdev". 25 June 2015. ^ "IBM Java EE 6 Web Profile Tested Configurations". ^ "Apache Geronimo : Index". geronimo.apache.org. January 25, 2010. ^ "Apache Geronimo fully certified for Java EE 6 - The H Open: News and Features". H-online.com. 2011-11-14. Archived from the original on 20 April 2012. Retrieved 2012-07-18. ^ "Tested Configurations, Java EE 6 - TMAX JEUS 7". Oracle.com. 2010-09-07. Retrieved 2012-07-18. ^ "Java EE6 Web Application Server, WAS Software". Us.tmaxsoft.com. Archived from the original on 2012-07-02. Retrieved 2012-07-18. ^ "Java EE 6 - Tested Configurations, Java EE 6 - Hitachi uCosminexus Application Server v9.0". Oracle.com. ^ "Fujitsu Interstage Application Server powered by Windows Azure". Archived from the original on August 10, 2011. ^ "Tested Configurations, Java EE6 - Fujitsu Interstage". Oracle.com. 2010-09-07. Retrieved 2012-07-18. ^ "Fujitsu Releases Interstage Application Server V10.1". Fujitsu. ^ "NEC WebOTX Application Server V9.x Certification". ^ "Apache TomEE". Openejb.apache.org. Retrieved 2012-07-18. ^ "MarketWatch.com". MarketWatch.com. Retrieved 2012-07-18. ^ TomEE, Apache. "Apache TomEE 7.0.1". ^ "Resin Application Server Java EE 6 Web Profile" (PDF). caucho.com. 2011. ^ "Please Welcome Siwpas as Java EE Certified Option!". Oracle.com. Retrieved 2015-12-07. ^ "JOnAS 5.3.0 RC1 released". jonas.ow2.org. 2013-01-07. Archived from the original on 2013-10-15. Retrieved 2014-02-25. ^ "SAP NetWeaver Cloud Java EE 6 Web Profile Certified! (The Aquarium)". ^ "SAP Software Solutions - Business Applications and Technology". External links[edit] Wikimedia Commons has media related to Jakarta EE. Official website Gupta, Arun (2013). Java EE 7 Essentials. O’Reilly. Goncalves, Antonio (2013). Beginning Java EE 7. APress. Oracle Technology Network's Java EE Oracle's Java EE Compatibility page - Certified Java EE Compatible Implementations Core J2EE Patterns A short tutorial introducing beginning Java EE developers to the Java EE platform v t e Jakarta EE specifications Web app Servlet Server Pages Expression Language JSTL Server Faces WebSocket Enterprise app Dependency injection Bean Validation Enterprise Beans JPA JMS JTA Mail JCA Common Annotations Web services JAX-RS JAX-WS SOAP with Attachments Web Services Metadata JAXM JAXR APM Management Other JAXB JAX-RPC JAF Related JAXP JDBC JMX Streaming API for XML v t e Java Platforms Java language JVM Java ME (Micro) Java SE (Standard) Jakarta EE (Enterprise) Java Card Android SDK Oracle technologies Squawk Java Development Kit OpenJDK Java virtual machine JavaFX Maxine VM Platform technologies Applets Servlets MIDlets JSP JSF Web Start (JNLP) Major third-party technologies Blackdown Eclipse GNU Classpath GWT Harmony Hibernate IcedTea Jazelle Spring Struts TopLink WildFly History Java version history Java Community Process Sun Microsystems Free Java implementations Major JVM languages BeanShell Clojure Groovy JRuby Jython Kotlin Processing Rhino Scala Community Conferences JavaOne Devoxx Organizations Apache Software Foundation Java Community Process Oracle Corporation Sun Microsystems, Sun Microsystems Laboratories People James Gosling Arthur van Hoff Urs Hölzle Patrick Naughton Category Computer programming portal Retrieved from "https://en.wikipedia.org/w/index.php?title=Jakarta_EE&oldid=991240034" Categories: Computing platforms Java enterprise platform Java platform Java specification requests Web frameworks Hidden categories: Wikipedia introduction cleanup from August 2016 All pages needing cleanup Articles covered by WikiProject Wikify from August 2016 All articles covered by WikiProject Wikify Wikipedia articles needing context from May 2018 All Wikipedia articles needing context Wikipedia introduction cleanup from May 2018 Articles with multiple maintenance issues Commons category link is on Wikidata Articles with example Java code Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikibooks Languages العربية Български Bosanski Català Čeština Dansk Deutsch Ελληνικά Español Euskara فارسی Français 한국어 Հայերեն Italiano עברית Қазақша Lietuvių Magyar Nederlands 日本語 ਪੰਜਾਬੀ Polski Português Русский Slovenčina Srpskohrvatski / српскохрватски Suomi Svenska ไทย Türkçe Українська Tiếng Việt 中文 Edit links This page was last edited on 29 November 2020, at 01:18 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement