Function-level programming - Wikipedia Function-level programming From Wikipedia, the free encyclopedia Jump to navigation Jump to search "function-level" redirects here. For the term in mental health assessments, see Global Assessment of Functioning. Not to be confused with functional programming. This article possibly contains original research. Please improve it by verifying the claims made and adding inline citations. Statements consisting only of original research should be removed. (April 2018) (Learn how and when to remove this template message) Programming paradigms Action Agent-oriented Array-oriented Automata-based Concurrent computing Relativistic programming Data-driven Declarative (contrast: Imperative) Functional Functional logic Purely functional Logic Abductive logic Answer set Concurrent logic Functional logic Inductive logic Constraint Constraint logic Concurrent constraint logic Dataflow Flow-based Reactive Functional reactive Ontology Differentiable Dynamic/scripting Event-driven Function-level (contrast: Value-level) Point-free style Concatenative Generic Imperative (contrast: Declarative) Procedural Object-oriented Polymorphic Intentional Language-oriented Domain-specific Literate Natural-language programming Metaprogramming Automatic Inductive programming Reflective Attribute-oriented Macro Template Non-structured (contrast: Structured) Array Nondeterministic Parallel computing Process-oriented Probabilistic Quantum Set-theoretic Stack-based Structured (contrast: Non-structured) Block-structured Structured concurrency Object-oriented Actor-based Class-based Concurrent Prototype-based By separation of concerns: Aspect-oriented Role-oriented Subject-oriented Recursive Symbolic Value-level (contrast: Function-level) v t e In computer science, function-level programming refers to one of the two contrasting programming paradigms identified by John Backus in his work on programs as mathematical objects, the other being value-level programming. In his 1977 Turing award lecture, Backus set forth what he considered to be the need to switch to a different philosophy in programming language design:[1] Programming languages appear to be in trouble. Each successive language incorporates, with a little cleaning up, all the features of its predecessors plus a few more. [...] Each new language claims new and fashionable features... but the plain fact is that few languages make programming sufficiently cheaper or more reliable to justify the cost of producing and learning to use them. He designed FP to be the first programming language to specifically support the function-level programming style. A function-level program is variable-free (cf. point-free programming), since program variables, which are essential in value-level definitions, are not needed in function-level programs. Contents 1 Introduction 2 Contrast to functional programming 3 Example languages 4 See also 5 References 6 External links Introduction[edit] In the function-level style of programming, a program is built directly from programs that are given at the outset, by combining them with program-forming operations or functionals. Thus, in contrast with the value-level approach that applies the given programs to values to form a succession of values culminating in the desired result value, the function-level approach applies program-forming operations to the given programs to form a succession of programs culminating in the desired result program. As a result, the function-level approach to programming invites study of the space of programs under program-forming operations, looking to derive useful algebraic properties of these program-forming operations. The function-level approach offers the possibility of making the set of programs a mathematical space by emphasizing the algebraic properties of the program-forming operations over the space of programs. Another potential advantage of the function-level view is the ability to use only strict functions and thereby have bottom-up semantics, which are the simplest kind of all. Yet another is the existence of function-level definitions that are not the lifted (that is, lifted from a lower value-level to a higher function-level) image of any existing value-level one: these (often terse) function-level definitions represent a more powerful style of programming not available at the value-level. Contrast to functional programming[edit] When Backus studied and publicized his function-level style of programming, his message was mostly misunderstood[2] as supporting the traditional functional programming style languages instead of his own FP and its successor FL. Backus calls functional programming applicative programming[clarification needed]; his function-level programming is a particular, constrained type. A key distinction from functional languages is that Backus' language has the following hierarchy of types: atoms functions, which take atoms to atoms Higher-order functions (which he calls "functional forms"), which take one or two functions to functions ...and the only way to generate new functions is to use one of the functional forms, which are fixed: you cannot build your own functional form (at least not within FP; you can within FFP (Formal FP)). This restriction means that functions in FP are a module (generated by the built-in functions) over the algebra of functional forms, and are thus algebraically tractable. For instance, the general question of equality of two functions is equivalent to the halting problem, and is undecidable, but equality of two functions in FP is just equality in the algebra, and thus (Backus imagines) easier. Even today, many users of lambda style languages often misinterpret Backus' function-level approach as a restrictive variant of the lambda style, which is a de facto value-level style. In fact, Backus would not have disagreed with the 'restrictive' accusation: he argued that it was precisely due to such restrictions that a well-formed mathematical space could arise, in a manner analogous to the way structured programming limits programming to a restricted version of all the control-flow possibilities available in plain, unrestricted unstructured programs. The value-free style of FP is closely related to the equational logic of a cartesian-closed category. Example languages[edit] Main category: Function-level languages The canonical function-level programming language is FP. Others include FL, and J. See also[edit] Concatenative programming language Functional programming, declarative programming (compare) Tacit programming Value-level programming, imperative programming (contrast) References[edit] ^ Backus, John (1978). "Can programming be liberated from the von Neumann style?: A functional style and its algebra of programs" (PDF). Communications of the ACM. 21 (8): 613–641. doi:10.1145/359576.359579. ^ Hudak, Paul (1989). "Conception, evolution, and application of functional programming languages". ACM Computing Surveys. 21 (3): 359–411. doi:10.1145/72551.72554. External links[edit] Closed applicative languages, FP and FL, in John W. Backus (Publications) Retrieved from "https://en.wikipedia.org/w/index.php?title=Function-level_programming&oldid=949298625" Categories: Programming paradigms Programming language theory Hidden categories: Articles that may contain original research from April 2018 All articles that may contain original research Wikipedia articles needing clarification from November 2016 Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages Čeština Español Galego Русский Српски / srpski Українська 中文 Edit links This page was last edited on 5 April 2020, at 17:57 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement