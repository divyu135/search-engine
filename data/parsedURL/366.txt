Lex (software) - Wikipedia Lex (software) From Wikipedia, the free encyclopedia Jump to navigation Jump to search Lex Original author(s) Mike Lesk, Eric Schmidt Initial release 1975; 45 years ago (1975) Repository bxr.su/OpenBSD/usr.bin/lex/ Written in C Operating system Unix, Unix-like, Plan 9 Type Command Lex is a computer program that generates lexical analyzers ("scanners" or "lexers").[1][2] Lex is commonly used with the yacc parser generator. Lex, originally written by Mike Lesk and Eric Schmidt[3] and described in 1975,[4][5] is the standard lexical analyzer generator on many Unix systems, and an equivalent tool is specified as part of the POSIX standard.[6] Lex reads an input stream specifying the lexical analyzer and outputs source code implementing the lexer in the C programming language.In addition to C, some old versions of Lex could also generate a lexer in Ratfor.[7] Contents 1 Open source 2 Structure of a Lex file 3 Example of a Lex file 4 Using Lex with other programming tools 4.1 Using Lex with parser generators 4.2 Lex and make 5 See also 6 References 7 External links Open source[edit] Though originally distributed as proprietary software, some versions of Lex are now open source. Open source versions of Lex, based on the original proprietary code, are now distributed with open source operating systems such as OpenSolaris and Plan 9 from Bell Labs. One popular open source version of Lex, called flex, or the "fast lexical analyzer", is not derived from proprietary coding. Structure of a Lex file[edit] The structure of a Lex file is intentionally similar to that of a yacc file; files are divided into three sections, separated by lines that contain only two percent signs, as follows: The definition section defines macros and imports header files written in C. It is also possible to write any C code here, which will be copied verbatim into the generated source file. The rules section associates regular expression patterns with C statements. When the lexer sees text in the input matching a given pattern, it will execute the associated C code. The C code section contains C statements and functions that are copied verbatim to the generated source file. These statements presumably contain code called by the rules in the rules section. In large programs it is more convenient to place this code in a separate file linked in at compile time. Example of a Lex file[edit] The following is an example Lex file for the flex version of Lex. It recognizes strings of numbers (positive integers) in the input, and simply prints them out. /*** Definition section ***/%{/* C code to be copied verbatim */#include <stdio.h>%}/* This tells flex to read only one input file */%option noyywrap%%    /*** Rules section ***/    /* [0-9]+ matches a string of one or more digits */[0-9]+  {            /* yytext is a string containing the matched text. */            printf("Saw an integer: %s\n", yytext);        }.|\n    {   /* Ignore all other characters. */   }%%/*** C Code section ***/int main(void){    /* Call the lexer, then quit. */    yylex();    return 0;} If this input is given to flex, it will be converted into a C file, lex.yy.c. This can be compiled into an executable which matches and outputs strings of integers. For example, given the input: abc123z.!&*2gj6 the program will print: Saw an integer: 123Saw an integer: 2Saw an integer: 6 Using Lex with other programming tools[edit] Using Lex with parser generators[edit] Lex and parser generators, such as Yacc or Bison, are commonly used together. Parser generators use a formal grammar to parse an input stream, something which Lex cannot do using simple regular expressions (Lex is limited to simple finite state automata).[clarification needed] It is typically preferable to have a (Yacc-generated, say) parser be fed a token-stream as input, rather than having it consume the input character-stream directly. Lex is often used to produce such a token-stream. Scannerless parsing refers to parsing the input character-stream directly, without a distinct lexer. Lex and make[edit] make is a utility that can be used to maintain programs involving Lex. Make assumes that a file that has an extension of .l is a Lex source file. The make internal macro LFLAGS can be used to specify Lex options to be invoked automatically by make.[8] See also[edit] Flex lexical analyser Yacc Ragel PLY (Python Lex-Yacc) Comparison of parser generators References[edit] ^ Levine, John R.; Mason, Tony; Brown, Doug (1992). lex & yacc (2 ed.). O'Reilly. pp. 1–2. ISBN 1-56592-000-7. ^ Levine, John (August 2009). flex & bison. O'Reilly Media. p. 304. ISBN 978-0-596-15597-1. ^ Lesk, M.E.; Schmidt, E. "Lex – A Lexical Analyzer Generator". Retrieved August 16, 2010. ^ Lesk, M.E.; Schmidt, E. (July 21, 1975). "Lex – A Lexical Analyzer Generator" (PDF). UNIX TIME-SHARING SYSTEM:UNIX PROGRAMMER’S MANUAL, Seventh Edition, Volume 2B. bell-labs.com. Retrieved Dec 20, 2011. ^ Lesk, M.E. (October 1975). "Lex – A Lexical Analyzer Generator". Comp. Sci. Tech. Rep. No. 39. Murray Hill, New Jersey: Bell Laboratories. ^ The Open Group Base Specifications Issue 7, 2018 edition § Shell & Utilities § Utilities § lex ^ John R. Levine; John Mason; Doug Brown (1992). Lex & Yacc. O'Reilly. ^ "make". The Open Group Base Specifications. The IEEE and The Open Group (6). 2004. IEEE Std 1003.1, 2004 Edition. External links[edit] The Wikibook Guide to Unix has a page on the topic of: Commands Using Flex and Bison at Macworld.com lex(1) – Solaris 10 User Commands Reference Manual lex(1) – Plan 9 Programmer's Manual, Volume 1 v t e Unix command-line interface programs and shell builtins File system cat chmod chown chgrp cksum cmp cp dd du df file fuser ln ls mkdir mv pax pwd rm rmdir split tee touch type umask Processes at bg crontab fg kill nice ps time User environment env exit logname mesg talk tput uname who write Text processing awk basename comm csplit cut diff dirname ed ex fold head iconv join m4 more nl paste patch printf sed sort strings tail tr uniq vi wc xargs Shell builtins alias cd echo test unset wait Searching find grep Documentation man Software development ar ctags lex make nm strip yacc Miscellaneous bc cal expr lp od sleep true and false Categories Standard Unix programs Unix SUS2008 utilities List Retrieved from "https://en.wikipedia.org/w/index.php?title=Lex_(software)&oldid=989043144" Categories: Compiling tools Unix programming tools Unix SUS2008 utilities Plan 9 commands Finite automata Lexical analysis Hidden categories: Wikipedia articles needing clarification from May 2012 Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages Čeština Deutsch Ελληνικά Español فارسی Français 한국어 Հայերեն Magyar Nederlands 日本語 Polski Português Русский Српски / srpski Svenska 中文 Edit links This page was last edited on 16 November 2020, at 18:58 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement