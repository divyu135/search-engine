MOO (programming language) - Wikipedia MOO (programming language) From Wikipedia, the free encyclopedia (Redirected from MOO programming language) Jump to navigation Jump to search This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. Find sources: "MOO" programming language – news · newspapers · books · scholar · JSTOR (March 2018) (Learn how and when to remove this template message) MOO Paradigm multi-paradigm: structured, prototype-based Designed by Stephen White Developer Stephen White and Pavel Curtis First appeared 1990 Stable release 1.8.1 / January 10, 2001 Typing discipline dynamic Major implementations MOO Influenced by Algol, Lisp, Scheme, Smalltalk, Self, C, Ada, MUF Influenced CoolMUD, ColdC The MOO programming language is a relatively simple programming language used to support the MOO Server. It is dynamically typed and uses a prototype-based object-oriented system, with syntax roughly derived from the Ada school of programming languages. Contents 1 History 2 Features 3 Syntax 3.1 Control Structures 3.1.1 if ... else 3.1.2 for 3.1.3 while 3.1.4 try ... except 4 Example Programs 5 See also 6 References 7 Further reading History[edit] Stephen White authored the first MOO Server and language in 1990 using C. Over the course of the year, Pavel Curtis joined the project, releasing the first version of the LambdaMOO Server. LambdaMOO is run and maintained entirely on a volunteer basis, and now has its own SourceForge project. Although the last packaged release was in 2001, development is still active in the project's CVS, on Sourceforge.net [1] Some follow-on code is also available on Github.net White describes MOO as "a mishmash of c-like operators and Ada-like control structures, combined with prototype-style single-inheritance." Features[edit] The language has explicit exception handling control flow, as well as traditional looping constructs. A verb and property hierarchy provides default values to prototype objects, with over-riding values lower in the hierarchy. This hierarchy of objects is maintained through delegation to an object's "parent" property, resulting in a form of single inheritance. Special security-related attributes of objects, verbs, and properties include ownership, and read, write and execute flags. MOO programs are byte-code compiled, with implicit decompilation when editing, providing a canonical form of programs. MOO programs are orthogonally persistent through periodic checkpoints. Objects are identified by a unique integer identifier. Unused program data is eliminated through automatic garbage collection (implemented by reference counting). However, MOO objects themselves are not garbage collected and are manually deleted by their owners or superusers (aka wizards) through a process called 'recycling.' MOO is explicitly a multi-user system and programs (verbs) are contributed by any number of connected users. A distinction is made between the 'driver' (runtime) and 'core' (programs written in the MOO language.) The vast majority of the functionality of a running MOO is handled 'in-core.' The runtime supports multi-tasking using a retribution based time slicing method. Verbs run with exclusive access to the database, so no explicit locking is necessary to maintain synchronization. Simple TCP/IP messaging (telnet compatible) is used to communicate with client sockets, each of which is identified with a 'player' in the Virtual reality representation system. The language supports weak references to objects by number, and to properties and verbs through strings. Built-in functions to retrieve lists of properties and verbs exist, giving the language runtime facilities for reflection. The server also contains support for wildcard verb matching, so the same code can easily be used to handle multiple commands with similar names and functions. Available sequence types in MOO are lists and strings. Both support random access, as well as head and tail operations similar to those available in Lisp. All operations on lists and strings are non-destructive, and all non-object datatypes are immutable. Built-in functions and libraries allow lists to also be used as associative arrays and ordered and unordered sets. Syntax[edit] Control Structures[edit] MOO has a very basic set of control structures, with for-in-list being the only "fancy" feature. if ... else[edit] if (<expr>)    <statements>;elseif (<expr>)    <statements>;else    <statements>;endif for[edit] for <variable> in [<number>..<number>]    <statements>;endfor for <variable> in (<list value>)    <statements>;endfor while[edit] while (<expression>)    <statements>;endwhile try ... except[edit] try    <statements>;except <variable> (<error code>)    <statements>;endtry Example Programs[edit] The classic Hello World Program can be written in MOO as: @program hello:runplayer:tell("Hello to the world of MOO!");. A more interesting example:  @program toy:wind if (this.location == player)   if (this.wound < this.maximum)     this.wound = this.wound + 2;     player:tell("You wind up the ", this.name,".");     player.location:announce(player.name, " winds up the ", this.name,".");     if (this.wound >= this.maximum)       player:tell("The knob comes to a stop while winding.");     endif   else     player:tell("The ",this.name," is already fully wound.");   endif else   player:tell("You have to be holding the ", this.name,"."); endif . [2] See also[edit] MOO (game system) LPC (programming language) Pike (programming language) Linden Scripting Language (LSL) References[edit] ^ LambdaMOO server CVS sorted by date ^ yduJ's Programming Tutorial Further reading[edit] Stacy, Chris (1995). "14. Programming MOOs". In Busey, Andrew (ed.). Secrets of the MUD Wizards. SAMS Publishing. pp. 307–369. ISBN 0-672-30723-5. Curtis, Pavel (May 2004). "LambdaMOO Programmer's Manual". MOO Server Resources. "MOO Programming Cheat Sheet". moo programming resources. 1999-01-10. "The Unofficial MOO Programming Tutorial". moo programming resources. 1994-01-10. v t e MUDs List of MUDs Major branches AberMUD DikuMUD LPMud LPC MU* Minor branches, codebases, libraries DGD GodWars Merc MOO MudOS MUSH Talker TinyMUD TinyMUCK Concepts, terminology Alternate character Avatar Avatar customization Bartle taxonomy of player types Buff Camping Computer game bot Consider Cybersex God Gold farming Gold sink Griefer Grinding Hack and slash Immortal Implementer Kill stealing Lag Looting Mob / Monster MUD client MUD trees Mudflation Nerf Non-player character Online creation Online wedding Persistent world Player character Player versus environment Player versus player / Playerkilling Powerleveling Quest Remort Rent Spam Spawning spod Syntax guessing Tank Twinking Virtual goods Wizard Zone / Area Publications Designing Virtual Worlds Imaginary Realities Life on the Screen "A Rape in Cyberspace" "A Story About a Tree" Terra Nova A Theory of Fun for Game Design Companies, organizations Areae Iron Realms Entertainment Jagex Lysator Kesmai The Mud Connector Mythic Entertainment Plaintext Players Simutronics XYZZY Awards Category:MUDs Retrieved from "https://en.wikipedia.org/w/index.php?title=MOO_(programming_language)&oldid=978918012" Categories: Algol programming language family MUD programming languages Prototype-based programming languages Hidden categories: Articles needing additional references from March 2018 All articles needing additional references Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages Add links This page was last edited on 17 September 2020, at 18:23 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement