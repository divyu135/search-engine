Atlas Autocode - Wikipedia Atlas Autocode From Wikipedia, the free encyclopedia Jump to navigation Jump to search 1960s computer programming language This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. Find sources: "Atlas Autocode" – news · newspapers · books · scholar · JSTOR (September 2009) (Learn how and when to remove this template message) Atlas Autocode Paradigms Procedural, imperative, structured Family ALGOL Designed by Tony Brooker, Derrick Morris Developer University of Manchester First appeared 1965; 55 years ago (1965) Typing discipline Static, strong Scope Lexical Implementation language ALGOL 60 Platform Atlas English Electric KDF9 OS Supervisor Major implementations Edinburgh IMP Influenced by ALGOL 60 Atlas Autocode (AA)[1][2] is a programming language developed around 1965 at the University of Manchester. A variant of the language ALGOL, it was developed by Tony Brooker and Derrick Morris for the Atlas computer. The word Autocode was basically an early term for programming language. Different autocodes could vary greatly. Features[edit] AA featured explicitly typed variables, subroutines, and functions. It omitted some ALGOL features such as passing parameters by name, which in ALGOL 60 means passing the memory address of a short subroutine to recalculate a parameter each time it is mentioned. The AA compiler generated range-checking for array accesses, and allowed an array to have dimensions that were determined at runtime, i.e., an array could be declared as integer array Thing (i:j), where i and j were calculated values. AA high-level routines can include machine code, either to make an inner loop more efficient or to effect some operation which otherwise cannot be done easily.[1] AA includes a complex data type[1] to represent complex numbers, partly because of pressure from the electrical engineering department, as complex numbers are used to represent the behavior of alternating current. The imaginary unit square root of -1 was represented by i, which was treated as a fixed complex constant = i. The complex data type was dropped when Atlas Autocode later evolved into the language Edinburgh IMP. IMP was an extension of AA and was used to write the Edinburgh Multiple Access System (EMAS) operating system. AA's second-greatest claim to fame (after being the progenitor of IMP and EMAS) was that it had many of the features of the original Compiler Compiler. A variant of the AA compiler included run-time support for a top-down recursive descent parser. The style of parser used in the Compiler Compiler was in use continuously at Edinburgh from the 60's until almost the year 2000. Other Autocodes were developed for the Titan computer, a prototype Atlas 2 at Cambridge, and the Ferranti Mercury. Syntax[edit] Atlas Autocode's syntax was largely similar to ALGOL, though it was influenced by the output device which the author had available, a Friden Flexowriter. Thus, it allowed symbols like ½ for .5 and the superscript 2 for to the power of 2. The Flexowriter supported overstriking and thus, AA did also: up to three characters could be overstruck as a single symbol. For example, the character set had no ↑ symbol, so exponentiation was an overstrike of | and *. The aforementioned underlining of reserved words (keywords) could also be done using overstriking. The language is described in detail in the Atlas Autocode Reference Manual.[1] Other Flexowriter characters that were found a use in AA were: α in floating-point numbers, e.g., 3.56α-7 for modern 3.56e-7 ; β to mean the second half of a 48-bit Atlas memory word; π for the mathematical constant pi. When AA was ported to the English Electric KDF9 computer, the character set was changed to International Organization for Standardization (ISO) and that compiler has been recovered from an old paper tape by the Edinburgh Computer History Project and is available online, as is a high-quality scan of the original Edinburgh version of the Atlas Autocode manual.[2] Keywords in AA were distinguishable from other text by being underlined, which was implemented via overstrike in the Flexowriter (compare to bold in ALGOL). There were also two stropping regimes. First, there was an "uppercasedelimiters" mode where all uppercase letters (outside strings) were treated as underlined lowercase. Second, in some versions (but not in the original Atlas version), it was possible to strop keywords by placing a "%" sign in front of them, for example the keyword endofprogramme could be typed as %end %of %programme or %endofprogramme. This significantly reduced typing, due to only needing one character, rather than overstriking the whole keyword. As in ALGOL, there were no reserved words in the language as keywords were identified by underlining (or stropping), not by recognising reserved character sequences. In the statement if token=if then result = token, there is both a keyword if and a variable named if. As in ALGOL, AA allowed spaces in variable names, such as integer previous value. Spaces were not significant and were removed before parsing in a trivial pre-lexing stage called "line reconstruction". What the compiler would see in the above example would be "iftoken=ifthenresult=token". Spaces were possible due partly to keywords being distinguished in other ways, and partly because the source was processed by scannerless parsing, without a separate lexing phase, which allowed the lexical syntax to be context-sensitive. The syntax for expressions let the multiplication operator be omitted, e.g., 3a was treated as 3*a, and a(i+j) was treated as a*(i+j) if a was not an array. In ambiguous uses, the longest possible name was taken (maximal munch), for example ab was not treated as a*b, whether or not a and b had been declared. In the original Atlas Autocode for the Atlas computer, Atlas machine code instructions could be interpolated between the AA statements. References[edit] ^ a b c d Brooker, R.A.; Rohl, J.S. (1965). "Atlas Autocode Reference Manual". University of Manchester Computer Science Department. Archived from the original on 21 July 2011. Retrieved 29 April 2020. (Original scans) ^ a b Schofoeld, P.D.; Osbourne, M.R. (1965). "Programming in Atlas Autocode, Computer Unit Report No. 1" (PDF). University of Edinburgh. (Original scans Archived 2011-07-21 at the Wayback Machine) v t e ALGOL programming Implementations Technical standards ALGOL 58 ALGOL 60 ALGOL 68 Dialects ABC ALGOL ALCOR ALGO ALGOL 68C ALGOL 68-R ALGOL 68RS ALGOL 68S ALGOL N ALGOL W ALGOL X Atlas Autocode (Edinburgh IMP) Burroughs ALGOL Coral 66 Dartmouth ALGOL 30 DASK ALGOL DG/L Elliott ALGOL Executive Systems Problem Oriented Language (ESPOL) FLACC IMP JOVIAL Kidsgrove Algol Mary NELIAC RTL/2 S-algol, PS-algol, Napier88 Simula Small Machine ALGOL Like Language (SMALL) SMIL ALGOL Formalisms Jensen's Device Van Wijngaarden grammar Community Organizations Professional associations ALCOR Group Association for Computing Machinery (ACM) BSI Group Euro-Asian Council for Standardization, Metrology and Certification (EASC) International Federation for Information Processing (IFIP) IFIP Working Group 2.1 Society of Applied Mathematics and Mechanics (GAMM) Business Burroughs Corporation Elliott Brothers Regnecentralen Education Case Institute of Technology University of Edinburgh University of St Andrews Manchester University Massachusetts Institute of Technology (MIT) Government Royal Radar Establishment (RRE) People ALGOL 58 John Backus Friedrich L. Bauer Hermann Bottenbruch Charles Katz Alan Perlis Heinz Rutishauser Klaus Samelson Joseph Henry Wegstein ALGOL 60 Backus+ Roland Carl Backhouse Bauer+ Richard Bird Stephen R. Bourne Edsger W. Dijkstra Andrey Ershov Robert W. Floyd Jeremy Gibbons Julien Green David Gries Eric Hehner Tony Hoare Jørn Jensen Katz+ Peter Landin Tom Maibaum Conor McBride John McCarthy Carroll Morgan Peter Naur Maurice Nivat John E. L. Peck Perlis+ Brian Randell Rutishauser Samelson+ Jacob T. Schwartz Micha Sharir David Turner Bernard Vauquois Eiiti Wada Wegstein+ Adriaan van Wijngaarden Mike Woodger + = full name and link in prior ALGOL version above Simula Ole-Johan Dahl Kristen Nygaard ALGOL 68 Bauer+ Susan G. Bond Bourne+ Robert Dewar Dijkstra+ Gerhard Goos Michael Guy Hoare+ Cornelis H. A. Koster Peter Landin Charles H. Lindsey Barry J. Mailloux McCarthy+ Lambert Meertens Naur+ Peck+ Willem van der Poel Randell+ Douglas T. Ross Samelson+ Michel Sintzoff van Wijngaarden+ Niklaus Wirth Woodger+ Philip Woodward Nobuo Yoneda + = full name and link in prior ALGOL version above Hal Abelson John Barnes Tony Brooker Ron Morrison Peter O'Hearn John C. Reynolds Other ALGOL Bulletin Category Category Retrieved from "https://en.wikipedia.org/w/index.php?title=Atlas_Autocode&oldid=977458721" Categories: Ferranti History of computing in the United Kingdom Structured programming languages Hidden categories: Webarchive template wayback links Articles with short description Short description is different from Wikidata Articles needing additional references from September 2009 All articles needing additional references Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages العربية Bahasa Melayu Tiếng Việt Edit links This page was last edited on 8 September 2020, at 23:50 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement