BETA (programming language) - Wikipedia BETA (programming language) From Wikipedia, the free encyclopedia Jump to navigation Jump to search This article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages) This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. Find sources: "BETA" programming language – news · newspapers · books · scholar · JSTOR (September 2014) (Learn how and when to remove this template message) This article may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (September 2010) (Learn how and when to remove this template message) (Learn how and when to remove this template message) BETA Paradigm Object-oriented Designed by Bent Bruun Kristensen, Ole Lehrmann Madsen, Birger Møller-Pedersen, Kristen Nygaard Website beta.cs.au.dk Influenced by Simula BETA is a pure object-oriented language originating within the "Scandinavian School" in object-orientation where the first object-oriented language Simula was developed.[1] Among its notable features, it introduced nested classes, and unified classes with procedures into so called patterns. The project is inactive as of October 2020.[2] Contents 1 Features 1.1 Technical overview 1.2 Patterns 1.3 Hello world! 2 Further reading 3 References 4 External links Features[edit] Technical overview[edit] From a technical perspective, BETA provides several unique features. Classes and Procedures are unified to one concept, a Pattern. Also, classes are defined as properties/attributes of objects. This means that a class cannot be instantiated without an explicit object context. A consequence of this is that BETA supports nested classes. Classes can be virtually defined, much like virtual methods can be in most object-oriented programming languages. Virtual entities (such as methods and classes) are never overwritten; instead they are redefined or specialized. BETA supports the object-oriented perspective on programming and has comprehensive facilities for procedural and functional programming. It has powerful abstraction mechanisms to support identification of objects, classification and composition. BETA is a statically typed language like Simula, Eiffel and C++, with most type checking done at compile-time.[1] BETA aims to achieve an optimal balance between compile-time type checking and run-time type checking. Patterns[edit] A major and peculiar feature of the language is the concept of patterns. In another programming language, such as C++, one would have several classes and procedures. BETA expresses both of these concepts using patterns. For example, a simple class in C++ would have the form class point {    int x, y;}; In BETA, the same class could be represented by the pattern point: (#    x, y: @integer#) That is, a class called point will have two fields, x and y, of type integer. The symbols (# and #) introduce patterns. The colon is used to declare patterns and variables. The @ sign before the integer type in the field definitions specifies that these are integer fields, and not, by contrast, references, arrays or other patterns. As another comparison, a procedure in C++ could have the form int max(int x, int y){    if (x >= y)    {        return x;    }    else    {        return y;    }} In BETA, such a function could be written using a pattern max: (#    x, y, z: @integerenter (x, y)do    (if x >= y // True then        x -> z    else        y -> z    if)exit z#) The x, y and z are local variables. The enter keyword specifies the input parameters to the pattern, while the exit keyword specifies the result of the function. Between the two, the do keyword prefixes the sequence of operations to be made. The conditional block is delimited by (if and if), that is the if keyword becomes part of the opening and closing parenthesis. Truth is checked through // True within an if block. Finally, the assignment operator -> assigns the value on its left hand side to the variable on its right hand side. Hello world![edit] This snippet prints the standard line "Hello world!": (#do ’Hello world!’->PutLine#) Further reading[edit] Ole Lehrmann Madsen, Birger Møller-Pedersen, Kristen Nygaard: Object-Oriented Programming in the BETA Programming Language, [2] Bent Bruun Kristensen, Ole Lehrmann Madsen, Birger Møller-Pedersen: The When, Why and Why Not of the BETA Programming Language, ACM History of Programming Languages III, Conference, San Diego 2007, [3] References[edit] ^ a b Source: [1] Ole Lehrmann Madsen: An overview of BETA ^ https://beta.cs.au.dk/ External links[edit] Official website gbeta Generalized BETA Retrieved from "https://en.wikipedia.org/w/index.php?title=BETA_(programming_language)&oldid=985765823" Categories: Object-oriented programming languages Hidden categories: Articles needing additional references from September 2014 All articles needing additional references Wikipedia articles that are too technical from September 2010 All articles that are too technical Articles with multiple maintenance issues Official website different in Wikidata and Wikipedia Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages Afrikaans العربية Čeština Dansk Deutsch Italiano Magyar Norsk bokmål Русский 中文 Edit links This page was last edited on 27 October 2020, at 20:44 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement