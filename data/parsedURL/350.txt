JPEG - Wikipedia JPEG From Wikipedia, the free encyclopedia This is the latest accepted revision, reviewed on 3 December 2020. Jump to navigation Jump to search For other uses, see JPEG (disambiguation) and JPG (disambiguation). Lossy compression method for digital images This article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages) This article may contain an excessive amount of intricate detail that may interest only a particular audience. Please help by spinning off or relocating any relevant information, and removing excessive detail that may be against Wikipedia's inclusion policy. (December 2019) (Learn how and when to remove this template message) This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. Find sources: "JPEG" – news · newspapers · books · scholar · JSTOR (December 2019) (Learn how and when to remove this template message) (Learn how and when to remove this template message) JPEG A photo of a European wildcat with the compression rate decreasing and hence quality increasing, from left to right Filename extension .jpg, .jpeg, .jpe .jif, .jfif, .jfi Internet media type image/jpeg Type code JPEG[citation needed] Uniform Type Identifier (UTI) public.jpeg Magic number ff d8 ff Developed by Joint Photographic Experts Group, IBM, Mitsubishi Electric, AT&T, Canon Inc.,[1] ITU-T Study Group 16 Initial release September 18, 1992; 28 years ago (1992-09-18) Type of format Lossy image compression format Standard ITU-T T.81, ITU-T T.83, ITU-T T.84, ITU-T T.86, ISO/IEC 10918 Website www.jpeg.org/jpeg/ Play media Continuously varied JPEG compression (between Q=100 and Q=1) for an abdominal CT scan JPEG (/ˈdʒeɪpɛɡ/ JAY-peg)[2] is a commonly used method of lossy compression for digital images, particularly for those images produced by digital photography. The degree of compression can be adjusted, allowing a selectable tradeoff between storage size and image quality. JPEG typically achieves 10:1 compression with little perceptible loss in image quality.[3] Since its introduction in 1992, JPEG has been the most widely used image compression standard in the world,[4][5] and the most widely used digital image format, with several billion JPEG images produced every day as of 2015.[6] The term "JPEG" is an initialism/acronym for the Joint Photographic Experts Group, which created the standard in 1992. The basis for JPEG is the discrete cosine transform (DCT),[1] a lossy image compression technique that was first proposed by Nasir Ahmed in 1972.[7] JPEG was largely responsible for the proliferation of digital images and digital photos across the Internet, and later social media.[8] JPEG compression is used in a number of image file formats. JPEG/Exif is the most common image format used by digital cameras and other photographic image capture devices; along with JPEG/JFIF, it is the most common format for storing and transmitting photographic images on the World Wide Web.[9] These format variations are often not distinguished, and are simply called JPEG. The MIME media type for JPEG is image/jpeg, except in older Internet Explorer versions, which provides a MIME type of image/pjpeg when uploading JPEG images.[10] JPEG files usually have a filename extension of .jpg or .jpeg. JPEG/JFIF supports a maximum image size of 65,535×65,535 pixels,[11] hence up to 4 gigapixels for an aspect ratio of 1:1. In 2000, the JPEG group introduced a format intended to be a successor, JPEG 2000, but it was unable to replace the original JPEG as the dominant image standard.[12] Contents 1 History 1.1 Background 1.2 JPEG standard 1.3 Patent controversy 2 Typical usage 3 JPEG compression 3.1 Lossless editing 4 JPEG files 4.1 JPEG filename extensions 4.2 Color profile 5 Syntax and structure 6 JPEG codec example 6.1 Encoding 6.1.1 Color space transformation 6.1.2 Downsampling 6.1.3 Block splitting 6.1.4 Discrete cosine transform 6.1.5 Quantization 6.1.6 Entropy coding 6.2 Compression ratio and artifacts 6.3 Decoding 6.4 Required precision 7 Effects of JPEG compression 7.1 Sample photographs 8 Lossless further compression 9 Derived formats 9.1 For stereoscopic 3D 9.1.1 JPEG Stereoscopic 9.1.2 JPEG Multi-Picture Format 9.2 JPEG XT 9.3 JPEG XL 9.4 Incompatible JPEG standards 10 Implementations 11 See also 12 References 13 External links History[edit] Background[edit] The original JPEG specification published in 1992 implements processes from various earlier research papers and patents cited by the CCITT (now ITU-T, via ITU-T Study Group 16) and Joint Photographic Experts Group.[1] The main basis for JPEG's lossy compression algorithm is the discrete cosine transform (DCT),[1][13] which was first proposed by Nasir Ahmed as an image compression technique in 1972.[7][13] Ahmed developed a practical DCT algorithm with T. Natarajan of Kansas State University and K. R. Rao of the University of Texas in 1973.[7] Their seminal 1974 paper[14] is cited in the JPEG specification, along with several later research papers that did further work on DCT, including a 1977 paper by Wen-Hsiung Chen, C.H. Smith and S.C. Fralick that described a fast DCT algorithm,[1][15] as well as a 1978 paper by N.J. Narasinha and S.C. Fralick, and a 1984 paper by B.G. Lee.[1] The specification also cites a 1984 paper by Wen-Hsiung Chen and W.K. Pratt as an influence on its quantization algorithm,[1][16] and David A. Huffman's 1952 paper for its Huffman coding algorithm.[1] The JPEG specification cites patents from several companies. The following patents provided the basis for its arithmetic coding algorithm.[1] IBM U.S. Patent 4,652,856 – February 4, 1986 – Kottappuram M. A. Mohiuddin and Jorma J. Rissanen – Multiplication-free multi-alphabet arithmetic code U.S. Patent 4,905,297 – February 27, 1990 – G. Langdon, J.L. Mitchell, W.B. Pennebaker, and Jorma J. Rissanen – Arithmetic coding encoder and decoder system U.S. Patent 4,935,882 – June 19, 1990 – W.B. Pennebaker and J.L. Mitchell – Probability adaptation for arithmetic coders Mitsubishi Electric JP H02202267 (1021672) – January 21, 1989 – Toshihiro Kimura, Shigenori Kino, Fumitaka Ono, Masayuki Yoshida – Coding system JP H03247123 (2-46275) – February 26, 1990 – Fumitaka Ono, Tomohiro Kimura, Masayuki Yoshida, and Shigenori Kino – Coding apparatus and coding method The JPEG specification also cites three other patents from IBM. Other companies cited as patent holders include AT&T (two patents) and Canon Inc.[1] Absent from the list is U.S. Patent 4,698,672 , filed by Compression Labs' Wen-Hsiung Chen and Daniel J. Klenke in October 1986. The patent describes a DCT-based image compression algorithm, and would later be a cause of controversy in 2002 (see Patent controversy below).[17] However, the JPEG specification did cite two earlier research papers by Wen-Hsiung Chen, published in 1977 and 1984.[1] JPEG standard[edit] "JPEG" stands for Joint Photographic Experts Group, the name of the committee that created the JPEG standard and also other still picture coding standards. The "Joint" stood for ISO TC97 WG8 and CCITT SGVIII. Founded in 1986, the group developed the JPEG standard during the late 1980s. Among several transform coding techniques they examined, they selected the discrete cosine transform (DCT), as it was by far the most efficient practical compression technique. The group published the JPEG standard in 1992.[4] In 1987, ISO TC 97 became ISO/IEC JTC1 and, in 1992, CCITT became ITU-T. Currently on the JTC1 side, JPEG is one of two sub-groups of ISO/IEC Joint Technical Committee 1, Subcommittee 29, Working Group 1 (ISO/IEC JTC 1/SC 29/WG 1) – titled as Coding of still pictures.[18][19][20] On the ITU-T side, ITU-T SG16 is the respective body. The original JPEG Group was organized in 1986,[21] issuing the first JPEG standard in 1992, which was approved in September 1992 as ITU-T Recommendation T.81[22] and, in 1994, as ISO/IEC 10918-1. The JPEG standard specifies the codec, which defines how an image is compressed into a stream of bytes and decompressed back into an image, but not the file format used to contain that stream.[23]The Exif and JFIF standards define the commonly used file formats for interchange of JPEG-compressed images. JPEG standards are formally named as Information technology – Digital compression and coding of continuous-tone still images. ISO/IEC 10918 consists of the following parts: Digital compression and coding of continuous-tone still images – Parts[19][21][24] Part ISO/IEC standard ITU-T Rec. First public release date Latest amendment Title Description Part 1 ISO/IEC 10918-1:1994 T.81 (09/92) Sep 18, 1992 Requirements and guidelines Part 2 ISO/IEC 10918-2:1995 T.83 (11/94) Nov 11, 1994 Compliance testing Rules and checks for software conformance (to Part 1). Part 3 ISO/IEC 10918-3:1997 T.84 (07/96) Jul 3, 1996 Apr 1, 1999 Extensions Set of extensions to improve the Part 1, including the Still Picture Interchange File Format (SPIFF).[25] Part 4 ISO/IEC 10918-4:1999 T.86 (06/98) Jun 18, 1998 Jun 29, 2012 Registration of JPEG profiles, SPIFF profiles, SPIFF tags, SPIFF colour spaces, APPn markers, SPIFF compression types and Registration Authorities (REGAUT) methods for registering some of the parameters used to extend JPEG Part 5 ISO/IEC 10918-5:2013 T.871 (05/11) May 14, 2011 JPEG File Interchange Format (JFIF) A popular format which has been the de facto file format for images encoded by the JPEG standard. In 2009, the JPEG Committee formally established an Ad Hoc Group to standardize JFIF as JPEG Part 5.[26] Part 6 ISO/IEC 10918-6:2013 T.872 (06/12) Jun 2012 Application to printing systems Specifies a subset of features and application tools for the interchange of images encoded according to the ISO/IEC 10918-1 for printing. Part 7 ISO/IEC 10918-7:2019 T.873 (05/19) May 2019 Digital compression and coding of continuous-tone still images Provides reference software for the coding technology specified in Recommendation ITU-T T.81 - ISO/IEC 10918-1. While the reference implementations also provide an encoder, conformance testing of their encoding process is beyond the scope of this Specification. Ecma International TR/98 specifies the JPEG File Interchange Format (JFIF); the first edition was published in June 2009.[27] Patent controversy[edit] In 2002, Forgent Networks asserted that it owned and would enforce patent rights on the JPEG technology, arising from a patent that had been filed on October 27, 1986, and granted on October 6, 1987: U.S. Patent 4,698,672 by Compression Labs' Wen-Hsiung Chen and Daniel J. Klenke.[17][28] While Forgent did not own Compression Labs at the time, Chen later sold Compression Labs to Forgent, before Chen went on to work for Cisco. This led to Forgent acquiring ownership over the patent.[17] Forgent's 2002 announcement created a furor reminiscent of Unisys' attempts to assert its rights over the GIF image compression standard. The JPEG committee investigated the patent claims in 2002 and were of the opinion that they were invalidated by prior art,[29] a view shared by various experts.[17][30] The patent describes an image compression algorithm based on the discrete cosine transform (DCT),[17] a lossy image compression technique that originated from a 1974 paper by Nasir Ahmed, T. Natarajan and K. R. Rao.[1][13][14] Wen-Hsiung Chen further developed their DCT technique, describing a fast DCT algorithm in a 1977 paper with C.H. Smith and S.C. Fralick.[15][17] The 1992 JPEG specification cites both the 1974 Ahmed paper and the 1977 Chen paper for its DCT algorithm, as well as a 1984 paper by Chen and W.K. Pratt for its quantization algorithm.[1][16] Compression Labs was founded by Chen, and was the first company to commercialize DCT technology.[31] By the time Chen had filed his patent for a DCT-based image compression algorithm with Klenke in 1986, most of what would later become the JPEG standard had already been formulated in prior literature.[17] JPEG representative Richard Clark also claimed that Chen himself sat in one of the JPEG committees, but Forgent denied this claim.[17] Between 2002 and 2004, Forgent was able to obtain about US$105 million by licensing their patent to some 30 companies. In April 2004, Forgent sued 31 other companies to enforce further license payments. In July of the same year, a consortium of 21 large computer companies filed a countersuit, with the goal of invalidating the patent. In addition, Microsoft launched a separate lawsuit against Forgent in April 2005.[32] In February 2006, the United States Patent and Trademark Office agreed to re-examine Forgent's JPEG patent at the request of the Public Patent Foundation.[33] On May 26, 2006 the USPTO found the patent invalid based on prior art. The USPTO also found that Forgent knew about the prior art, yet it intentionally avoided telling the Patent Office. This makes any appeal to reinstate the patent highly unlikely to succeed.[34] Forgent also possesses a similar patent granted by the European Patent Office in 1994, though it is unclear how enforceable it is.[35] As of October 27, 2006, the U.S. patent's 20-year term appears to have expired, and in November 2006, Forgent agreed to abandon enforcement of patent claims against use of the JPEG standard.[36] The JPEG committee has as one of its explicit goals that their standards (in particular their baseline methods) be implementable without payment of license fees, and they have secured appropriate license rights for their JPEG 2000 standard from over 20 large organizations. Beginning in August 2007, another company, Global Patent Holdings, LLC claimed that its patent (U.S. Patent 5,253,341 ) issued in 1993, is infringed by the downloading of JPEG images on either a website or through e-mail. If not invalidated, this patent could apply to any website that displays JPEG images. The patent was under reexamination by the U.S. Patent and Trademark Office from 2000–2007; in July 2007, the Patent Office revoked all of the original claims of the patent but found that an additional claim proposed by Global Patent Holdings (claim 17) was valid.[37] Global Patent Holdings then filed a number of lawsuits based on claim 17 of its patent. In its first two lawsuits following the reexamination, both filed in Chicago, Illinois, Global Patent Holdings sued the Green Bay Packers, CDW, Motorola, Apple, Orbitz, Officemax, Caterpillar, Kraft and Peapod as defendants. A third lawsuit was filed on December 5, 2007 in South Florida against ADT Security Services, AutoNation, Florida Crystals Corp., HearUSA, MovieTickets.com, Ocwen Financial Corp. and Tire Kingdom, and a fourth lawsuit on January 8, 2008 in South Florida against the Boca Raton Resort & Club. A fifth lawsuit was filed against Global Patent Holdings in Nevada. That lawsuit was filed by Zappos.com, Inc., which was allegedly threatened by Global Patent Holdings, and sought a judicial declaration that the '341 patent is invalid and not infringed. Global Patent Holdings had also used the '341 patent to sue or threaten outspoken critics of broad software patents, including Gregory Aharonian[38] and the anonymous operator of a website blog known as the "Patent Troll Tracker."[39] On December 21, 2007, patent lawyer Vernon Francissen of Chicago asked the U.S. Patent and Trademark Office to reexamine the sole remaining claim of the '341 patent on the basis of new prior art.[40] On March 5, 2008, the U.S. Patent and Trademark Office agreed to reexamine the '341 patent, finding that the new prior art raised substantial new questions regarding the patent's validity.[41] In light of the reexamination, the accused infringers in four of the five pending lawsuits have filed motions to suspend (stay) their cases until completion of the U.S. Patent and Trademark Office's review of the '341 patent. On April 23, 2008, a judge presiding over the two lawsuits in Chicago, Illinois granted the motions in those cases.[42] On July 22, 2008, the Patent Office issued the first "Office Action" of the second reexamination, finding the claim invalid based on nineteen separate grounds.[43] On Nov. 24, 2009, a Reexamination Certificate was issued cancelling all claims. Beginning in 2011 and continuing as of early 2013, an entity known as Princeton Digital Image Corporation,[44] based in Eastern Texas, began suing large numbers of companies for alleged infringement of U.S. Patent 4,813,056 . Princeton claims that the JPEG image compression standard infringes the '056 patent and has sued large numbers of websites, retailers, camera and device manufacturers and resellers. The patent was originally owned and assigned to General Electric. The patent expired in December 2007, but Princeton has sued large numbers of companies for "past infringement" of this patent. (Under U.S. patent laws, a patent owner can sue for "past infringement" up to six years before the filing of a lawsuit, so Princeton could theoretically have continued suing companies until December 2013.) As of March 2013, Princeton had suits pending in New York and Delaware against more than 55 companies. General Electric's involvement in the suit is unknown, although court records indicate that it assigned the patent to Princeton in 2009 and retains certain rights in the patent.[45] Typical usage[edit] The JPEG compression algorithm operates at its best on photographs and paintings of realistic scenes with smooth variations of tone and color. For web usage, where reducing the amount of data used for an image is important for responsive presentation, JPEG's compression benefits make JPEG popular. JPEG/Exif is also the most common format saved by digital cameras. However, JPEG is not well suited for line drawings and other textual or iconic graphics, where the sharp contrasts between adjacent pixels can cause noticeable artifacts. Such images are better saved in a lossless graphics format such as TIFF, GIF, or PNG.[46] The JPEG standard includes a lossless coding mode, but that mode is not supported in most products. As the typical use of JPEG is a lossy compression method, which reduces the image fidelity, it is inappropriate for exact reproduction of imaging data (such as some scientific and medical imaging applications and certain technical image processing work). JPEG is also not well suited to files that will undergo multiple edits, as some image quality is lost each time the image is recompressed, particularly if the image is cropped or shifted, or if encoding parameters are changed – see digital generation loss for details. To prevent image information loss during sequential and repetitive editing, the first edit can be saved in a lossless format, subsequently edited in that format, then finally published as JPEG for distribution. JPEG compression[edit] JPEG uses a lossy form of compression based on the discrete cosine transform (DCT). This mathematical operation converts each frame/field of the video source from the spatial (2D) domain into the frequency domain (a.k.a. transform domain). A perceptual model based loosely on the human psychovisual system discards high-frequency information, i.e. sharp transitions in intensity, and color hue. In the transform domain, the process of reducing information is called quantization. In simpler terms, quantization is a method for optimally reducing a large number scale (with different occurrences of each number) into a smaller one, and the transform-domain is a convenient representation of the image because the high-frequency coefficients, which contribute less to the overall picture than other coefficients, are characteristically small-values with high compressibility. The quantized coefficients are then sequenced and losslessly packed into the output bitstream. Nearly all software implementations of JPEG permit user control over the compression ratio (as well as other optional parameters), allowing the user to trade off picture-quality for smaller file size. In embedded applications (such as miniDV, which uses a similar DCT-compression scheme), the parameters are pre-selected and fixed for the application. The compression method is usually lossy, meaning that some original image information is lost and cannot be restored, possibly affecting image quality. There is an optional lossless mode defined in the JPEG standard. However, this mode is not widely supported in products. There is also an interlaced progressive JPEG format, in which data is compressed in multiple passes of progressively higher detail. This is ideal for large images that will be displayed while downloading over a slow connection, allowing a reasonable preview after receiving only a portion of the data. However, support for progressive JPEGs is not universal. When progressive JPEGs are received by programs that do not support them (such as versions of Internet Explorer before Windows 7)[47] the software displays the image only after it has been completely downloaded. Lossless editing[edit] See also: jpegtran A number of alterations to a JPEG image can be performed losslessly (that is, without recompression and the associated quality loss) as long as the image size is a multiple of 1 MCU block (Minimum Coded Unit) (usually 16 pixels in both directions, for 4:2:0 chroma subsampling). Utilities that implement this include: jpegtran and its GUI, Jpegcrop. IrfanView using "JPG Lossless Crop (PlugIn)" and "JPG Lossless Rotation (PlugIn)", which require installing the JPG_TRANSFORM plugin. FastStone Image Viewer using "Lossless Crop to File" and "JPEG Lossless Rotate". XnViewMP using "JPEG lossless transformations". ACDSee supports lossless rotation (but not lossless cropping) with its "Force lossless JPEG operations" option. Blocks can be rotated in 90-degree increments, flipped in the horizontal, vertical and diagonal axes and moved about in the image. Not all blocks from the original image need to be used in the modified one. The top and left edge of a JPEG image must lie on an 8 × 8 pixel block boundary, but the bottom and right edge need not do so. This limits the possible lossless crop operations, and also prevents flips and rotations of an image whose bottom or right edge does not lie on a block boundary for all channels (because the edge would end up on top or left, where – as aforementioned – a block boundary is obligatory). Rotations where the image width and height not a multiple of 8 or 16 (depending upon the chroma subsampling), are not lossless. Rotating such an image causes the blocks to be recomputed which results in loss of quality.[48] When using lossless cropping, if the bottom or right side of the crop region is not on a block boundary, then the rest of the data from the partially used blocks will still be present in the cropped file and can be recovered. It is also possible to transform between baseline and progressive formats without any loss of quality, since the only difference is the order in which the coefficients are placed in the file. Furthermore, several JPEG images can be losslessly joined together, as long as they were saved with the same quality and the edges coincide with block boundaries. JPEG files[edit] The file format known as "JPEG Interchange Format" (JIF) is specified in Annex B of the standard. However, this "pure" file format is rarely used, primarily because of the difficulty of programming encoders and decoders that fully implement all aspects of the standard and because of certain shortcomings of the standard: Color space definition Component sub-sampling registration Pixel aspect ratio definition. Several additional standards have evolved to address these issues. The first of these, released in 1992, was the JPEG File Interchange Format (or JFIF), followed in recent years by Exchangeable image file format (Exif) and ICC color profiles. Both of these formats use the actual JIF byte layout, consisting of different markers, but in addition, employ one of the JIF standard's extension points, namely the application markers: JFIF uses APP0, while Exif uses APP1. Within these segments of the file that were left for future use in the JIF standard and are not read by it, these standards add specific metadata. Thus, in some ways, JFIF is a cut-down version of the JIF standard in that it specifies certain constraints (such as not allowing all the different encoding modes), while in other ways, it is an extension of JIF due to the added metadata. The documentation for the original JFIF standard states:[49] JPEG File Interchange Format is a minimal file format which enables JPEG bitstreams to be exchanged between a wide variety of platforms and applications. This minimal format does not include any of the advanced features found in the TIFF JPEG specification or any application specific file format. Nor should it, for the only purpose of this simplified format is to allow the exchange of JPEG compressed images. Image files that employ JPEG compression are commonly called "JPEG files", and are stored in variants of the JIF image format. Most image capture devices (such as digital cameras) that output JPEG are actually creating files in the Exif format, the format that the camera industry has standardized on for metadata interchange. On the other hand, since the Exif standard does not allow color profiles, most image editing software stores JPEG in JFIF format, and also includes the APP1 segment from the Exif file to include the metadata in an almost-compliant way; the JFIF standard is interpreted somewhat flexibly.[50] Strictly speaking, the JFIF and Exif standards are incompatible, because each specifies that its marker segment (APP0 or APP1, respectively) appear first. In practice, most JPEG files contain a JFIF marker segment that precedes the Exif header. This allows older readers to correctly handle the older format JFIF segment, while newer readers also decode the following Exif segment, being less strict about requiring it to appear first. JPEG filename extensions[edit] The most common filename extensions for files employing JPEG compression are .jpg and .jpeg, though .jpe, .jfif and .jif are also used. It is also possible for JPEG data to be embedded in other file types – TIFF encoded files often embed a JPEG image as a thumbnail of the main image; and MP3 files can contain a JPEG of cover art in the ID3v2 tag. Color profile[edit] Many JPEG files embed an ICC color profile (color space). Commonly used color profiles include sRGB and Adobe RGB. Because these color spaces use a non-linear transformation, the dynamic range of an 8-bit JPEG file is about 11 stops; see gamma curve. Syntax and structure[edit] A JPEG image consists of a sequence of segments, each beginning with a marker, each of which begins with a 0xFF byte, followed by a byte indicating what kind of marker it is. Some markers consist of just those two bytes; others are followed by two bytes (high then low), indicating the length of marker-specific payload data that follows. (The length includes the two bytes for the length, but not the two bytes for the marker.) Some markers are followed by entropy-coded data; the length of such a marker does not include the entropy-coded data. Note that consecutive 0xFF bytes are used as fill bytes for padding purposes, although this fill byte padding should only ever take place for markers immediately following entropy-coded scan data (see JPEG specification section B.1.1.2 and E.1.2 for details; specifically "In all cases where markers are appended after the compressed data, optional 0xFF fill bytes may precede the marker"). Within the entropy-coded data, after any 0xFF byte, a 0x00 byte is inserted by the encoder before the next byte, so that there does not appear to be a marker where none is intended, preventing framing errors. Decoders must skip this 0x00 byte. This technique, called byte stuffing (see JPEG specification section F.1.2.3), is only applied to the entropy-coded data, not to marker payload data. Note however that entropy-coded data has a few markers of its own; specifically the Reset markers (0xD0 through 0xD7), which are used to isolate independent chunks of entropy-coded data to allow parallel decoding, and encoders are free to insert these Reset markers at regular intervals (although not all encoders do this). Common JPEG markers[51] Short name Bytes Payload Name Comments SOI 0xFF, 0xD8 none Start Of Image SOF0 0xFF, 0xC0 variable size Start Of Frame (baseline DCT) Indicates that this is a baseline DCT-based JPEG, and specifies the width, height, number of components, and component subsampling (e.g., 4:2:0). SOF2 0xFF, 0xC2 variable size Start Of Frame (progressive DCT) Indicates that this is a progressive DCT-based JPEG, and specifies the width, height, number of components, and component subsampling (e.g., 4:2:0). DHT 0xFF, 0xC4 variable size Define Huffman Table(s) Specifies one or more Huffman tables. DQT 0xFF, 0xDB variable size Define Quantization Table(s) Specifies one or more quantization tables. DRI 0xFF, 0xDD 4 bytes Define Restart Interval Specifies the interval between RSTn markers, in Minimum Coded Units (MCUs). This marker is followed by two bytes indicating the fixed size so it can be treated like any other variable size segment. SOS 0xFF, 0xDA variable size Start Of Scan Begins a top-to-bottom scan of the image. In baseline DCT JPEG images, there is generally a single scan. Progressive DCT JPEG images usually contain multiple scans. This marker specifies which slice of data it will contain, and is immediately followed by entropy-coded data. RSTn 0xFF, 0xDn (n=0..7) none Restart Inserted every r macroblocks, where r is the restart interval set by a DRI marker. Not used if there was no DRI marker. The low three bits of the marker code cycle in value from 0 to 7. APPn 0xFF, 0xEn variable size Application-specific For example, an Exif JPEG file uses an APP1 marker to store metadata, laid out in a structure based closely on TIFF. COM 0xFF, 0xFE variable size Comment Contains a text comment. EOI 0xFF, 0xD9 none End Of Image There are other Start Of Frame markers that introduce other kinds of JPEG encodings. Since several vendors might use the same APPn marker type, application-specific markers often begin with a standard or vendor name (e.g., "Exif" or "Adobe") or some other identifying string. At a restart marker, block-to-block predictor variables are reset, and the bitstream is synchronized to a byte boundary. Restart markers provide means for recovery after bitstream error, such as transmission over an unreliable network or file corruption. Since the runs of macroblocks between restart markers may be independently decoded, these runs may be decoded in parallel. JPEG codec example[edit] This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed. (December 2019) (Learn how and when to remove this template message) Although a JPEG file can be encoded in various ways, most commonly it is done with JFIF encoding. The encoding process consists of several steps: The representation of the colors in the image is converted to Y′CBCR, consisting of one luma component (Y'), representing brightness, and two chroma components, (CB and CR), representing color. This step is sometimes skipped. The resolution of the chroma data is reduced, usually by a factor of 2 or 3. This reflects the fact that the eye is less sensitive to fine color details than to fine brightness details. The image is split into blocks of 8×8 pixels, and for each block, each of the Y, CB, and CR data undergoes the discrete cosine transform (DCT). A DCT is similar to a Fourier transform in the sense that it produces a kind of spatial frequency spectrum. The amplitudes of the frequency components are quantized. Human vision is much more sensitive to small variations in color or brightness over large areas than to the strength of high-frequency brightness variations. Therefore, the magnitudes of the high-frequency components are stored with a lower accuracy than the low-frequency components. The quality setting of the encoder (for example 50 or 95 on a scale of 0–100 in the Independent JPEG Group's library[52]) affects to what extent the resolution of each frequency component is reduced. If an excessively low quality setting is used, the high-frequency components are discarded altogether. The resulting data for all 8×8 blocks is further compressed with a lossless algorithm, a variant of Huffman encoding. The decoding process reverses these steps, except the quantization because it is irreversible. In the remainder of this section, the encoding and decoding processes are described in more detail. Encoding[edit] Many of the options in the JPEG standard are not commonly used, and as mentioned above, most image software uses the simpler JFIF format when creating a JPEG file, which among other things specifies the encoding method. Here is a brief description of one of the more common methods of encoding when applied to an input that has 24 bits per pixel (eight each of red, green, and blue). This particular option is a lossy data compression method. Color space transformation[edit] First, the image should be converted from RGB into a different color space called Y′CBCR (or, informally, YCbCr). It has three components Y', CB and CR: the Y' component represents the brightness of a pixel, and the CB and CR components represent the chrominance (split into blue and red components). This is basically the same color space as used by digital color television as well as digital video including video DVDs, and is similar to the way color is represented in analog PAL video and MAC (but not by analog NTSC, which uses the YIQ color space). The Y′CBCR color space conversion allows greater compression without a significant effect on perceptual image quality (or greater perceptual image quality for the same compression). The compression is more efficient because the brightness information, which is more important to the eventual perceptual quality of the image, is confined to a single channel. This more closely corresponds to the perception of color in the human visual system. The color transformation also improves compression by statistical decorrelation. A particular conversion to Y′CBCR is specified in the JFIF standard, and should be performed for the resulting JPEG file to have maximum compatibility. However, some JPEG implementations in "highest quality" mode do not apply this step and instead keep the color information in the RGB color model,[53] where the image is stored in separate channels for red, green and blue brightness components. This results in less efficient compression, and would not likely be used when file size is especially important. Downsampling[edit] This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed. (December 2019) (Learn how and when to remove this template message) Due to the densities of color- and brightness-sensitive receptors in the human eye, humans can see considerably more fine detail in the brightness of an image (the Y' component) than in the hue and color saturation of an image (the Cb and Cr components). Using this knowledge, encoders can be designed to compress images more efficiently. The transformation into the Y′CBCR color model enables the next usual step, which is to reduce the spatial resolution of the Cb and Cr components (called "downsampling" or "chroma subsampling"). The ratios at which the downsampling is ordinarily done for JPEG images are 4:4:4 (no downsampling), 4:2:2 (reduction by a factor of 2 in the horizontal direction), or (most commonly) 4:2:0 (reduction by a factor of 2 in both the horizontal and vertical directions). For the rest of the compression process, Y', Cb and Cr are processed separately and in a very similar manner. Block splitting[edit] This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed. (December 2019) (Learn how and when to remove this template message) After subsampling, each channel must be split into 8×8 blocks. Depending on chroma subsampling, this yields Minimum Coded Unit (MCU) blocks of size 8×8 (4:4:4 – no subsampling), 16×8 (4:2:2), or most commonly 16×16 (4:2:0). In video compression MCUs are called macroblocks. If the data for a channel does not represent an integer number of blocks then the encoder must fill the remaining area of the incomplete blocks with some form of dummy data. Filling the edges with a fixed color (for example, black) can create ringing artifacts along the visible part of the border;repeating the edge pixels is a common technique that reduces (but does not necessarily completely eliminate) such artifacts, and more sophisticated border filling techniques can also be applied. Discrete cosine transform[edit] The 8×8 sub-image shown in 8-bit grayscale Next, each 8×8 block of each component (Y, Cb, Cr) is converted to a frequency-domain representation, using a normalized, two-dimensional type-II discrete cosine transform (DCT), see Citation 1 in discrete cosine transform. The DCT is sometimes referred to as "type-II DCT" in the context of a family of transforms as in discrete cosine transform, and the corresponding inverse (IDCT) is denoted as "type-III DCT". As an example, one such 8×8 8-bit subimage might be: [ 52 55 61 66 70 61 64 73 63 59 55 90 109 85 69 72 62 59 68 113 144 104 66 73 63 58 71 122 154 106 70 69 67 61 68 104 126 88 68 70 79 65 60 70 77 68 58 75 85 71 64 59 55 61 65 83 87 79 69 68 65 76 78 94 ] . {\displaystyle \left[{\begin{array}{rrrrrrrr}52&55&61&66&70&61&64&73\\63&59&55&90&109&85&69&72\\62&59&68&113&144&104&66&73\\63&58&71&122&154&106&70&69\\67&61&68&104&126&88&68&70\\79&65&60&70&77&68&58&75\\85&71&64&59&55&61&65&83\\87&79&69&68&65&76&78&94\end{array}}\right].} Before computing the DCT of the 8×8 block, its values are shifted from a positive range to one centered on zero. For an 8-bit image, each entry in the original block falls in the range [ 0 , 255 ] {\displaystyle [0,255]} . The midpoint of the range (in this case, the value 128) is subtracted from each entry to produce a data range that is centered on zero, so that the modified range is [ − 128 , 127 ] {\displaystyle [-128,127]} . This step reduces the dynamic range requirements in the DCT processing stage that follows. This step results in the following values: g = x ⟶ [ − 76 − 73 − 67 − 62 − 58 − 67 − 64 − 55 − 65 − 69 − 73 − 38 − 19 − 43 − 59 − 56 − 66 − 69 − 60 − 15 16 − 24 − 62 − 55 − 65 − 70 − 57 − 6 26 − 22 − 58 − 59 − 61 − 67 − 60 − 24 − 2 − 40 − 60 − 58 − 49 − 63 − 68 − 58 − 51 − 60 − 70 − 53 − 43 − 57 − 64 − 69 − 73 − 67 − 63 − 45 − 41 − 49 − 59 − 60 − 63 − 52 − 50 − 34 ] ↓ y . {\displaystyle g={\begin{array}{c}x\\\longrightarrow \\\left[{\begin{array}{rrrrrrrr}-76&-73&-67&-62&-58&-67&-64&-55\\-65&-69&-73&-38&-19&-43&-59&-56\\-66&-69&-60&-15&16&-24&-62&-55\\-65&-70&-57&-6&26&-22&-58&-59\\-61&-67&-60&-24&-2&-40&-60&-58\\-49&-63&-68&-58&-51&-60&-70&-53\\-43&-57&-64&-69&-73&-67&-63&-45\\-41&-49&-59&-60&-63&-52&-50&-34\end{array}}\right]\end{array}}{\Bigg \downarrow }y.} The DCT transforms an 8×8 block of input values to a linear combination of these 64 patterns. The patterns are referred to as the two-dimensional DCT basis functions, and the output values are referred to as transform coefficients. The horizontal index is u {\displaystyle u} and the vertical index is v {\displaystyle v} . The next step is to take the two-dimensional DCT, which is given by: G u , v = 1 4 α ( u ) α ( v ) ∑ x = 0 7 ∑ y = 0 7 g x , y cos ⁡ [ ( 2 x + 1 ) u π 16 ] cos ⁡ [ ( 2 y + 1 ) v π 16 ] {\displaystyle \ G_{u,v}={\frac {1}{4}}\alpha (u)\alpha (v)\sum _{x=0}^{7}\sum _{y=0}^{7}g_{x,y}\cos \left[{\frac {(2x+1)u\pi }{16}}\right]\cos \left[{\frac {(2y+1)v\pi }{16}}\right]} where u {\displaystyle \ u} is the horizontal spatial frequency, for the integers 0 ≤ u < 8 {\displaystyle \ 0\leq u<8} . v {\displaystyle \ v} is the vertical spatial frequency, for the integers 0 ≤ v < 8 {\displaystyle \ 0\leq v<8} . α ( u ) = { 1 2 , if u = 0 1 , otherwise {\displaystyle \alpha (u)={\begin{cases}{\frac {1}{\sqrt {2}}},&{\mbox{if }}u=0\\1,&{\mbox{otherwise}}\end{cases}}} is a normalizing scale factor to make the transformation orthonormal g x , y {\displaystyle \ g_{x,y}} is the pixel value at coordinates ( x , y ) {\displaystyle \ (x,y)} G u , v {\displaystyle \ G_{u,v}} is the DCT coefficient at coordinates ( u , v ) . {\displaystyle \ (u,v).} If we perform this transformation on our matrix above, we get the following (rounded to the nearest two digits beyond the decimal point): G = u ⟶ [ − 415.38 − 30.19 − 61.20 27.24 56.12 − 20.10 − 2.39 0.46 4.47 − 21.86 − 60.76 10.25 13.15 − 7.09 − 8.54 4.88 − 46.83 7.37 77.13 − 24.56 − 28.91 9.93 5.42 − 5.65 − 48.53 12.07 34.10 − 14.76 − 10.24 6.30 1.83 1.95 12.12 − 6.55 − 13.20 − 3.95 − 1.87 1.75 − 2.79 3.14 − 7.73 2.91 2.38 − 5.94 − 2.38 0.94 4.30 1.85 − 1.03 0.18 0.42 − 2.42 − 0.88 − 3.02 4.12 − 0.66 − 0.17 0.14 − 1.07 − 4.19 − 1.17 − 0.10 0.50 1.68 ] ↓ v . {\displaystyle G={\begin{array}{c}u\\\longrightarrow \\\left[{\begin{array}{rrrrrrrr}-415.38&-30.19&-61.20&27.24&56.12&-20.10&-2.39&0.46\\4.47&-21.86&-60.76&10.25&13.15&-7.09&-8.54&4.88\\-46.83&7.37&77.13&-24.56&-28.91&9.93&5.42&-5.65\\-48.53&12.07&34.10&-14.76&-10.24&6.30&1.83&1.95\\12.12&-6.55&-13.20&-3.95&-1.87&1.75&-2.79&3.14\\-7.73&2.91&2.38&-5.94&-2.38&0.94&4.30&1.85\\-1.03&0.18&0.42&-2.42&-0.88&-3.02&4.12&-0.66\\-0.17&0.14&-1.07&-4.19&-1.17&-0.10&0.50&1.68\end{array}}\right]\end{array}}{\Bigg \downarrow }v.} Note the top-left corner entry with the rather large magnitude. This is the DC coefficient (also called the constant component), which defines the basic hue for the entire block. The remaining 63 coefficients are the AC coefficients (also called the alternating components).[54] The advantage of the DCT is its tendency to aggregate most of the signal in one corner of the result, as may be seen above. The quantization step to follow accentuates this effect while simultaneously reducing the overall size of the DCT coefficients, resulting in a signal that is easy to compress efficiently in the entropy stage. The DCT temporarily increases the bit-depth of the data, since the DCT coefficients of an 8-bit/component image take up to 11 or more bits (depending on fidelity of the DCT calculation) to store. This may force the codec to temporarily use 16-bit numbers to hold these coefficients, doubling the size of the image representation at this point; these values are typically reduced back to 8-bit values by the quantization step. The temporary increase in size at this stage is not a performance concern for most JPEG implementations, since typically only a very small part of the image is stored in full DCT form at any given time during the image encoding or decoding process. Quantization[edit] This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed. (December 2019) (Learn how and when to remove this template message) The human eye is good at seeing small differences in brightness over a relatively large area, but not so good at distinguishing the exact strength of a high frequency brightness variation. This allows one to greatly reduce the amount of information in the high frequency components. This is done by simply dividing each component in the frequency domain by a constant for that component, and then rounding to the nearest integer. This rounding operation is the only lossy operation in the whole process (other than chroma subsampling) if the DCT computation is performed with sufficiently high precision. As a result of this, it is typically the case that many of the higher frequency components are rounded to zero, and many of the rest become small positive or negative numbers, which take many fewer bits to represent. The elements in the quantization matrix control the compression ratio, with larger values producing greater compression. A typical quantization matrix (for a quality of 50% as specified in the original JPEG Standard), is as follows: Q = [ 16 11 10 16 24 40 51 61 12 12 14 19 26 58 60 55 14 13 16 24 40 57 69 56 14 17 22 29 51 87 80 62 18 22 37 56 68 109 103 77 24 35 55 64 81 104 113 92 49 64 78 87 103 121 120 101 72 92 95 98 112 100 103 99 ] . {\displaystyle Q={\begin{bmatrix}16&11&10&16&24&40&51&61\\12&12&14&19&26&58&60&55\\14&13&16&24&40&57&69&56\\14&17&22&29&51&87&80&62\\18&22&37&56&68&109&103&77\\24&35&55&64&81&104&113&92\\49&64&78&87&103&121&120&101\\72&92&95&98&112&100&103&99\end{bmatrix}}.} The quantized DCT coefficients are computed with B j , k = r o u n d ( G j , k Q j , k ) for j = 0 , 1 , 2 , … , 7 ; k = 0 , 1 , 2 , … , 7 {\displaystyle B_{j,k}=\mathrm {round} \left({\frac {G_{j,k}}{Q_{j,k}}}\right){\mbox{ for }}j=0,1,2,\ldots ,7;k=0,1,2,\ldots ,7} where G {\displaystyle G} is the unquantized DCT coefficients; Q {\displaystyle Q} is the quantization matrix above; and B {\displaystyle B} is the quantized DCT coefficients. Using this quantization matrix with the DCT coefficient matrix from above results in: Left: a final image is built up from a series of basis functions. Right: each of the DCT basis functions that comprise the image, and the corresponding weighting coefficient. Middle: the basis function, after multiplication by the coefficient: this component is added to the final image. For clarity, the 8×8 macroblock in this example is magnified by 10x using bilinear interpolation. B = [ − 26 − 3 − 6 2 2 − 1 0 0 0 − 2 − 4 1 1 0 0 0 − 3 1 5 − 1 − 1 0 0 0 − 3 1 2 − 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] . {\displaystyle B=\left[{\begin{array}{rrrrrrrr}-26&-3&-6&2&2&-1&0&0\\0&-2&-4&1&1&0&0&0\\-3&1&5&-1&-1&0&0&0\\-3&1&2&-1&0&0&0&0\\1&0&0&0&0&0&0&0\\0&0&0&0&0&0&0&0\\0&0&0&0&0&0&0&0\\0&0&0&0&0&0&0&0\end{array}}\right].} For example, using −415 (the DC coefficient) and rounding to the nearest integer r o u n d ( − 415.37 16 ) = r o u n d ( − 25.96 ) = − 26. {\displaystyle \mathrm {round} \left({\frac {-415.37}{16}}\right)=\mathrm {round} \left(-25.96\right)=-26.} Notice that most of the higher-frequency elements of the sub-block (i.e., those with an x or y spatial frequency greater than 4) are quantized into zero values. Entropy coding[edit] This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed. (December 2019) (Learn how and when to remove this template message) Main article: Entropy encoding Zigzag ordering of JPEG image components Entropy coding is a special form of lossless data compression. It involves arranging the image components in a "zigzag" order employing run-length encoding (RLE) algorithm that groups similar frequencies together, inserting length coding zeros, and then using Huffman coding on what is left. The JPEG standard also allows, but does not require, decoders to support the use of arithmetic coding, which is mathematically superior to Huffman coding. However, this feature has rarely been used, as it was historically covered by patents requiring royalty-bearing licenses, and because it is slower to encode and decode compared to Huffman coding. Arithmetic coding typically makes files about 5–7% smaller. The previous quantized DC coefficient is used to predict the current quantized DC coefficient. The difference between the two is encoded rather than the actual value. The encoding of the 63 quantized AC coefficients does not use such prediction differencing. The zigzag sequence for the above quantized coefficients are shown below. (The format shown is just for ease of understanding/viewing.) −26 −3 0 −3 −2 −6 2 −4 1 −3 1 1 5 1 2 −1 1 −1 2 0 0 0 0 0 −1 −1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 If the i-th block is represented by B i {\displaystyle B_{i}} and positions within each block are represented by ( p , q ) {\displaystyle (p,q)} where p = 0 , 1 , . . . , 7 {\displaystyle p=0,1,...,7} and q = 0 , 1 , . . . , 7 {\displaystyle q=0,1,...,7} , then any coefficient in the DCT image can be represented as B i ( p , q ) {\displaystyle B_{i}(p,q)} . Thus, in the above scheme, the order of encoding pixels (for the i-th block) is B i ( 0 , 0 ) {\displaystyle B_{i}(0,0)} , B i ( 0 , 1 ) {\displaystyle B_{i}(0,1)} , B i ( 1 , 0 ) {\displaystyle B_{i}(1,0)} , B i ( 2 , 0 ) {\displaystyle B_{i}(2,0)} , B i ( 1 , 1 ) {\displaystyle B_{i}(1,1)} , B i ( 0 , 2 ) {\displaystyle B_{i}(0,2)} , B i ( 0 , 3 ) {\displaystyle B_{i}(0,3)} , B i ( 1 , 2 ) {\displaystyle B_{i}(1,2)} and so on. Baseline sequential JPEG encoding and decoding processes This encoding mode is called baseline sequential encoding. Baseline JPEG also supports progressive encoding. While sequential encoding encodes coefficients of a single block at a time (in a zigzag manner), progressive encoding encodes similar-positioned batch of coefficients of all blocks in one go (called a scan), followed by the next batch of coefficients of all blocks, and so on. For example, if the image is divided into N 8×8 blocks B 0 , B 1 , B 2 , . . . , B n − 1 {\displaystyle B_{0},B_{1},B_{2},...,B_{n-1}} , then a 3-scan progressive encoding encodes DC component, B i ( 0 , 0 ) {\displaystyle B_{i}(0,0)} for all blocks, i.e., for all i = 0 , 1 , 2 , . . . , N − 1 {\displaystyle i=0,1,2,...,N-1} , in first scan. This is followed by the second scan which encoding a few more components (assuming four more components, they are B i ( 0 , 1 ) {\displaystyle B_{i}(0,1)} to B i ( 1 , 1 ) {\displaystyle B_{i}(1,1)} , still in a zigzag manner) coefficients of all blocks (so the sequence is: B 0 ( 0 , 1 ) , B 0 ( 1 , 0 ) , B 0 ( 2 , 0 ) , B 0 ( 1 , 1 ) , B 1 ( 0 , 1 ) , B 1 ( 1 , 0 ) , . . . , B N ( 2 , 0 ) , B N ( 1 , 1 ) {\displaystyle B_{0}(0,1),B_{0}(1,0),B_{0}(2,0),B_{0}(1,1),B_{1}(0,1),B_{1}(1,0),...,B_{N}(2,0),B_{N}(1,1)} ), followed by all the remained coefficients of all blocks in the last scan. Once all similar-positioned coefficients have been encoded, the next position to be encoded is the one occurring next in the zigzag traversal as indicated in the figure above. It has been found that baseline progressive JPEG encoding usually gives better compression as compared to baseline sequential JPEG due to the ability to use different Huffman tables (see below) tailored for different frequencies on each "scan" or "pass" (which includes similar-positioned coefficients), though the difference is not too large. In the rest of the article, it is assumed that the coefficient pattern generated is due to sequential mode. In order to encode the above generated coefficient pattern, JPEG uses Huffman encoding. The JPEG standard provides general-purpose Huffman tables; encoders may also choose to generate Huffman tables optimized for the actual frequency distributions in images being encoded. The process of encoding the zig-zag quantized data begins with a run-length encoding explained below, where: x is the non-zero, quantized AC coefficient. RUNLENGTH is the number of zeroes that came before this non-zero AC coefficient. SIZE is the number of bits required to represent x. AMPLITUDE is the bit-representation of x. The run-length encoding works by examining each non-zero AC coefficient x and determining how many zeroes came before the previous AC coefficient. With this information, two symbols are created: Symbol 1 Symbol 2 (RUNLENGTH, SIZE) (AMPLITUDE) Both RUNLENGTH and SIZE rest on the same byte, meaning that each only contains four bits of information. The higher bits deal with the number of zeroes, while the lower bits denote the number of bits necessary to encode the value of x. This has the immediate implication of Symbol 1 being only able store information regarding the first 15 zeroes preceding the non-zero AC coefficient. However, JPEG defines two special Huffman code words. One is for ending the sequence prematurely when the remaining coefficients are zero (called "End-of-Block" or "EOB"), and another when the run of zeroes goes beyond 15 before reaching a non-zero AC coefficient. In such a case where 16 zeroes are encountered before a given non-zero AC coefficient, Symbol 1 is encoded "specially" as: (15, 0)(0). The overall process continues until "EOB" – denoted by (0, 0) – is reached. With this in mind, the sequence from earlier becomes: (0, 2)(-3);(1, 2)(-3);(0, 1)(-2);(0, 2)(-6);(0, 1)(2);(0, 1)(-4);(0, 1)(1);(0, 2)(-3);(0, 1)(1);(0, 1)(1); (0, 2)(5);(0, 1)(1);(0, 1)(2);(0, 1)(-1);(0, 1)(1);(0, 1)(-1);(0, 1)(2);(5, 1)(-1);(0, 1)(-1);(0, 0); (The first value in the matrix, −26, is the DC coefficient; it is not encoded the same way. See above.) From here, frequency calculations are made based on occurrences of the coefficients. In our example block, most of the quantized coefficients are small numbers that are not preceded immediately by a zero coefficient. These more-frequent cases will be represented by shorter code words. Compression ratio and artifacts[edit] This image shows the pixels that are different between a non-compressed image and the same image JPEG compressed with a quality setting of 50. Darker means a larger difference. Note especially the changes occurring near sharp edges and having a block-like shape. The original image The compressed 8×8 squares are visible in the scaled-up picture, together with other visual artifacts of the lossy compression. The resulting compression ratio can be varied according to need by being more or less aggressive in the divisors used in the quantization phase. Ten to one compression usually results in an image that cannot be distinguished by eye from the original. A compression ratio of 100:1 is usually possible, but will look distinctly artifacted compared to the original. The appropriate level of compression depends on the use to which the image will be put. External image Illustration of edge busyness[55] Those who use the World Wide Web may be familiar with the irregularities known as compression artifacts that appear in JPEG images, which may take the form of noise around contrasting edges (especially curves and corners), or "blocky" images. These are due to the quantization step of the JPEG algorithm. They are especially noticeable around sharp corners between contrasting colors (text is a good example, as it contains many such corners). The analogous artifacts in MPEG video are referred to as mosquito noise, as the resulting "edge busyness" and spurious dots, which change over time, resemble mosquitoes swarming around the object.[55][56] These artifacts can be reduced by choosing a lower level of compression; they may be completely avoided by saving an image using a lossless file format, though this will result in a larger file size. The images created with ray-tracing programs have noticeable blocky shapes on the terrain. Certain low-intensity compression artifacts might be acceptable when simply viewing the images, but can be emphasized if the image is subsequently processed, usually resulting in unacceptable quality. Consider the example below, demonstrating the effect of lossy compression on an edge detection processing step. Image Lossless compression Lossy compression Original Processed by Canny edge detector Some programs allow the user to vary the amount by which individual blocks are compressed. Stronger compression is applied to areas of the image that show fewer artifacts. This way it is possible to manually reduce JPEG file size with less loss of quality. Since the quantization stage always results in a loss of information, JPEG standard is always a lossy compression codec. (Information is lost both in quantizing and rounding of the floating-point numbers.) Even if the quantization matrix is a matrix of ones, information will still be lost in the rounding step. Decoding[edit] This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed. (December 2019) (Learn how and when to remove this template message) Decoding to display the image consists of doing all the above in reverse. Taking the DCT coefficient matrix (after adding the difference of the DC coefficient back in) [ − 26 − 3 − 6 2 2 − 1 0 0 0 − 2 − 4 1 1 0 0 0 − 3 1 5 − 1 − 1 0 0 0 − 3 1 2 − 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] {\displaystyle \left[{\begin{array}{rrrrrrrr}-26&-3&-6&2&2&-1&0&0\\0&-2&-4&1&1&0&0&0\\-3&1&5&-1&-1&0&0&0\\-3&1&2&-1&0&0&0&0\\1&0&0&0&0&0&0&0\\0&0&0&0&0&0&0&0\\0&0&0&0&0&0&0&0\\0&0&0&0&0&0&0&0\end{array}}\right]} and taking the entry-for-entry product with the quantization matrix from above results in [ − 416 − 33 − 60 32 48 − 40 0 0 0 − 24 − 56 19 26 0 0 0 − 42 13 80 − 24 − 40 0 0 0 − 42 17 44 − 29 0 0 0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] {\displaystyle \left[{\begin{array}{rrrrrrrr}-416&-33&-60&32&48&-40&0&0\\0&-24&-56&19&26&0&0&0\\-42&13&80&-24&-40&0&0&0\\-42&17&44&-29&0&0&0&0\\18&0&0&0&0&0&0&0\\0&0&0&0&0&0&0&0\\0&0&0&0&0&0&0&0\\0&0&0&0&0&0&0&0\end{array}}\right]} which closely resembles the original DCT coefficient matrix for the top-left portion. The next step is to take the two-dimensional inverse DCT (a 2D type-III DCT), which is given by: f x , y = 1 4 ∑ u = 0 7 ∑ v = 0 7 α ( u ) α ( v ) F u , v cos ⁡ [ ( 2 x + 1 ) u π 16 ] cos ⁡ [ ( 2 y + 1 ) v π 16 ] {\displaystyle f_{x,y}={\frac {1}{4}}\sum _{u=0}^{7}\sum _{v=0}^{7}\alpha (u)\alpha (v)F_{u,v}\cos \left[{\frac {(2x+1)u\pi }{16}}\right]\cos \left[{\frac {(2y+1)v\pi }{16}}\right]} where x {\displaystyle \ x} is the pixel row, for the integers 0 ≤ x < 8 {\displaystyle \ 0\leq x<8} . y {\displaystyle \ y} is the pixel column, for the integers 0 ≤ y < 8 {\displaystyle \ 0\leq y<8} . α ( u ) {\displaystyle \ \alpha (u)} is defined as above, for the integers 0 ≤ u < 8 {\displaystyle \ 0\leq u<8} . F u , v {\displaystyle \ F_{u,v}} is the reconstructed approximate coefficient at coordinates ( u , v ) . {\displaystyle \ (u,v).} f x , y {\displaystyle \ f_{x,y}} is the reconstructed pixel value at coordinates ( x , y ) {\displaystyle \ (x,y)} Rounding the output to integer values (since the original had integer values) results in an image with values (still shifted down by 128) Slight differences are noticeable between the original (top) and decompressed image (bottom), which is most readily seen in the bottom-left corner. [ − 66 − 63 − 71 − 68 − 56 − 65 − 68 − 46 − 71 − 73 − 72 − 46 − 20 − 41 − 66 − 57 − 70 − 78 − 68 − 17 20 − 14 − 61 − 63 − 63 − 73 − 62 − 8 27 − 14 − 60 − 58 − 58 − 65 − 61 − 27 − 6 − 40 − 68 − 50 − 57 − 57 − 64 − 58 − 48 − 66 − 72 − 47 − 53 − 46 − 61 − 74 − 65 − 63 − 62 − 45 − 47 − 34 − 53 − 74 − 60 − 47 − 47 − 41 ] {\displaystyle \left[{\begin{array}{rrrrrrrr}-66&-63&-71&-68&-56&-65&-68&-46\\-71&-73&-72&-46&-20&-41&-66&-57\\-70&-78&-68&-17&20&-14&-61&-63\\-63&-73&-62&-8&27&-14&-60&-58\\-58&-65&-61&-27&-6&-40&-68&-50\\-57&-57&-64&-58&-48&-66&-72&-47\\-53&-46&-61&-74&-65&-63&-62&-45\\-47&-34&-53&-74&-60&-47&-47&-41\end{array}}\right]} and adding 128 to each entry [ 62 65 57 60 72 63 60 82 57 55 56 82 108 87 62 71 58 50 60 111 148 114 67 65 65 55 66 120 155 114 68 70 70 63 67 101 122 88 60 78 71 71 64 70 80 62 56 81 75 82 67 54 63 65 66 83 81 94 75 54 68 81 81 87 ] . {\displaystyle \left[{\begin{array}{rrrrrrrr}62&65&57&60&72&63&60&82\\57&55&56&82&108&87&62&71\\58&50&60&111&148&114&67&65\\65&55&66&120&155&114&68&70\\70&63&67&101&122&88&60&78\\71&71&64&70&80&62&56&81\\75&82&67&54&63&65&66&83\\81&94&75&54&68&81&81&87\end{array}}\right].} This is the decompressed subimage. In general, the decompression process may produce values outside the original input range of [ 0 , 255 ] {\displaystyle [0,255]} . If this occurs, the decoder needs to clip the output values so as to keep them within that range to prevent overflow when storing the decompressed image with the original bit depth. The decompressed subimage can be compared to the original subimage (also see images to the right) by taking the difference (original − uncompressed) results in the following error values: [ − 10 − 10 4 6 − 2 − 2 4 − 9 6 4 − 1 8 1 − 2 7 1 4 9 8 2 − 4 − 10 − 1 8 − 2 3 5 2 − 1 − 8 2 − 1 − 3 − 2 1 3 4 0 8 − 8 8 − 6 − 4 − 0 − 3 6 2 − 6 10 − 11 − 3 5 − 8 − 4 − 1 − 0 6 − 15 − 6 14 − 3 − 5 − 3 7 ] {\displaystyle \left[{\begin{array}{rrrrrrrr}-10&-10&4&6&-2&-2&4&-9\\6&4&-1&8&1&-2&7&1\\4&9&8&2&-4&-10&-1&8\\-2&3&5&2&-1&-8&2&-1\\-3&-2&1&3&4&0&8&-8\\8&-6&-4&-0&-3&6&2&-6\\10&-11&-3&5&-8&-4&-1&-0\\6&-15&-6&14&-3&-5&-3&7\end{array}}\right]} with an average absolute error of about 5 values per pixels (i.e., 1 64 ∑ x = 0 7 ∑ y = 0 7 | e ( x , y ) | = 4.8750 {\displaystyle {\frac {1}{64}}\sum _{x=0}^{7}\sum _{y=0}^{7}|e(x,y)|=4.8750} ). The error is most noticeable in the bottom-left corner where the bottom-left pixel becomes darker than the pixel to its immediate right. Required precision[edit] Encoding and decoding conformance, and thus precision requirements, are specified in ISO/IEC 10918-2, i.e. part 2 of the JPEG specification. These specification require, for example, that the (forwards-transformed) DCT coefficients formed from an image of a JPEG implementation under test have an error that is within one quantization bucket precision compared to reference coefficients. To this end, ISO/IEC 10918-2 provides test streams as well as the DCT coefficients the codestream shall decode to. Similarly, ISO/IEC 10918-2 defines encoder precisions in terms of a maximal allowable error in the DCT domain. This is in so far unusual as many other standards define only decoder conformance and only require from the encoder to generate a syntactically correct codestream. The test images found in ISO/IEC 10918-2 are (pseudo-) random patterns, to check for worst-cases. As ISO/IEC 10918-1 does not define colorspaces, and neither includes the YCbCr to RGB transformation of JFIF (now ISO/IEC 10918-5), the precision of the latter transformation cannot be tested by ISO/IEC 10918-2. In order to support 8-bit precision per pixel component output, dequantization and inverse DCT transforms are typically implemented with at least 14-bit precision in optimized decoders. Effects of JPEG compression[edit] Play media Repeating compression of an image (random quality options) JPEG compression artifacts blend well into photographs with detailed non-uniform textures, allowing higher compression ratios. Notice how a higher compression ratio first affects the high-frequency textures in the upper-left corner of the image, and how the contrasting lines become more fuzzy. The very high compression ratio severely affects the quality of the image, although the overall colors and image form are still recognizable. However, the precision of colors suffer less (for a human eye) than the precision of contours (based on luminance). This justifies the fact that images should be first transformed in a color model separating the luminance from the chromatic information, before subsampling the chromatic planes (which may also use lower quality quantization) in order to preserve the precision of the luminance plane with more information bits. Sample photographs[edit] Visual impact of a jpeg compression in Photoshop on a picture of 4480x4480 pixels For information, the uncompressed 24-bit RGB bitmap image below (73,242 pixels) would require 219,726 bytes (excluding all other information headers). The filesizes indicated below include the internal JPEG information headers and some metadata. For highest quality images (Q=100), about 8.25 bits per color pixel is required.[citation needed] On grayscale images, a minimum of 6.5 bits per pixel is enough (a comparable Q=100 quality color information requires about 25% more encoded bits). The highest quality image below (Q=100) is encoded at nine bits per color pixel, the medium quality image (Q=25) uses one bit per color pixel. For most applications, the quality factor should not go below 0.75 bit per pixel (Q=12.5), as demonstrated by the low quality image. The image at lowest quality uses only 0.13 bit per pixel, and displays very poor color. This is useful when the image will be displayed in a significantly scaled-down size. A method for creating better quantization matrices for a given image quality using PSNR instead of the Q factor is described in Minguillón & Pujol (2001).[57] Note: The above images are not IEEE / CCIR / EBU test images, and the encoder settings are not specified or available. Image Quality Size (bytes) Compression ratio Comment Highest quality (Q = 100) 81,447 2.7:1 Extremely minor artifacts High quality (Q = 50) 14,679 15:1 Initial signs of subimage artifacts Medium quality (Q = 25) 9,407 23:1 Stronger artifacts; loss of high frequency information Low quality (Q = 10) 4,787 46:1 Severe high frequency loss leads to obvious artifacts on subimage boundaries ("macroblocking") Lowest quality (Q = 1) 1,523 144:1 Extreme loss of color and detail; the leaves are nearly unrecognizable. The medium quality photo uses only 4.3% of the storage space required for the uncompressed image, but has little noticeable loss of detail or visible artifacts. However, once a certain threshold of compression is passed, compressed images show increasingly visible defects. See the article on rate–distortion theory for a mathematical explanation of this threshold effect. A particular limitation of JPEG in this regard is its non-overlapped 8×8 block transform structure. More modern designs such as JPEG 2000 and JPEG XR exhibit a more graceful degradation of quality as the bit usage decreases – by using transforms with a larger spatial extent for the lower frequency coefficients and by using overlapping transform basis functions. Lossless further compression[edit] From 2004 to 2008, new research emerged on ways to further compress the data contained in JPEG images without modifying the represented image.[58][59][60][61] This has applications in scenarios where the original image is only available in JPEG format, and its size needs to be reduced for archiving or transmission. Standard general-purpose compression tools cannot significantly compress JPEG files. Typically, such schemes take advantage of improvements to the naive scheme for coding DCT coefficients, which fails to take into account: Correlations between magnitudes of adjacent coefficients in the same block; Correlations between magnitudes of the same coefficient in adjacent blocks; Correlations between magnitudes of the same coefficient/block in different channels; The DC coefficients when taken together resemble a downscale version of the original image multiplied by a scaling factor. Well-known schemes for lossless coding of continuous-tone images can be applied, achieving somewhat better compression than the Huffman coded DPCM used in JPEG. Some standard but rarely used options already exist in JPEG to improve the efficiency of coding DCT coefficients: the arithmetic coding option, and the progressive coding option (which produces lower bitrates because values for each coefficient are coded independently, and each coefficient has a significantly different distribution). Modern methods have improved on these techniques by reordering coefficients to group coefficients of larger magnitude together;[58] using adjacent coefficients and blocks to predict new coefficient values;[60] dividing blocks or coefficients up among a small number of independently coded models based on their statistics and adjacent values;[59][60] and most recently, by decoding blocks, predicting subsequent blocks in the spatial domain, and then encoding these to generate predictions for DCT coefficients.[61] Typically, such methods can compress existing JPEG files between 15 and 25 percent, and for JPEGs compressed at low-quality settings, can produce improvements of up to 65%.[60][61] A freely available tool called packJPG is based on the 2007 paper "Improved Redundancy Reduction for JPEG Files."[62] A 2016 paper titled "JPEG on steroids" using ISO libjpeg shows that current techniques, lossy or not, can make JPEG nearly as efficient as JPEG XR.[63] JPEG XL is a new file format that promises to losslessly re-encode a JPEG with efficient back-conversion to JPEG. Derived formats[edit] For stereoscopic 3D[edit] JPEG Stereoscopic[edit] An example of a stereoscopic .JPS file JPS is a stereoscopic JPEG image used for creating 3D effects from 2D images. It contains two static images, one for the left eye and one for the right eye; encoded as two side-by-side images in a single JPG file.JPEG Stereoscopic (JPS, extension .jps) is a JPEG-based format for stereoscopic images.[64][65] It has a range of configurations stored in the JPEG APP3 marker field, but usually contains one image of double width, representing two images of identical size in cross-eyed (i.e. left frame on the right half of the image and vice versa) side-by-side arrangement. This file format can be viewed as a JPEG without any special software, or can be processed for rendering in other modes. JPEG Multi-Picture Format[edit] JPEG Multi-Picture Format (MPO, extension .mpo) is a JPEG-based format for storing multiple images in a single file. It contains two or more JPEG files concatenated together.[66][67] It also defines a JPEG APP2 marker segment for image description. Various devices use it to store 3D images, such as Fujifilm FinePix Real 3D W1, HTC Evo 3D, JVC GY-HMZ1U AVCHD/MVC extension camcorder, Nintendo 3DS, Sony PlayStation 3,[68] Sony PlayStation Vita,[69] Panasonic Lumix DMC-TZ20, DMC-TZ30, DMC-TZ60, DMC-TS4 (FT4), and Sony DSC-HX7V. Other devices use it to store "preview images" that can be displayed on a TV. In the last few years, due to the growing use of stereoscopic images, much effort has been spent by the scientific community to develop algorithms for stereoscopic image compression.[70][71] JPEG XT[edit] Main article: JPEG XT JPEG XT (ISO/IEC 18477) was published in June 2015; it extends base JPEG format with support for higher integer bit depths (up to 16 bit), high dynamic range imaging and floating-point coding, lossless coding, and alpha channel coding. Extensions are backward compatible with the base JPEG/JFIF file format and 8-bit lossy compressed image. JPEG XT uses an extensible file format based on JFIF. Extension layers are used to modify the JPEG 8-bit base layer and restore the high-resolution image. Existing software is forward compatible and can read the JPEG XT binary stream, though it would only decode the base 8-bit layer.[72] JPEG XL[edit] Main article: JPEG XL Since August 2017, JTC1/SC29/WG1 issued a series of draft calls for proposals on JPEG XL – the next generation image compression standard with substantially better compression efficiency (60% improvement) comparing to JPEG.[73] The standard is expected to exceed the still image compression performance shown by HEVC HM, Daala and WebP, and unlike previous efforts attempting to replace JPEG, to provide lossless more efficient recompression transport and storage option for traditional JPEG images.[74][75][76] The core requirements include support for very high-resolution images (at least 40 MP), 8–10 bits per component, RGB/YCbCr/ICtCp color encoding, animated images, alpha channel coding, Rec. 709 color space (sRGB) and gamma function (2.4-power), Rec. 2100 wide color gamut color space (Rec. 2020) and high dynamic range transfer functions (PQ and HLG), and high-quality compression of synthetic images, such as bitmap fonts and gradients. The standard should also offer higher bit depths (12–16 bit integer and floating point), additional color spaces and transfer functions (such as Log C from Arri), embedded preview images, lossless alpha channel encoding, image region coding, and low-complexity encoding. Any patented technologies would be licensed on a royalty-free basis. The proposals were submitted by September 2018, leading to a committee draft in July 2019, with current target publication date in October 2019.[77][76] Incompatible JPEG standards[edit] The Joint Photography Experts Group is also responsible for some other formats bearing the JPEG name, including JPEG 2000, JPEG XR, and JPEG XS. Implementations[edit] A very important implementation of a JPEG codec was the free programming library libjpeg of the Independent JPEG Group. It was first published in 1991 and was key for the success of the standard.[78] Recent versions introduce proprietary extensions which broke ABI compatibility with previous versions. In many prominent software projects, libjpeg has been replaced by libjpeg-turbo, which offers higher performance, SIMD compatibility and backwards-compatibility with the original libjpeg versions.[79] In March 2017, Google released the open source project Guetzli, which trades off a much longer encoding time for smaller file size (similar to what Zopfli does for PNG and other lossless data formats).[80] ISO/IEC Joint Photography Experts Group maintains a reference software implementation which can encode both base JPEG (ISO/IEC 10918-1 and 18477-1) and JPEG XT extensions (ISO/IEC 18477 Parts 2 and 6-9), as well as JPEG-LS (ISO/IEC 14495).[81] See also[edit] Wikimedia Commons has media related to JPEG compression. Better Portable Graphics, a format based on intra-frame encoding of the HEVC C-Cube, an early implementer of JPEG in chip form Comparison of graphics file formats Comparison of layout engines (graphics) Deblocking filter (video), the similar deblocking methods could be applied to JPEG Design rule for Camera File system (DCF) File extensions Graphics editing program High Efficiency Image File Format, image container format for HEVC and other image coding formats Lenna (test image), the traditional standard image used to test image processing algorithms Lossless Image Codec FELICS Motion JPEG References[edit] ^ a b c d e f g h i j k l m "T.81 – DIGITAL COMPRESSION AND CODING OF CONTINUOUS-TONE STILL IMAGES – REQUIREMENTS AND GUIDELINES" (PDF). CCITT. September 1992. Retrieved 12 July 2019. ^ "Definition of "JPEG"". Collins English Dictionary. Retrieved 2013-05-23. ^ Haines, Richard F.; Chuang, Sherry L. (1 July 1992). The effects of video compression on acceptability of images for monitoring life sciences experiments (Technical report). NASA. NASA-TP-3239, A-92040, NAS 1.60:3239. Retrieved 2016-03-13. The JPEG still-image-compression levels, even with the large range of 5:1 to 120:1 in this study, yielded equally high levels of acceptability ^ a b Hudson, Graham; Léger, Alain; Niss, Birger; Sebestyén, István; Vaaben, Jørgen (31 August 2018). "JPEG-1 standard 25 years: past, present, and future reasons for a success". Journal of Electronic Imaging. 27 (4): 1. doi:10.1117/1.JEI.27.4.040901. ^ "The JPEG image format explained". BT.com. BT Group. 31 May 2018. Retrieved 5 August 2019. ^ Baraniuk, Chris (15 October 2015). "Copy protections could come to JPegs". BBC News. BBC. Retrieved 13 September 2019. ^ a b c Ahmed, Nasir (January 1991). "How I Came Up With the Discrete Cosine Transform". Digital Signal Processing. 1 (1): 4–5. doi:10.1016/1051-2004(91)90086-Z. ^ "What Is a JPEG? The Invisible Object You See Every Day". The Atlantic. 24 September 2013. Retrieved 13 September 2019. ^ "HTTP Archive – Interesting Stats". httparchive.org. Retrieved 2016-04-06. ^ MIME Type Detection in Internet Explorer: Uploaded MIME Types (msdn.microsoft.com) ^ Hamilton, Eric (1 September 1992). "JPEG File Interchange Format" (PDF). jpeg.org. Milpitas, California. Archived from the original (PDF) on 3 September 2014. Retrieved 11 April 2020. ^ "Why JPEG 2000 Never Took Off". American National Standards Institute. 10 July 2018. Retrieved 13 September 2019. ^ a b c "JPEG: 25 Jahre und kein bisschen alt". Heise online (in German). October 2016. Retrieved 5 September 2019. ^ a b Ahmed, Nasir; Natarajan, T.; Rao, K. R. (January 1974), "Discrete Cosine Transform", IEEE Transactions on Computers, C-23 (1): 90–93, doi:10.1109/T-C.1974.223784 ^ a b Chen, Wen-Hsiung; Smith, C.; Fralick, S. (1977). "A Fast Computational Algorithm for the Discrete Cosine Transform". IEEE Transactions on Communications. 25 (9): 1004–1009. doi:10.1109/TCOM.1977.1093941. ISSN 0090-6778. ^ a b Chen, Wen-Hsiung; Pratt, W.K. (1984). "Scene Adaptive Coder". IEEE Transactions on Communications. 32 (3): 225–232. doi:10.1109/TCOM.1984.1096066. ISSN 0090-6778. ^ a b c d e f g h Lemos, Robert (23 July 2002). "Finding patent truth in JPEG claim". CNET. Retrieved 13 July 2019. ^ ISO/IEC JTC 1/SC 29 (2009-05-07). "ISO/IEC JTC 1/SC 29/WG 1 – Coding of Still Pictures (SC 29/WG 1 Structure)". Archived from the original on 2013-12-31. Retrieved 2009-11-11. ^ a b ISO/IEC JTC 1/SC 29. "Programme of Work, (Allocated to SC 29/WG 1)". Archived from the original on 2013-12-31. Retrieved 2009-11-07. ^ ISO. "JTC 1/SC 29 – Coding of audio, picture, multimedia and hypermedia information". Retrieved 2009-11-11. ^ a b JPEG. "Joint Photographic Experts Group, JPEG Homepage". Retrieved 2009-11-08. ^ "T.81 : Information technology – Digital compression and coding of continuous-tone still images – Requirements and guidelines". Itu.int. Retrieved 2009-11-07. ^ William B. Pennebaker; Joan L. Mitchell (1993). JPEG still image data compression standard (3rd ed.). Springer. p. 291. ISBN 978-0-442-01272-4. ^ ISO. "JTC 1/SC 29 – Coding of audio, picture, multimedia and hypermedia information". Retrieved 2009-11-07. ^ "SPIFF, Still Picture Interchange File Format". Library of Congress. 2012-01-30. Archived from the original on 2018-07-31. Retrieved 2018-07-31. ^ JPEG (2009-04-24). "JPEG XR enters FDIS status: JPEG File Interchange Format (JFIF) to be standardized as JPEG Part 5" (Press release). Archived from the original on 2009-10-08. Retrieved 2009-11-09. ^ "JPEG File Interchange Format (JFIF)". ECMA TR/98 1st ed. Ecma International. 2009. Retrieved 2011-08-01. ^ "Forgent's JPEG Patent". SourceForge. 2002. Retrieved 13 July 2019. ^ "Concerning recent patent claims". Jpeg.org. 2002-07-19. Archived from the original on 2007-07-14. Retrieved 2011-05-29. ^ "JPEG and JPEG2000 – Between Patent Quarrel and Change of Technology". Archived from the original on August 17, 2004. Retrieved 2017-04-16. ^ Stanković, Radomir S.; Astola, Jaakko T. (2012). "Reminiscences of the Early Work in DCT: Interview with K.R. Rao" (PDF). Reprints from the Early Days of Information Sciences. 60. Retrieved 13 October 2019. ^ Kawamoto, Dawn (April 22, 2005). "Graphics patent suit fires back at Microsoft". CNET News. Retrieved 2009-01-28. ^ "Trademark Office Re-examines Forgent JPEG Patent". Publish.com. February 3, 2006. Retrieved 2009-01-28. ^ "USPTO: Broadest Claims Forgent Asserts Against JPEG Standard Invalid". Groklaw.net. May 26, 2006. Retrieved 2007-07-21. ^ "Coding System for Reducing Redundancy". Gauss.ffii.org. Retrieved 2011-05-29. ^ "JPEG Patent Claim Surrendered". Public Patent Foundation. November 2, 2006. Retrieved 2006-11-03. ^ "Ex Parte Reexamination Certificate for U.S. Patent No. 5,253,341". Archived from the original on June 2, 2008. ^ Workgroup. "Rozmanith: Using Software Patents to Silence Critics". Eupat.ffii.org. Archived from the original on 2011-07-16. Retrieved 2011-05-29. ^ "A Bounty of $5,000 to Name Troll Tracker: Ray Niro Wants To Know Who Is saying All Those Nasty Things About Him". Law.com. Retrieved 2011-05-29. ^ Reimer, Jeremy (2008-02-05). "Hunting trolls: USPTO asked to reexamine broad image patent". Arstechnica.com. Retrieved 2011-05-29. ^ U.S. Patent Office – Granting Reexamination on 5,253,341 C1 ^ "Judge Puts JPEG Patent On Ice". Techdirt.com. 2008-04-30. Retrieved 2011-05-29. ^ "JPEG Patent's Single Claim Rejected (And Smacked Down For Good Measure)". Techdirt.com. 2008-08-01. Retrieved 2011-05-29. ^ Workgroup. "Princeton Digital Image Corporation Home Page". Archived from the original on 2013-04-11. Retrieved 2013-05-01. ^ Workgroup. "Article on Princeton Court Ruling Regarding GE License Agreement". Archived from the original on 2016-03-09. Retrieved 2013-05-01. ^ "2 Reasons to Use PNG over JPEG". Resource Moon. ^ "Progressive Decoding Overview". Microsoft Developer Network. Microsoft. Retrieved 2012-03-23. ^ "Why You Should Always Rotate Original JPEG Photos Losslessly". Petapixel.com. Retrieved 16 October 2017. ^ "JFIF File Format as PDF" (PDF). ^ Tom Lane (1999-03-29). "JPEG image compression FAQ". Retrieved 2007-09-11. (q. 14: "Why all the argument about file formats?") ^ "ISO/IEC 10918-1 : 1993(E) p.36". ^ Thomas G. Lane. "Advanced Features: Compression parameter selection". Using the IJG JPEG Library. ^ Ryan, Dan (2012-06-20). E – Learning Modules: Dlr Associates Series. AuthorHouse. ISBN 978-1-4685-7520-0. ^ "DC / AC Frequency Questions – Doom9's Forum". forum.doom9.org. Retrieved 16 October 2017. ^ a b Phuc-Tue Le Dinh and Jacques Patry. Video compression artifacts and MPEG noise reduction. Video Imaging DesignLine. February 24, 2006. Retrieved May 28, 2009. ^ "3.9 mosquito noise: Form of edge busyness distortion sometimes associated with movement, characterized by moving artifacts and/or blotchy noise patterns superimposed over the objects (resembling a mosquito flying around a person's head and shoulders)." ITU-T Rec. P.930 (08/96) Principles of a reference impairment system for video Archived 2010-02-16 at the Wayback Machine ^ Julià Minguillón, Jaume Pujol (April 2001). "JPEG standard uniform quantization error modeling with applications to sequential and progressive operation modes" (PDF). Electronic Imaging. 10 (2): 475–485. Bibcode:2001JEI....10..475M. doi:10.1117/1.1344592. hdl:10609/6263. ^ a b I. Bauermann and E. Steinbacj. Further Lossless Compression of JPEG Images. Proc. of Picture Coding Symposium (PCS 2004), San Francisco, US, December 15–17, 2004. ^ a b N. Ponomarenko, K. Egiazarian, V. Lukin and J. Astola. Additional Lossless Compression of JPEG Images, Proc. of the 4th Intl. Symposium on Image and Signal Processing and Analysis (ISPA 2005), Zagreb, Croatia, pp. 117–120, September 15–17, 2005. ^ a b c d M. Stirner and G. Seelmann. Improved Redundancy Reduction for JPEG Files. Proc. of Picture Coding Symposium (PCS 2007), Lisbon, Portugal, November 7–9, 2007 ^ a b c Ichiro Matsuda, Yukio Nomoto, Kei Wakabayashi and Susumu Itoh. Lossless Re-encoding of JPEG images using block-adaptive intra prediction. Proceedings of the 16th European Signal Processing Conference (EUSIPCO 2008). ^ "Latest Binary Releases of packJPG: V2.3a". January 3, 2008. Archived from the original on January 23, 2009. ^ Richter, Thomas (September 2016). "JPEG on STEROIDS: Common optimization techniques for JPEG image compression". 2016 IEEE International Conference on Image Processing (ICIP): 61–65. doi:10.1109/ICIP.2016.7532319. ISBN 978-1-4673-9961-6. S2CID 14922251. Lay summary. ^ J. Siragusa; D. C. Swift (1997). "General Purpose Stereoscopic Data Descriptor" (PDF). VRex, Inc., Elmsford, New York City. Archived from the original (PDF) on 2011-10-30. ^ Tim Kemp, JPS files ^ "Multi-Picture Format" (PDF). 2009. Retrieved 2019-12-26. ^ "MPO2Stereo: Convert Fujifilm MPO files to JPEG stereo pairs", Mtbs3d.com, retrieved 12 January 2010 ^ "PS3 Types of files that can be displayed". 2019. Retrieved 2020-02-29. ^ "Types of files you can view with the Photos application". 2019. Retrieved 2020-02-29. ^ Alessandro Ortis; Sebastiano Battiato (2015), Sitnik, Robert; Puech, William (eds.), "A new fast matching method for adaptive compression of stereoscopic images", Three-Dimensional Image Processing, Three-Dimensional Image Processing, Measurement (3DIPM), and Applications 2015, SPIE – Three-Dimensional Image Processing, Measurement (3DIPM), and Applications 2015, 9393: 93930K, Bibcode:2015SPIE.9393E..0KO, doi:10.1117/12.2086372, S2CID 18879942, retrieved 30 April 2015 ^ Alessandro Ortis; Francesco Rundo; Giuseppe Di Giore; Sebastiano Battiato, Adaptive Compression of Stereoscopic Images, International Conference on Image Analysis and Processing (ICIAP) 2013, retrieved 30 April 2015 ^ "JPEG – JPEG XT". jpeg.org. ^ "JPEG – Next-Generation Image Compression (JPEG XL) Final Draft Call for Proposals". Jpeg.org. Retrieved 29 May 2018. ^ Alakuijala, Jyrki; van Asseldonk, Ruud; Boukortt, Sami; Bruse, Martin; Comșa, Iulia-Maria; Firsching, Moritz; Fischbacher, Thomas; Kliuchnikov, Evgenii; Gomez, Sebastian; Obryk, Robert; Potempa, Krzysztof; Rhatushnyak, Alexander; Sneyers, Jon; Szabadka, Zoltan; Vandervenne, Lode; Versari, Luca; Wassenberg, Jan (2019-09-06). "JPEG XL next-generation image compression architecture and coding tools". Applications of Digital Image Processing XLII. p. 20. doi:10.1117/12.2529237. ISBN 978-1-5106-2967-7. S2CID 202785129. ^ "Google Pik試してみた". Retrieved 22 August 2019. ^ a b Rhatushnyak, Alexander; Wassenberg, Jan; Sneyers, Jon; Alakuijala, Jyrki; Vandevenne, Lode; Versari, Luca; Obryk, Robert; Szabadka, Zoltan; Kliuchnikov, Evgenii; Comsa, Iulia-Maria; Potempa, Krzysztof; Bruse, Martin; Firsching, Moritz; Khasanova, Renata; Ruud van Asseldonk; Boukortt, Sami; Gomez, Sebastian; Fischbacher, Thomas (2019). "Committee Draft of JPEG XL Image Coding System". arXiv:1908.03565 [eess.IV]. ^ "N79010 Final Call for Proposals for a Next-Generation Image Coding Standard (JPEG XL)" (PDF). ISO/IEC JTC 1/SC 29/WG 1 (ITU-T SG16). Retrieved 29 May 2018. ^ "Overview of JPEG". jpeg.org. Retrieved 2017-10-16. ^ Software That Uses or Provides libjpeg-turbo. February 9, 2012. ^ "Announcing Guetzli: A New Open Source JPEG Encoder". Research.googleblog.com. Retrieved 16 October 2017. ^ "JPEG – JPEG XT". jpeg.org. External links[edit] JPEG Standard (JPEG ISO/IEC 10918-1 ITU-T Recommendation T.81) at W3.org Official Joint Photographic Experts Group (JPEG) site JFIF File Format at W3.org JPEG viewer in 250 lines of easy to understand Python code Public domain JPEG compressor in a single C++ source file, along with a matching decompressor at code.google.com JPEG decoder open source code, copyright (C) 1995–1997, Thomas G. Lane v t e Multimedia compression and container formats Video compression ISO, IEC, MPEG MJPEG Motion JPEG 2000 MPEG-1 MPEG-2 Part 2 MPEG-4 Part 2 / ASP Part 10 / AVC Part 33 / IVC MPEG-H Part 2 / HEVC MPEG-I Part 3 / VVC MPEG-5 Part 1 / EVC Part 2 / LCEVC ITU-T, VCEG H.120 DCT H.261 H.262 H.263 H.264 / AVC H.265 / HEVC H.266 / VVC DV SMPTE VC-1 VC-2 VC-3 VC-5 VC-6 TrueMotion TrueMotion S DCT VP3 VP6 VP7 VP8 VP9 AV1 Others Apple Video AVS Bink Cinepak Daala DVI FFV1 Huffyuv Indeo Lagarith Microsoft Video 1 MSU Lossless OMS Video Pixlet ProRes 422 ProRes 4444 QuickTime Animation Graphics RealVideo RTVideo SheerVideo Smacker Sorenson Video/Spark Theora Thor WMV XEB YULS Audio compression ISO, IEC, MPEG MPEG-1 Layer II Multichannel MPEG-1 Layer I MPEG-1 Layer III (MP3) AAC HE-AAC AAC-LD MPEG Surround MPEG-4 ALS MPEG-4 SLS MPEG-4 DST MPEG-4 HVXC MPEG-4 CELP MPEG-D USAC MPEG-H 3D Audio ITU-T G.711 A-law µ-law G.718 G.719 G.722 G.722.1 G.722.2 G.723 G.723.1 G.726 G.728 G.729 G.729.1 IETF Opus iLBC Speex Vorbis 3GPP AMR AMR-WB AMR-WB+ EVRC EVRC-B EVS GSM-HR GSM-FR GSM-EFR ETSI AC-3 AC-4 DTS Others ACELP ALAC Asao ATRAC AVS CELT Codec 2 DRA FLAC iSAC MELP Monkey's Audio MT9 Musepack OptimFROG OSQ QCELP RCELP RealAudio RTAudio SD2 SHN SILK Siren SMV SVOPC TTA True Audio TwinVQ VMR-WB VSELP WavPack WMA MQA aptX aptX HD aptX Low Latency aptX Adaptive LDAC LHDC LLAC Image compression IEC, ISO, IETF, W3C, ITU-T, JPEG CCITT Group 4 DCT HEIC HEVC JPEG JPEG XL JPEG XR JPEG XT TIFF/EP Arithmetic JBIG JBIG2 JPEG-LS JPEG 2000 LZ GIF PNG TIFF TIFF/IT Others APNG BPG DjVu EXR FLIF ICER MNG PGF QTVR WBMP WebP Containers ISO, IEC MPEG-ES MPEG-PES MPEG-PS MPEG-TS ISO/IEC base media file format MPEG-4 Part 14 (MP4) Motion JPEG 2000 MPEG-21 Part 9 MPEG media transport ITU-T H.222.0 T.802 IETF RTP Ogg SMPTE GXF MXF Others 3GP and 3G2 AMV ASF AIFF AVI AU BPG Bink Smacker BMP DivX Media Format EVO Flash Video IFF M2TS Matroska WebM QuickTime File Format RatDVD RealMedia RIFF WAV MOD and TOD VOB, IFO and BUP Collaborations NETVC MPEG LA HEVC Advance Methods Discrete cosine transform DCT MDCT Entropy Arithmetic Huffman Modified FFT LPC ACELP CELP LSP WLPC Lossless Lossy LZ DEFLATE LZW PCM A-law µ-law ADPCM DPCM Transform Wavelet Daubechies DWT Transform Lists Comparison of audio coding formats Comparison of video codecs List of codecs See Compression methods for techniques and Compression software for codecs v t e Graphics file formats Raster ANI ANIM APNG ART BMP BPG BSAVE CAL CIN CPC CPT DDS DPX ECW EXR FITS FLIC FLIF FPX GIF HDRi HEVC ICER ICNS ICO / CUR ICS ILBM JBIG JBIG2 JNG JPEG JPEG-LS JPEG 2000 JPEG XR JPEG XT JPEG-HDR JPEG XL KRA MNG MIFF NRRD PAM PBM / PGM / PPM / PNM PCX PGF PICtor PNG PSD / PSB PSP QTVR RAS RGBE Logluv TIFF SGI TGA TIFF TIFF/EP TIFF/IT UFO / UFP WBMP WebP XBM XCF XPM XWD Raw CIFF DNG Vector AI CDR CGM DXF EVA EMF EMF+ Gerber HVIF IGES PGML SVG VML WMF Xar Compound CDF DjVu EPS PDF PICT PS SWF XAML Metadata Exchangeable image file format (Exif) International Press Telecommunications Council § Photo metadata Extensible Metadata Platform (XMP) GIF § Metadata Steganography Category Comparison Retrieved from "https://en.wikipedia.org/w/index.php?title=JPEG&oldid=992047970" Categories: JPEG Computer-related introductions in 1992 Discovery and invention controversies American inventions Indian inventions Japanese inventions Taiwanese inventions ITU-T recommendations ITU-T Recommendations Series IEC standards ISO standards Lossy compression algorithms Image compression Open formats Raster graphics file formats Hidden categories: CS1 German-language sources (de) Webarchive template wayback links Articles with short description Short description is different from Wikidata Wikipedia articles that are excessively detailed from December 2019 All articles that are excessively detailed Wikipedia articles with style issues from December 2019 All articles with style issues Articles needing additional references from December 2019 All articles needing additional references Articles with multiple maintenance issues Wikipedia pending changes protected pages All articles with unsourced statements Articles with unsourced statements from September 2020 Articles with unsourced statements from November 2019 Commons category link is on Wikidata Articles containing video clips Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons Languages العربية Asturianu Azərbaycanca বাংলা Беларуская Български Bosanski Català Čeština Dansk Deutsch Eesti Ελληνικά Español Esperanto Euskara فارسی Français Galego 한국어 Հայերեն हिन्दी Hrvatski Bahasa Indonesia Íslenska Italiano עברית Jawa Kapampangan ქართული Кыргызча Latviešu Lëtzebuergesch Lietuvių Magyar Македонски മലയാളം Bahasa Melayu Nederlands 日本語 Norsk bokmål Norsk nynorsk ភាសាខ្មែរ Polski Português Română Русский Scots Shqip Simple English Slovenčina Slovenščina Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska ไทย Türkçe Українська اردو Vèneto Tiếng Việt 吴语 Yorùbá 粵語 中文 Edit links This page was last edited on 3 December 2020, at 05:30 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement