Bourne shell - Wikipedia Bourne shell From Wikipedia, the free encyclopedia Jump to navigation Jump to search Command-line interpreter for operating systems Bourne shell Bourne shell interaction on Version 7 Unix Original author(s) Stephen Bourne Developer(s) Bell Telephone Laboratories Initial release 1979; 41 years ago (1979) Operating system Unix Type Unix shell License [under discussion] The Bourne shell (sh) is a shell command-line interpreter for computer operating systems. The Bourne shell was the default shell for Version 7 Unix. Unix-like systems continue to have /bin/sh—which will be the Bourne shell, or a symbolic link or hard link to a compatible shell—even when other shells are used by most users. Developed by Stephen Bourne at Bell Labs, it was a replacement for the Thompson shell, whose executable file had the same name—sh. It was released in 1979 in the Version 7 Unix release distributed to colleges and universities. Although it is used as an interactive command interpreter, it was also intended as a scripting language and contains most of the features that are commonly considered to produce structured programs. It gained popularity with the publication of The Unix Programming Environment by Brian Kernighan and Rob Pike—the first commercially published book that presented the shell as a programming language in a tutorial form. Contents 1 History 1.1 Origins 1.2 Features of the original version 1.3 Features introduced after 1979 2 Variants 2.1 DMERT shell 2.2 Korn shell 2.3 Schily Bourne Shell 3 Relationship to other shells 3.1 C shell 3.2 Almquist shells 3.3 Other shells 4 Usage 5 See also 6 References 7 External links History[edit] Version 7 Unix: the original Bourne shell manual page. PDP-11 simulation with SIMH Origins[edit] Work on the Bourne shell initially started in 1976.[1] First appearing in Version 7 Unix,[2] the Bourne shell superseded the Mashey shell. Some of the primary goals of the shell were:[3] To allow shell scripts to be used as filters. To provide programmability including control flow and variables. Control over all input/output file descriptors. Control over signal handling within scripts. No limits on string lengths when interpreting shell scripts. Rationalize and generalize string quoting mechanism. The environment mechanism. This allowed context to be established at startup and provided a way for shell scripts to pass context to sub scripts (processes) without having to use explicit positional parameters. Features of the original version[edit] Features of the Version 7 UNIX Bourne shell include: Scripts can be invoked as commands by using their filename May be used interactively or non-interactively Allows both synchronous and asynchronous execution of commands Supports input and output redirection and pipelines Provides a set of built-in commands Provides flow control constructs, quotation facilities, and functions. Typeless variables Provides local and global variable scope Scripts do not require compilation before execution Does not have a goto facility, so code restructuring may be necessary Command substitution using backquotes: `command`. Here documents using << to embed a block of input text within a script. for ~ do ~ done loops, in particular the use of $* to loop over arguments, as well as for ~ in ~ do ~ done loops for iterating over lists. case ~ in ~ esac selection mechanism, primarily intended to assist argument parsing. sh provided support for environment variables using keyword parameters and exportable variables. Contains strong provisions for controlling input and output and in its expression matching facilities. The Bourne shell also was the first to feature the convention of using file descriptor 2> for error messages, allowing much greater programmatic control during scripting by keeping error messages separate from data. Stephen Bourne's coding style was influenced by his experience with the ALGOL 68C compiler[2] that he had been working on at Cambridge University. In addition to the style in which the program was written, Bourne reused portions of ALGOL 68's if ~ then ~ elif ~ then ~ else ~ fi, case ~ in ~ esac and for/while ~ do ~ od" (using done instead of od) clauses in the common Unix Bourne shell syntax. Moreover, – although the v7 shell is written in C – Bourne took advantage of some macros[4] to give the C source code an ALGOL 68 flavor. These macros (along with the finger command distributed in Unix version 4.2BSD) inspired the International Obfuscated C Code Contest (IOCCC).[5] Features introduced after 1979[edit] Over the years, the Bourne shell was enhanced at AT&T. The various variants are thus called like the respective AT&T Unix version it was released with (some important variants being Version7, SystemIII, SVR2, SVR3, SVR4). As the shell was never versioned, the only way to identify it was testing its features.[6] Features of the Bourne shell versions since 1979 include:[7] Built-in test command – System III shell (1981) # as comment character – System III shell (1981) Colon in parameter substitutions "${parameter:=word}" – System III shell (1981) continue with argument – System III shell (1981) cat <<-EOF for indented here documents – System III shell (1981) Functions and the return builtin – SVR2 shell (1984) Built-ins unset, echo, type – SVR2 shell (1984) Source code de-ALGOL68-ized – SVR2 shell (1984) Modern "$@" – SVR3 shell (1986) Built-in getopts – SVR3 shell (1986) Cleaned up parameter handling allows recursively callable functions – SVR3 shell (1986) 8-bit clean – SVR3 shell (1986) Job control – SVR4 shell (1989) Multi-byte support – SVR4 shell (1989) Variants[edit] DMERT shell[edit] Duplex Multi-Environment Real-Time (DMERT) is a hybrid time-sharing/real-time operating system developed in the 1970s at Bell Labs Indian Hill location in Naperville, Illinois uses a 1978 snapshot of Bourne Shell "VERSION sys137 DATE 1978 Oct 12 22:39:57".[citation needed] The DMERT shell runs on 3B21D computers still in use in the telecommunications industry.[citation needed] Korn shell[edit] Interaction with pdksh in OpenBSD (default shell) The Korn shell (ksh) written by David Korn based on the original Bourne Shell source code,[8] was a middle road between the Bourne shell and the C shell. Its syntax was chiefly drawn from the Bourne shell, while its job control features resembled those of the C shell. The functionality of the original Korn Shell (known as ksh88 from the year of its introduction) was used as a basis for the POSIX shell standard. A newer version, ksh93, has been open source since 2000 and is used on some Linux distributions. A clone of ksh88 known as pdksh is the default shell in OpenBSD. Schily Bourne Shell[edit] Jörg Schilling's Schily-Tools includes three Bourne Shell derivatives.[9] Relationship to other shells[edit] C shell[edit] Bill Joy, the author of the C shell, criticized the Bourne shell as being unfriendly for interactive use,[10] a task for which Stephen Bourne himself acknowledged C shell's superiority. Bourne stated, however, that his shell was superior for scripting and was available on any Unix system,[11] and Tom Christiansen also criticized C shell as being unsuitable for scripting and programming.[12] Almquist shells[edit] Due to copyright issues surrounding the Bourne Shell as it was used in historic CSRG BSD releases, Kenneth Almquist developed a clone of the Bourne Shell, known by some as the Almquist shell and available under the BSD license, which is in use today on some BSD descendants and in low-memory situations. The Almquist Shell was ported to Linux, and the port renamed the Debian Almquist shell, or dash. This shell provides faster execution of standard sh (and POSIX-standard sh, in modern descendants) scripts with a smaller memory footprint than its counterpart, Bash. Its use tends to expose bashisms – bash-centric assumptions made in scripts meant to run on sh. Other shells[edit] Bash (the Bourne-Again shell) was developed in 1989 for the GNU project and incorporates features from the Bourne shell, csh, and ksh. It is meant to be POSIX-compliant. rc was created at Bell Labs by Tom Duff as a replacement for sh for Version 10 Unix. It is the default shell for Plan 9 from Bell Labs. It has been ported to UNIX as part of Plan 9 from User Space. Z shell, developed by Paul Falstad in 1990, is an extended Bourne shell with a large number of improvements, including some features of Bash, ksh, and tcsh. Usage[edit] The Bourne shell was once standard on all branded Unix systems, although historically BSD-based systems had many scripts written in csh. As the basis of POSIX sh syntax, Bourne shell scripts can typically be run with Bash or dash on GNU/Linux or other Unix-like systems. See also[edit] Comparison of command shells Unix shell References[edit] ^ https://www.bsdcan.org/2015/schedule/events/612.en.html Stephen Bourne Keynote for BSDCan 2015 ^ a b McIlroy, M. D. (1987). A Research Unix reader: annotated excerpts from the Programmer's Manual, 1971–1986 (PDF) (Technical report). CSTR. Bell Labs. 139. ^ "The A-Z of Programming Languages: Bourne shell, or sh". computerworld.com.au. Archived from the original on 11 January 2010. Retrieved 6 March 2009. ^ Bourne, Steve (12 January 1979). "mac.h – Macros used by Bourne to structure C like Algol68C". AT&T Corporation. Retrieved 9 September 2006. ^ Landon Curt Noll; Simon Cooper; Peter Seebach & Leonid A. Broukhis (2004). "The IOCCC FAQ – Q/A: How did the IOCCC get started?". www.ioccc.org. Retrieved 9 September 2006. ^ "what shell is this". www.in-ulm.de. ^ "traditional Bourne shell family / history and development". www.in-ulm.de. ^ Korn, David G. (26 October 1994), "ksh - An Extensible High Level Language", Proceedings of the USENIX 1994 Very High Level Languages Symposium, USENIX Association, retrieved 5 February 2015, Instead of inventing a new script language, we built a form entry system by modifying the Bourne shell, adding built-in commands as necessary. ^ "Schily Bourne Shell - A modern enhanced and POSIX compliant Bourne Shell source maintained by Jörg Schilling". Schily-Tools. ^ An Introduction to the C shell by Bill Joy.[page needed] ^ Bourne, Stephen R. (October 1983). "The Unix Shell". BYTE. p. 187. Retrieved 30 January 2015. ^ Tom Christiansen (28 September 1995). "Csh Programming Considered Harmful". Retrieved 17 February 2014. External links[edit] This section's use of external links may not follow Wikipedia's policies or guidelines. Please improve this article by removing excessive or inappropriate external links, and converting useful links where appropriate into footnote references. (August 2016) (Learn how and when to remove this template message) Wikibooks has a book on the topic of: Bourne Shell Scripting The individual members of "The Traditional Bourne Shell Family" "Characteristical common properties of the traditional Bourne shells" Historical C source code for the Bourne shell using mac.h macros from 1979 Original Bourne Shell documentation from 1978 A port of the "heirloom" SVR4 Bourne shell from OpenSolaris to some other Unix-like systems Migrating from the System V (SVR4) Shell to the POSIX Shell Bourne Shell Tutorial (syntax) Faqs shell differences Howard Dahdah, The A–Z of Programming Languages: Bourne shell, or sh — An in-depth interview with Steve Bourne, creator of the Bourne shell, or sh, Computerworld, 5 March 2009. v t e Unix shells Almquist Bash Bourne csh es fish Hamilton Korn PowerShell PWB Qshell rc sash tcsh Thompson Wish Zsh Retrieved from "https://en.wikipedia.org/w/index.php?title=Bourne_shell&oldid=989794106" Categories: Unix shells 1979 software POSIX Scripting languages Text-oriented programming languages Unix SUS2008 utilities Hidden categories: Wikipedia articles needing page number citations from July 2017 Articles with short description Short description is different from Wikidata Use dmy dates from October 2012 All articles with unsourced statements Articles with unsourced statements from January 2017 Wikipedia external links cleanup from August 2016 Wikipedia spam cleanup from August 2016 Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages Azərbaycanca Български Català Čeština Dansk Deutsch Ελληνικά Español Esperanto فارسی Français 한국어 Italiano עברית 日本語 Norsk bokmål Norsk nynorsk Polski Português Русский Slovenčina Suomi Svenska ไทย Українська 中文 Edit links This page was last edited on 21 November 2020, at 01:52 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement