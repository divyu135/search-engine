Burrows–Abadi–Needham logic - Wikipedia Burrows–Abadi–Needham logic From Wikipedia, the free encyclopedia (Redirected from Burrows-Abadi-Needham logic) Jump to navigation Jump to search Burrows–Abadi–Needham logic (also known as the BAN logic) is a set of rules for defining and analyzing information exchange protocols. Specifically, BAN logic helps its users determine whether exchanged information is trustworthy, secured against eavesdropping, or both. BAN logic starts with the assumption that all information exchanges happen on media vulnerable to tampering and public monitoring. This has evolved into the popular security mantra, "Don't trust the network." A typical BAN logic sequence includes three steps:[1] Verification of message origin Verification of message freshness Verification of the origin's trustworthiness. BAN logic uses postulates and definitions – like all axiomatic systems – to analyze authentication protocols. Use of the BAN logic often accompanies a security protocol notation formulation of a protocol and is sometimes given in papers. Contents 1 Language type 2 Alternatives and criticism 3 Basic rules 4 BAN logic analysis of the Wide Mouth Frog protocol 5 References 6 Further reading Language type[edit] BAN logic, and logics in the same family, are decidable: there exists an algorithm taking BAN hypotheses and a purported conclusion, and that answers whether or not the conclusion is derivable from the hypotheses. The proposed algorithms use a variant of magic sets.[2] Alternatives and criticism[edit] BAN logic inspired many other similar formalisms, such as GNY logic. Some of these try to repair one weakness of BAN logic: the lack of a good semantics with a clear meaning in terms of knowledge and possible universes. However, starting in the mid-1990s, crypto protocols were analyzed in operational models (assuming perfect cryptography) using model checkers, and numerous bugs were found in protocols that were "verified" with BAN logic and related formalisms.[citation needed] In some cases a protocol was reasoned as secure by the BAN analysis but where in fact insecure.[3] This has led to the abandonment of BAN-family logics in favor of proof methods based on standard invariance reasoning.[citation needed] Basic rules[edit] The definitions and their implications are below (P and Q are network agents, X is a message,and K is an encryption key): P believes X: P acts as if X is true, and may assert X in other messages. P has jurisdiction over X: P's beliefs about X should be trusted. P said X: At one time, P transmitted (and believed) message X, although P might no longer believe X. P sees X: P receives message X, and can read and repeat X. {X}K: X is encrypted with key K. fresh(X): X has not previously been sent in any message. key(K, P↔Q): P and Q may communicate with shared key K The meaning of these definitions is captured in a series of postulates: If P believes key(K, P↔Q), and P sees {X}K, then P believes (Q said X) If P believes (Q said X) and P believes fresh(X), then P believes (Q believes X). P must believe that X is fresh here. If X is not known to be fresh, then it might be an obsolete message, replayed by an attacker. If P believes (Q has jurisdiction over X) and P believes (Q believes X), then P believes X There are several other technical postulates having to do with composition of messages. For example, if P believes that Q said <X, Y>, the concatenation of X and Y, then P also believes that Q said X, and P also believes that Q said Y. Using this notation, the assumptions behind an authentication protocolcan be formalized. Using the postulates, one can prove that certainagents believe that they can communicate using certain keys. If theproof fails, the point of failure usually suggests an attack whichcompromises the protocol. BAN logic analysis of the Wide Mouth Frog protocol[edit] A very simple protocol — the Wide Mouth Frog protocol — allows two agents, A and B, to establish secure communications, using a trusted authentication server, S, and synchronized clocks all around. Using standard notation the protocol can be specified as follows: A → S : A , { T A , K a b , B } K a s {\displaystyle A\rightarrow S:A,\{T_{A},K_{ab},B\}_{K_{as}}} S → B : { T S , K a b , A } K b s {\displaystyle S\rightarrow B:\{T_{S},K_{ab},A\}_{K_{bs}}} Agents A and B are equipped with keys Kas and Kbs, respectively, for communicating securely with S. So we have assumptions: A believes key(Kas, A↔S) S believes key(Kas, A↔S) B believes key(Kbs, B↔S) S believes key(Kbs, B↔S) Agent A wants to initiate a secure conversation with B. It therefore invents a key, Kab, which it will use to communicate with B. A believes that this key is secure, since it made up the key itself: A believes key(Kab, A↔B) B is willing to accept this key, as long as it is sure that it came from A: B believes (A has jurisdiction over key(K, A↔B)) Moreover, B is willing to trust S to accurately relay keys from A: B believes (S has jurisdiction over (A believes key(K, A↔B))) That is, if B believes that S believes that A wants to use a particular key to communicate with B, then B will trust S and believe it also. The goal is to have B believes key(Kab, A↔B) A reads the clock, obtaining the current time t, and sends the following message: 1 A→S: {t, key(Kab, A↔B)}Kas That is, it sends its chosen session key and the current time to S, encrypted with its private authentication server key Kas. Since S believes that key(Kas, A↔S), and S sees {t, key(Kab, A↔B)}Kas, then S concludes that A actually said {t, key(Kab, A↔B)}. (In particular, S believes that the message was not manufactured out of whole cloth by some attacker.) Since the clocks are synchronized, we can assume S believes fresh(t) Since S believes fresh(t) and S believes A said {t, key(Kab, A↔B)}, S believes that A actually believes that key(Kab, A↔B). (In particular, S believes that the message was not replayed by some attacker who captured it at some time in the past.) S then forwards the key to B: 2 S→B: {t, A, A believes key(Kab, A↔B)}Kbs Because message 2 is encrypted with Kbs, and Bbelieves key(Kbs, B↔S), B now believes that Ssaid {t, A, A believes key(Kab, A↔B)}.Because the clocks are synchronized, B believes fresh(t), and sofresh(A believes key(Kab, A↔B)). Because Bbelieves that S's statement is fresh, B believes that S believes that(A believes key(Kab, A↔B)). Because Bbelieves that S is authoritative about what A believes, B believesthat (A believes key(Kab, A↔B)). Because Bbelieves that A is authoritative about session keys between A and B, Bbelieves key(Kab, A↔B). B can now contact Adirectly, using Kab as a secret session key. Now let's suppose that we abandon the assumption that the clocks aresynchronized. In that case, S gets message 1 from A with {t,key(Kab, A↔B)}, but it can no longer concludethat t is fresh. It knows that A sent this message at some timein the past (because it is encrypted with Kas)but not that this is a recent message, so S doesn't believe that Anecessarily wants to continue to use the keyKab. This points directly at an attack on theprotocol: An attacker who can capture messages can guess one of theold session keys Kab. (This might take a longtime.) The attacker then replays the old {t,key(Kab, A↔B)} message, sending it to S. Ifthe clocks aren't synchronized (perhaps as part of the same attack), S mightbelieve this old message and request that B use the old, compromised keyover again. The original Logic of Authentication paper (linked below) contains this example and many others, including analyses of the Kerberos handshake protocol, and two versions of the Andrew Project RPC handshake (one of which is defective). References[edit] ^ "Course material on BAN logic" (PDF). UT Austin CS. ^ Monniaux, David (1999). "Decision Procedures for the Analysis of Cryptographic Protocols by Logics of Belief". Proceedings of the 12th Computer Security Foundations Workshop. ^ Boyd, Colin; Mao, Wenbo (1994). "On a Limitation of BAN Logic". EUROCRYPT '93 Workshop on the Theory and Application of Cryptographic Techniques on Advances in Cryptology. Retrieved 2016-10-12. Further reading[edit] Burrows, Michael; Abadi, Martín; Needham, Roger. "A Logic of Authentication". CiteSeerX 10.1.1.115.3569. Cite journal requires |journal= (help) Source: The Burrows–Abadi–Needham logic Retrieved from "https://en.wikipedia.org/w/index.php?title=Burrows–Abadi–Needham_logic&oldid=928746311" Categories: Theory of cryptography Automated theorem proving Hidden categories: All articles with unsourced statements Articles with unsourced statements from November 2015 Articles with unsourced statements from January 2017 CS1 errors: missing periodical Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages العربية Deutsch Português Русский Tiếng Việt Edit links This page was last edited on 1 December 2019, at 11:00 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement