WYSIWYG - Wikipedia WYSIWYG From Wikipedia, the free encyclopedia Jump to navigation Jump to search Acronym for "what you see is what you get" in computing For other uses, see WYSIWYG (disambiguation). "What You See Is What You Get" redirects here. For other uses, see What You See Is What You Get (disambiguation). For Wikipedia's WYSIWYG user interface, see Wikipedia:VisualEditor and VisualEditor. In computing, What You See Is What You Get (WYSIWYG, /ˈwɪziwɪɡ/ WIZ-ee-wig[1]) is a system where editing software allows content to be edited in a form that resembles its appearance when printed or displayed as a finished product[2] such as a printed document, web page, or slide presentation. Contents 1 Meaning 2 History 2.1 Etymology 3 Criticism 4 Related acronyms 5 See also 6 References 7 External links Meaning[edit] This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (May 2010) (Learn how and when to remove this template message) The program on the left uses a WYSIWYG editor to produce a Lorem Ipsum document. The program on the right contains LaTeX code, which when compiled will produce a document that will look very similar to the document on the left. Compilation of formatting code is not a WYSIWYG process. WYSIWYG implies a user interface that allows the user to view something very similar to the end result—while the document is being created.[3] In general, WYSIWYG implies the ability to directly manipulate the layout of a document without having to type or remember names of layout commands.[4] The actual meaning depends on the user's perspective, e.g.: In presentation programs, compound documents, and web pages, WYSIWYG means the display precisely represents the appearance of the page displayed to the end-user, but does not necessarily reflect how the page will be printed unless the printer is specifically matched to the editing program, as it was with the Xerox Star and early versions of the Apple Macintosh. In word processing and desktop publishing applications, WYSIWYG means that the display simulates the appearance and represents the effect of fonts and line breaks on the final pagination using a specific printer configuration, so that, for example, a citation on page 1 of a 500-page document can accurately refer to a reference three hundred pages later.[5] WYSIWYG also describes ways to manipulate 3D models in stereo-chemistry, computer-aided design, and 3D computer graphics. Modern software does a good job of optimizing the screen display for a particular type of output. For example, a word processor is optimized for output to a typical printer. The software often emulates the resolution of the printer in order to get as close as possible to WYSIWYG. However, that is not the main attraction of WYSIWYG, which is the ability of the user to be able to visualize what they are producing. In many situations, the subtle differences between what the user sees and what the user gets are unimportant. In fact, applications may offer multiple WYSIWYG modes with different levels of "realism", including A composition mode, in which the user sees something somewhat similar to the end result, but which employs an interface more conducive to composing than the layout itself (e.g., inclusion of section breaks and non-printing characters). A layout mode, in which the user sees something very similar to the end result, but which includes some additional information to facilitate proper alignment and spacing (e.g., margin lines). A preview mode, in which the application attempts to produce an output that is as close to the final result as possible. History[edit] Compound document displayed on Xerox 8010 Star system Before the adoption of WYSIWYG techniques, text appeared in editors using the system standard typeface and style with little indication of layout (margins, spacing, etc.). Users were required to enter special non-printing control codes (now referred to as markup code tags) to indicate that some text should be in boldface, italics, or a different typeface or size. In this environment there was very little distinction between text editors and word processors. These applications typically used an arbitrary markup language to define the codes/tags. Each program had its own special way to format a document, and it was a difficult and time-consuming process to change from one word processor to another. The use of markup tags and codes remains popular today in some applications due to their ability to store complex formatting information. When the tags are made visible in the editor, however, they occupy space in the unformatted text, and as a result can disrupt the desired layout and flow. Bravo, a document preparation program for the Alto produced at Xerox PARC by Butler Lampson, Charles Simonyi and colleagues in 1974, is generally considered to be the first program to incorporate the WYSIWYG technology,[6] displaying text with formatting (e.g. with justification, fonts, and proportional spacing of characters).[7] The Alto monitor (72 PPI, based on the typographic unit) was designed so that one full page of text could be seen and then printed on the first laser printers. When the text was laid out on the screen, 72 PPI font metric files were used, but when printed, 300 PPI files were used. As a result, one would occasionally find characters and words that are slightly off—a problem that would continue up to this day. Bravo was released commercially, and the software eventually included in the Xerox Star can be seen as a direct descendant of it.[8] In late 1978, in parallel with but independent of the work at Xerox PARC, Hewlett Packard developed and released the first commercial WYSIWYG software application for producing overhead slides (or what today are referred to as presentation graphics). The first release, named BRUNO (after an HP sales training puppet), ran on the HP 1000 minicomputer, taking advantage of HP 2640—HP's first bitmapped computer terminal. BRUNO was then ported to the HP-3000 and re-released as "HP Draw".[9] By 1981, MicroPro advertised that its WordStar word processor had WYSIWYG,[10] but its display was limited to displaying styled text in WYSIWYG fashion; bold and italic text would be represented on screen, instead of being surrounded by tags or special control characters.[11] In 1983, the Weekly Reader advertised its Stickybear educational software with the slogan "what you see is what you get", with photographs of its Apple II graphics,[12] but home computers of the 1970s and early 1980s lacked the sophisticated graphics capabilities necessary to display WYSIWYG documents, meaning that such applications were usually confined to limited-purpose, high-end workstations (such as the IBM Displaywriter System) that were too expensive for the general public to afford. Towards the mid-1980s, however, things began to change. as improving technology allowed the production of cheaper bitmapped displays, and WYSIWYG software started to appear in more popular computers, including LisaWrite for the Apple Lisa, released in 1983, and MacWrite for the Apple Macintosh, released in 1984.[13] The Apple Macintosh system was originally designed so that the screen resolution and the resolution of the ImageWriter dot-matrix printers sold by Apple were easily scaled: 72 PPI for the screen and 144 DPI for the printers. Thus, the scale and dimensions of the on-screen display in programs such as MacWrite and MacPaint were easily translated to the printed output. If the paper were held up to the screen, the printed image would be the same size as the on-screen image, but at twice the resolution. As the ImageWriter was the only model of printer physically compatible with the Macintosh printer port, this created an effective closed system. Later, when Macs-using external displays became available, the resolution was fixed to the size of the screen to achieve 72 DPI. These resolutions often differed from the VGA-standard resolutions common in the PC world at the time. Thus, while a Macintosh 15-inch (38 cm) monitor had the same 640 × 480 resolution as a PC, a 16-inch (41 cm) screen would be fixed at 832 × 624 rather than the 800 × 600 resolution used by PCs. With the introduction of third-party dot-matrix printers as well as laser printers and multisync monitors, resolutions deviated from even multiples of the screen resolution, making true WYSIWYG harder to achieve. In 2012, Wikipedia offered a WYSIWYG editor called VisualEditor, which allowed edits of Wikipedia to be performed without seeing the page source.[14] Etymology[edit] The phrase "what you see is what you get," from which the acronym derives, was a catchphrase popularized by Flip Wilson's drag persona Geraldine, first appearing in September 1969, then regularly in the early 1970s on The Flip Wilson Show. The phrase was a statement demanding acceptance of Geraldine's entire personality and appearance. Furthermore, multiple hit songs and albums debuted in 1971 that could have also contributed to popularizing this phrase including "What You See Is What You Get" by Stoney & Meatloaf, Stand by Me (Whatcha See Is Whatcha Get) by Bernard Purdie, and Whatcha See Is Whatcha Get by The Dramatics. As it relates to computing, there are multiple claims to first use of the phrase: In mid-1975, John W. Seybold, the founder of Seybold Publications, and researchers at PARC, incorporated Gypsy software into Bravo to create Bravo 3, which allowed text to be printed as displayed. Charles Simonyi and the other engineers appropriated Flip Wilson's popular phrase around that time.[15][16] Barbara Beeton reports that the term was coined by Bill Tunnicliffe, in a presentation at a 1978 committee meeting involving the Graphic Communications Association (GCA), the American Mathematical Society (AMS), and the Printing Industries of America (PIA).[17] The phrase was coined in 1982[18] by Larry Sinclair, an engineer at Information International, Inc. ("Triple I") to express the idea that what the user sees on the screen is what the user gets on the printer while using the "page layout system", a pre-press typesetting system first shown at ANPS in Las Vegas.[when?] Around 1974, Karen Thacker, the technophobe wife of Xerox hardware designer Charles "Chuck" Thacker, was introduced to a Xerox Alto running Bravo, and commented, "You mean, what I see is what I get?”[19] Criticism[edit] Because designers of WYSIWYG applications typically have to account for a variety of different output devices, each of which has different capabilities, there are a number of problems that must be solved in each implementation. These can be seen as tradeoffs between multiple design goals, hence applications that use different solutions may be suitable for different purposes. Typically, the design goals of a WYSIWYG application may include the following: Provide high-quality printed output on a particular printer Provide high-quality printed output on a variety of printers Provide high-quality on-screen output Allow the user to visualize what the document will look like when printed Allow the user to visualize what the website will look like when published However, it is usually not possible to achieve all of these goals at once, and the major problem to overcome is that of the varying output resolutions. As of 2016, monitors typically have a resolution of between 102 and 125 pixels per inch, while printers generally have resolutions between 240 and 1440 pixels per inch. In some printers, the horizontal resolution is different from the vertical. This becomes a problem when trying to lay out text; because older output technologies require the spacing between characters to be a whole number of pixels (as rounding errors will cause the same text to require different amounts of space in different resolutions). Solutions to this include the following: Always laying out the text using a resolution higher than the user is likely to use in practice. This can result in poor quality output for lower resolution devices (although techniques such as spatial anti-aliasing may help mitigate this), but provides a fixed layout, allowing easy user visualisation. This is the method used by Adobe Acrobat. Laying out the text at the resolution of the printer on which the document will be printed. This can result in low quality on-screen output, and the layout may sometimes change if the document is printed on a different printer (although this problem occurs less frequently with higher resolution printers, as rounding errors are smaller). This is the method used by Microsoft Word. Laying out the text at the resolution of a specific printer (in most cases the default one) on which the document will be printed using the same font information and kerning. The character positions and number of characters in a line are exactly similar to the printed document. Laying out the text at the resolution for the output device to which it will be sent. This often results in changes in layout between the on-screen display and printed output, so is rarely used (though it could be common in web page designing tools claiming to be WYSIWYG). Other problems that have been faced in the past include differences in the fonts used by the printer and the on-screen display (largely solved by the use of downloadable font technologies like TrueType), and differences in color profiles between devices (mostly solved by printer drivers with good color model conversion software). Apart from these issues, the practice of WYSIWYG has also been argued to being more conducive to a distracted writing process, as the WYSIWYG philosophy assumes no separation between composition and formatting, which opens up the possibility of repeatedly tweaking the layout of the document—as one prepares its content in real-time.[20][21] Related acronyms[edit] Many variations are used only to illustrate a point or make a joke, and have very limited real use. Some that have been proposed include the following: WISIWIT, what I see is what I type, also used to describe text-oriented editing systems in the opposite sense of WYSIWYG. WYCIWYG, what you cache is what you get. "wyciwyg://" turns up occasionally in the address bar of Gecko-based Web browsers such as Mozilla Firefox when the browser is retrieving cached information. Unauthorized access to wyciwyg:// documents was fixed by Mozilla in Firefox version 2.0.0.5.[22] WYGIWYG; what you get is what you get, often used in a similar way to WYSIAYG, WYSIMOLWYG, or WYSINWYW.[23] WYGIWYS, what you get is what you see, used in computing to describe an interaction paradigm in results-oriented user interface. The term was used by Jakob Nielsen to describe Microsoft Office 2007's "Ribbon" interface[24] WYSIAWYG; what you see is almost what you get, similar to WYSIMOLWYG.[4] WYSIAYG, what you see is all you get, used to point out that advanced users are sometimes limited by the user interface.[25] WYSIMOLWYG, what you see is more or less what you get, recognizing that most WYSIWYG implementations are imperfect.[4] WYSINWYW, what you see is not what you want, suggesting that Microsoft Word often controls the user, not the other way around[26] WYSIPWYG, what you see is probably what you get, relates to html and markup editors where code and macro tags sort of show what the result will eventually be. This type of WYSIWYG view is hard to render while editing so the user can only guess at the outcome. WYSIWYD, what you see is what you deserve refers to the ability of the user and their effort to create something worthwhile. WYSIWYM, what you see is what you mean, saying that the user sees what best conveys the message and the structure of it—rather than its actual formatting. WYGIWYM, what you get is what you mean, saying that the user gets (visually, aurally or by any other means) what best conveys the message. WYSIWYN, what you see is what you need relates to Software, which is not composed through the interconnection of modules, but work with such a detailed user and rights management, that users can see only what they really need. WYSIWYS, what you see is what you sign, an important requirement for digital signature software. It means that the software has to be able to show the user the content without any hidden content before the user signs it. WYSIWYW, what you see is what you want, used to describe GNU TeXmacs editing platform.[27] The abbreviation clarifies that unlike in WYSIWYG editors, the user is able to customize WYSIWYW platforms to act (possibly in part) as manual typesetting programs such as TeX or troff. WYSYHYG, what you see you hope you get (/ˈwɪzihɪɡ/), a term ridiculing text mode word processing software; used in the Microsoft Windows video collection, a video distributed around 1991 on two VHS cassettes at promotional events. YAFIYGI, you asked for it you got it, used to describe a text-command oriented document editing system that does not include WYSIWYG, in reference to the fact that users of such systems often ask for something they did not really want. It is considered to be the opposite of WYSIWYG.[28] The phrase was first used in this context in 1983 in the essay Real Programmers Don't Use Pascal to describe the TECO text editor system, and began to be abbreviated circa 1993.[29][30][31] See also[edit] Comparison of HTML editors Does exactly what it says on the tin DWIM Formatted text Plain text Tableless web design List of HTML editors References[edit] ^ "Dictionary.com Unabridged (v 1.1)". Archived from the original on 30 November 2007. Retrieved 9 November 2007. ^ "Oxford English Dictionary: WYSIWYG". Oxford University Press. ^ "WYSIWYG Website Builders for Online Business". 15 December 2015. Archived from the original on 16 December 2015. ^ a b c Howe, Denis (3 March 1999). "What You See Is What You Get". FOLDOC. Archived from the original on 5 November 2010. Retrieved 7 January 2011. ^ Chamberlain, Donald D. (1987). "Document convergence in an interactive formatting system" (PDF). IBM Journal of Research and Development. 31 (1): 59. doi:10.1147/rd.311.0058. Archived (PDF) from the original on 10 September 2008. ^ "Computing Now". Archived from the original on 7 October 2016. Retrieved 22 September 2016. ^ Markoff, John. "The Real History of WYSIWYG". nytimes.com. Archived from the original on 15 February 2017. Retrieved 29 August 2016. ^ Brad A. Myers. A Brief History of Human Computer Interaction Technology. Archived 18 June 2019 at the Wayback Machine ACM interactions. Vol. 5, no. 2, March, 1998. pp. 44–54. ^ "Hewlett Packard: Computer Focus" (PDF). HP Computer Museum. September 1985. Archived (PDF) from the original on 9 September 2016. Retrieved 24 July 2019. ^ Advertisement (March 1981). "Can your word processor pass this screen test?". BYTE. p. 269. Archived from the original on 31 August 2014. Retrieved 18 October 2013. ^ "In the beginning, there was the word processor". Archived from the original on 23 September 2016. Retrieved 22 September 2016. ^ "What You See Is What You Get". Softline (advertisement). January 1983. pp. 10–11. Archived from the original on 3 July 2014. Retrieved 27 July 2014. ^ Apple Computer, Claris (1984), MacWrite, archived from the original on 7 March 2019, retrieved 24 July 2019 ^ "Wikimedia releases updated prototype for simplified visual editor - The Verge". The Verge. 22 June 2012. Archived from the original on 27 September 2013. Retrieved 16 September 2014. ^ Hiltzik, Michael (1999). Dealers of Lightning: Xerox PARC and the Dawn of the Computer Age. HarperBusiness. p. 200. ISBN 0-88730-891-0. ^ Lohr, Steve (2001). Go To. Basic Books. p. 128. ISBN 0-465-04226-0. ^ Flynn, Peter (2014). Human Interfaces to Structured Documents (PDF) (Thesis). Ireland: University College Cork. p. 40 footnote 10. Archived (PDF) from the original on 11 March 2016. Retrieved 10 March 2016. ^ Merriam Webster Collegiate Dictionary, 1998 ^ Markoff, John. "The Real History of WYSIWYG". Bits Blog. Archived from the original on 1 August 2018. Retrieved 6 March 2017. ^ "The Definitive, Non-Technical Introduction to LaTeX, Professional Typesetting and Scientific Publishing". Math Vault. 5 September 2015. Archived from the original on 24 July 2019. Retrieved 24 July 2019. ^ "Word Processors: Stupid and Inefficient". Archived from the original on 25 September 2016. Retrieved 22 September 2016. ^ "MFSA 2007-24 Unauthorized access to wyciwyg:// documents". Archived from the original on 4 June 2014. Retrieved 16 September 2014. ^ "WYGIWYG". Archived from the original on 10 September 2015. Retrieved 1 January 2016. ^ "Jakob Nielsen's Alertbox, October 10, 2005 "R.I.P. WYSIWYG"". Archived from the original on 31 July 2012. Retrieved 16 September 2014. ^ Howe, Denis (3 March 1999). "What You See Is All You Get". FOLDOC. Archived from the original on 5 November 2010. Retrieved 7 January 2011. ^ "Crouching Error, Hidden Markup". September 2001. Archived from the original on 12 July 2017. Retrieved 5 September 2016. ^ "Welcome to GNU TeXmacs (FSF GNU project)". texmacs.org. Archived from the original on 11 February 2013. Retrieved 18 November 2019. ^ Raymond, Eric S. (1996). The New Hacker's dictionary (3rd ed.). MIT Press. p. 497. ISBN 0-262-68092-0. ^ Eric S. Raymond (ed). "The Jargon File 4.4.7: YAFIYGI". Archived from the original on 29 June 2011. Retrieved 6 September 2009.CS1 maint: extra text: authors list (link) ^ "Real Programmers Don't Use Pascal". Archived from the original on 18 December 2008. Retrieved 9 December 2008. (originally published in Datamation vol 29 no. 7, July 1983) ^ Howe, Denis (13 March 1995). "What You See Is All You Get". FOLDOC. Archived from the original on 21 June 2010. Retrieved 7 January 2011. External links[edit] Look up WYSIWYG or what you see is what you get in Wiktionary, the free dictionary. The Jargon File entry for WYSIWYG What has WYSIWYG done to us? – Critical paper about the negative effects the introduction of WYSIWYG has had as of 1996. XML: WYSIWYG to WYSIWYM – A brief look at XML document authoring An article on existing XML authoring software (May 2005) ATPM.com's WYSIWYG: Is it What You Want? Retrieved from "https://en.wikipedia.org/w/index.php?title=WYSIWYG&oldid=989686234" Categories: User interfaces Computing acronyms Word processors Presentation software Editing software Hidden categories: Webarchive template wayback links CS1 maint: extra text: authors list Articles with short description Short description is different from Wikidata Use dmy dates from October 2020 Articles needing additional references from May 2010 All articles needing additional references All articles with vague or ambiguous time Vague or ambiguous time from January 2011 Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages العربية Azərbaycanca Беларуская (тарашкевіца)‎ Български Bosanski Català Čeština Dansk Deutsch Español Esperanto Euskara فارسی Français Frysk Galego 한국어 हिन्दी Hrvatski Bahasa Indonesia Íslenska Italiano עברית Jawa ქართული Kurdî Latviešu Lietuvių Lumbaart Magyar მარგალური Nederlands 日本語 Napulitano Norsk bokmål Polski Português Română Русский Simple English Slovenčina Slovenščina Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska ไทย Türkçe Українська اردو Tiếng Việt 文言 中文 Edit links This page was last edited on 20 November 2020, at 12:42 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement