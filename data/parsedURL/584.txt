Tcl - Wikipedia Tcl From Wikipedia, the free encyclopedia Jump to navigation Jump to search High-level programming language For other uses, see Tcl (disambiguation). Tcl Paradigm Multi-paradigm: event-driven, functional, imperative, object-oriented Designed by John Ousterhout Developer Tcl Core Team[1] First appeared 1988; 32 years ago (1988) Stable release 8.6.10 / November 21, 2019; 12 months ago (2019-11-21) Preview release 8.7a3 / November 25, 2019; 12 months ago (2019-11-25) Typing discipline Dynamic typing, everything can be treated as a string License BSD-style[2] Filename extensions .tcl, .tbc[3] Website www.tcl-lang.org www.tcl.tk Major implementations ActiveTcl Androwish Dialects Jim Influenced by AWK, Lisp Influenced PHP,[4] PowerShell,[5] Tea Tcl (pronounced "tickle" or as an initialism[6]) is a high-level, general-purpose, interpreted, dynamic programming language. It was designed with the goal of being very simple but powerful.[7] Tcl casts everything into the mold of a command, even programming constructs like variable assignment and procedure definition.[8] Tcl supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles. It is commonly used embedded into C applications,[9] for rapid prototyping, scripted applications, GUIs, and testing.[10] Tcl interpreters are available for many operating systems, allowing Tcl code to run on a wide variety of systems. Because Tcl is a very compact language, it is used on embedded systems platforms, both in its full form and in several other small-footprint versions.[11] The popular combination of Tcl with the Tk extension is referred to as Tcl/Tk, and enables building a graphical user interface (GUI) natively in Tcl. Tcl/Tk is included in the standard Python installation in the form of Tkinter. Contents 1 History 2 Features 2.1 Safe-Tcl 3 Syntax and fundamental semantics 3.1 Basic commands 3.2 Advanced commands 3.3 Uplevel 3.4 Upvar 3.5 Object-oriented 4 Web application development 5 Interfacing with other languages 6 Extension packages 7 See also 8 References 9 Further reading 10 External links History[edit] The Tcl programming language was created in the spring of 1988 by John Ousterhout while working at the University of California, Berkeley.[12][13] Originally "born out of frustration",[9] according to the author, with programmers devising their own languages intended to be embedded into applications, Tcl gained acceptance on its own. Ousterhout was awarded the ACM Software System Award in 1997 for Tcl/Tk.[14] The name originally comes from Tool Command Language, but is conventionally spelled "Tcl" rather than "TCL".[15] Date Event January 1990 Tcl announced beyond Berkeley (Winter USENIX). June 1990 Expect announced (Summer USENIX). January 1991 First announcement of Tk (Winter USENIX). June 1993 First Tcl/Tk conference (Berkeley). [table] geometry manager (forerunner of [grid]), [incr Tcl], TclDP and Groupkit, announced there. August 1997 Tcl 8.0 introduced a bytecode compiler.[16] April 1999 Tcl 8.1 introduces full Unicode support[17] and advanced regular expressions.[18] August 1999 Tcl 8.2 introduces Tcl Extension Architecture (TEA)[19] August 2000 Tcl Core Team formed, moving Tcl to a more community-oriented development model.[1] September 2002 Ninth Tcl/Tk conference (Vancouver). Announcement of starkit packaging system. Tcl 8.4.0 released.[20] December 2007 Tcl 8.5 added new datatypes, a new extension repository, bignums,[21] lambdas.[22][23] December 2012 Tcl 8.6 added built-in dynamic object system, TclOO, and stackless evaluation.[24] Tcl conferences and workshops are held in both the United States and Europe.[25] Features[edit] A Tcl file being edited in the Eclipse IDE Tcl's features include All operations are commands, including language structures. They are written in prefix notation. Commands commonly accept a variable number of arguments (are variadic). Everything can be dynamically redefined and overridden. Actually, there are no keywords, so even control structures can be added or changed, although this is not advisable. All data types can be manipulated as strings, including source code. Internally, variables have types like integer and double, but converting is purely automatic. Variables are not declared, but assigned to. Use of a non-defined variable results in an error. Fully dynamic, class-based object system, TclOO, including advanced features such as meta-classes, filters, and mixins.[26] Event-driven interface to sockets and files. Time-based and user-defined events are also possible. Variable visibility restricted to lexical (static) scope by default, but uplevel and upvar allowing procs to interact with the enclosing functions' scopes. All commands defined by Tcl itself generate error messages on incorrect usage. Extensibility, via C, C++, Java, Python, and Tcl. Interpreted language using bytecode Full Unicode (3.1 in the beginning, regularly updated) support, first released 1999. Regular expressions[18] Cross-platform: Windows API; Unix, Linux, Macintosh etc. Close, cross-platform integration with windowing (GUI) interface Tk. Multiple distribution mechanisms exist: Full development version (for Windows e.g. ActiveState Tcl, see [1]) Tclkits (single file executable containing a complete scripting runtime, only about 4 megabytes in size), Starkits (wrapping mechanism for delivering an application in a self-contained, installation-free, and highly portable way) and Starpacks (combine Starkit with Tclkit to produce a Starpack - a single platform specific executable file, ideal for easy deployment) The Jim Interpreter, a small footprint Tcl implementation Freely distributable source code under a BSD license.[27] Safe-Tcl[edit] Safe-Tcl is a subset of Tcl that has restricted features so that Tcl scripts cannot harm their hosting machine or application.[28] File system access is limited and arbitrary system commands are prevented from execution. It uses a dual interpreter model with the untrusted interpreter running code in an untrusted script. It was designed by Nathaniel Borenstein and Marshall Rose to include active messages in e-mail. Safe-Tcl can be included in e-mail when the application/safe-tcl and multipart/enabled-mail are supported. The functionality of Safe-Tcl has since been incorporated as part of the standard Tcl/Tk releases.[29][30] Syntax and fundamental semantics[edit] The syntax and semantics of Tcl are covered by twelve rules[31] known as the Dodekalogue.[32] A Tcl script consists of a series of command invocations. A command invocation is a list of words separated by whitespace and terminated by a newline or semicolon. The first word is the name of a command, which may be built into the language, found in an available library, or defined in the script itself. The subsequent words serve as arguments to the command: commandName argument1 argument2 ... argumentN The following example uses the puts command to display a string of text on the host console: puts "Hello, World!" This sends the string "Hello, World!" to the standard output device along with an appended newline character. Variables and the results of other commands can be substituted into strings, such as in this example which uses the set and expr commands to store the result of a calculation in a variable (note that Tcl does not use = as an assignment operator), and then uses puts (short for "put string") to print the result together with some explanatory text: # expr evaluates text string as an expressionset sum [expr 1+2+3+4+5]puts "The sum of the numbers 1..5 is $sum." The # character introduces a comment. Comments can appear anywhere the interpreter is expecting a command name. # with curly braces, variable substitution is performed by exprset x 1set sum [expr {$x + 2 + 3 + 4 + 5}]; # $x is not substituted before passing the parameter to expr;                                     # expr substitutes 1 for $x while evaluating the expressionputs "The sum of the numbers 1..5 is $sum."; # sum is 15 # without curly braces, variable substitution occurs at the definition site (lexical scoping)set x 2set op *set y 3set res [expr $x$op$y]; # $x, $op, and $y are substituted, and the expression is evaluatedputs "2 * 3 is $res."; # 6 is substituted for $res As seen in these examples, there is one basic construct in the language: the command. Quoting mechanisms and substitution rules determine how the arguments to each command are processed. One special substitution occurs before the parsing of any commands or arguments. If the final character on a line (i.e., immediately before a newline) is a backslash, then the backslash-newline combination (and any spaces or tabs immediately following the newline) are replaced by a single space. This provides a line continuation mechanism, whereby long lines in the source code can be wrapped to the next line for the convenience of readers. Continuing with normal argument processing, a word that begins with a double-quote character (") extends to the next double-quote character. Such a word can thus contain whitespace and semicolons without those characters being interpreted as having any special meaning (i.e., they are treated as normal text characters). A word that begins with an opening curly-brace character ({) extends to the next closing curly-brace character (}). Inside curly braces all forms of substitution are suppressed except the previously mentioned backslash-newline elimination. Words not enclosed in either construct are known as bare words. In bare and double-quoted words, three types of substitution may occur: Command substitution replaces the contents of balanced square brackets with the result of evaluating the script contained inside. For example, [expr 1+2+3] is replaced by the result of evaluating the contained expression (in this case 6). Variable substitution replaces the name of a variable prefixed with a dollar sign with the contents (or value) of the variable. For example, $foo is replaced by the contents of the variable called "foo". The variable name may be surrounded by curly braces to separate it from subsequent text in otherwise ambiguous cases (e.g., ${foo}ing). Backslash substitution replaces a backslash followed by a letter with another character. For example, \n is replaced by a newline. Substitution proceeds left-to-right in a single scan through each word. Any substituted text will not be scanned again for possible further substitutions. However, any number of substitutions can appear in a single word. From Tcl 8.5 onwards, any word may be prefixed by {*}, which causes the word to be split apart into its constituent sub-words for the purposes of building the command invocation (similar to the ,@ sequence of Lisp's quasiquote feature). As a consequence of these rules, the result of any command may be used as an argument to any other command. Also, there is no operator or command for string concatenation, as the language concatenates directly. Note that, unlike in Unix command shells, Tcl does not reparse any string unless explicitly directed to do so, which makes interactive use more cumbersome, but scripted use more predictable (e.g., the presence of spaces in filenames does not cause difficulties). The single equality sign (=) serves no special role in the language at all. The double equality sign (==) is the test for equality which is used in expression contexts such as the expr command and in the first argument to if. (Both commands are part of the standard library; they have no special place in the library and can be replaced if desired.) The majority of Tcl commands, especially in the standard library, are variadic, and the proc (the constructor for scripted command procedures) allows one to define default values for unspecified arguments and a catch-all argument to allow the code to process arbitrary numbers of arguments. Tcl is not statically typed: each variable may contain integers, floats, strings, lists, command names, dictionaries, or any other value; values are reinterpreted (subject to syntactic constraints) as other types on demand. However, values are immutable and operations that appear to change them actually just return a new value instead. Basic commands[edit] The most important commands that refer to program execution and data operations are: set writes a new value to a variable (creates a variable if did not exist). If used only with one argument, it returns the value of the given variable (it must exist in this case). proc defines a new command, whose execution results in executing a given Tcl script, written as a set of commands. return can be used to immediately return control to the caller. The usual execution control commands are: if executes given script body (second argument), if the condition (first argument) is satisfied. It can be followed by additional arguments starting from elseif with the alternative condition and body, or else with the complementary block. while repeats executing given script body, as long as the condition (first argument) remains satisfied foreach executes given body where the control variable is assigned list elements one by one. for shortcut for initializing the control variable, condition (as in while) and the additional "next iteration" statement (command executed after executing the body) Those above looping commands can be additionally controlled by the following commands: break interrupts the body execution and returns from the looping command continue interrupts the body execution, but the control is still given back to the looping command. For while it means to loop again, for for and foreach, pick up the next iteration. return interrupts the execution of the current body no matter how deep inside a procedure, until reaching the procedure boundary, and returns given value to the caller. Advanced commands[edit] expr passes the argument to a separate expression interpreter and returns the evaluated value. Note that the same interpreter is used also for "conditional" expression for if and looping commands. list creates a list comprising all the arguments, or an empty string if no argument is specified. The lindex command may be used on the result to re-extract the original arguments. array manipulates array variables. dict manipulates dictionary (since 8.5), which are lists with an even number of elements where every two elements are interpreted as a key/value pair. regexp matches a regular expression against a string. regsub Performs substitutions based on regular expression pattern matching. uplevel is a command that allows a command script to be executed in a scope other than the current innermost scope on the stack. upvar creates a link to variable in a different stack frame. namespace lets you create, access, and destroy separate contexts for commands and variables. apply applies an anonymous function (since 8.6). coroutine, yield, and yieldto create and produce values from coroutines (since 8.6). try lets you trap and process errors and exceptions. catch lets you trap exceptional returns. zlib provides access to the compression and checksumming facilities of the Zlib library (since 8.6). Uplevel[edit] uplevel allows a command script to be executed in a scope other than the current innermost scope on the stack. Because the command script may itself call procedures that use the uplevel command, this has the net effect of transforming the call stack into a call tree.[33] It was originally implemented to permit Tcl procedures to reimplement built-in commands (like for, if or while) and still have the ability to manipulate local variables. For example, the following Tcl script is a reimplementation of the for command (omitting exception handling): proc for {initCmd testExpr advanceCmd bodyScript} {    uplevel 1 $initCmd    set testCmd [list expr $testExpr]    while {[uplevel 1 $testCmd]} {        uplevel 1 $bodyScript        uplevel 1 $advanceCmd    }} Upvar[edit] upvar arranges for one or more local variables in the current procedure to refer to variables in an enclosing procedure call or to global variables. The upvar command simplifies the implementation of call-by-name procedure calling and also makes it easier to build new control constructs as Tcl procedures.[34] A decr command that works like the built-in incr command except it subtracts the value from the variable instead of adding it: proc decr {varName {decrement 1}} {    upvar 1 $varName var    incr var [expr {-$decrement}]} Object-oriented[edit] See also: Object-oriented programming Tcl 8.6 added a built-in dynamic object system, TclOO, in 2012.[26] It includes features such as: Class-based object system. This is what most programmers expect from OO. Allows per-object customization and dynamic redefinition of classes. Meta-classes Filters Mixins A system for implementing methods in custom ways, so that package authors that want significantly different ways of doing a method implementation may do so fairly simply. oo::class create fruit {    method eat {} {        puts "yummy!"    }}oo::class create banana {    superclass fruit    constructor {} {        my variable peeled        set peeled 0    }    method peel {} {        my variable peeled        set peeled 1        puts "skin now off"    }    method edible? {} {        my variable peeled        return $peeled    }    method eat {} {        if {![my edible?]} {            my peel        }        next    }}set b [banana new]$b eat               → prints "skin now off" and "yummy!"fruit destroy$b eat               → error "unknown command" Tcl did not have object oriented (OO) syntax until 2012,[26] so various extension packages emerged to enable object-oriented programming. They are widespread in existing Tcl source code. Popular extensions include: incr Tcl XOTcl Itk Snit STOOOP TclOO was not only added to build a strong object oriented system, but also to enable extension packages to build object oriented abstractions using it as a foundation. After the release of TclOO, incr Tcl was updated to use TclOO as its foundation.[24] Web application development[edit] Tcl Web Server is a pure-Tcl implementation of an HTTP protocol server. It runs as a script on top of a vanilla Tcl interpreter. Apache Rivet is an open source programming system for Apache HTTP Server that allows developers to use Tcl as a scripting language for creating dynamic web applications. Rivet is similar to PHP, ASP, and JSP. Rivet was primarily developed by Damon Courtney, David Welton, Massimo Manghi, Harald Oehlmann and Karl Lehenbauer. Rivet can use any of the thousands of publicly available Tcl packages that offer countless features such as database interaction (Oracle, PostgreSQL, MySQL, SQLite, etc.), or interfaces to popular applications such as the GD Graphics Library. Interfacing with other languages[edit] Tcl interfaces natively with the C language.[35] This is because it was originally written to be a framework for providing a syntactic front-end to commands written in C, and all commands in the language (including things that might otherwise be keywords, such as if or while) are implemented this way. Each command implementation function is passed an array of values that describe the (already substituted) arguments to the command, and is free to interpret those values as it sees fit. Digital logic simulators often include a Tcl scripting interface for simulating Verilog, VHDL and SystemVerilog hardware languages. Tools exist (e.g. SWIG, Ffidl) to automatically generate the necessary code to connect arbitrary C functions and the Tcl runtime, and Critcl does the reverse, allowing embedding of arbitrary C code inside a Tcl script and compiling it at runtime into a DLL. Extension packages[edit] The Tcl language has always allowed for extension packages, which provide additional functionality, such as a GUI, terminal-based application automation, database access, and so on. Commonly used extensions include: Tk The most popular Tcl extension is the Tk toolkit, which provides a graphical user interface library for a variety of operating systems. Each GUI consists of one or more frames. Each frame has a layout manager. Expect One of the other very popular Tcl extensions is Expect extension. The early close relationship of Expect with Tcl is largely responsible for the popularity of Tcl in prolific areas of use such as in Unix testing, where Expect was (and still is today) employed very successfully to automate telnet, ssh, and serial sessions to perform many repetitive tasks (i.e., scripting of formerly interactive-only applications). Tcl was the only way to run Expect, so Tcl became very popular in these areas of industry. Tile/Ttk Tile/Ttk[36] is a styles and theming widget collection that can replace most of the widgets in Tk with variants that are truly platform native through calls to an operating system's API. Themes covered in this way are Windows XP, Windows Classic, Qt (that hooks into the X11 KDE environment libraries) and Aqua (Mac OS X). A theme can also be constructed without these calls using widget definitions supplemented with image pixmaps. Themes created this way include Classic Tk, Step, Alt/Revitalized, Plastik and Keramik. Under Tcl 8.4, this package is known as Tile, while in Tcl 8.5 it has been folded into the core distribution of Tk (as Ttk). Tix Tix, the Tk Interface eXtension, is a set of user interface components that expand the capabilities of Tcl/Tk and Python applications. It is an open source software package maintained by volunteers in the Tix Project Group and released under a BSD-style license.[37] Itcl/IncrTcl Itcl is an object system for Tcl, and is normally named as [incr Tcl] (that being the way to increment in Tcl, similar in fashion to the name C++). Tcllib Tcllib is a set of scripted packages for Tcl that can be used with no compilation steps. Tklib Tklib is a collection of utility modules for Tk, and a companion to Tcllib. tDOM tDOM is a Tcl extension for parsing XML, based on the Expat parser TclTLS TclTLS is OpenSSL extension to Tcl. TclUDP The TclUDP[38] extension provides a simple library to support User Datagram Protocol (UDP) sockets in Tcl. Databases Tcl Database Connectivity (TDBC), part of Tcl 8.6, is a common database access interface for Tcl scripts. It currently supports drivers for accessing MySQL, ODBC, PostgreSQL and SQLite databases. More are planned for the future. Access to databases is also supported through database-specific extensions, of which there are many available.[39] See also[edit] Computer programming portal Eggdrop Expect TclX Tkdesk Comparison of Tcl integrated development environments Comparison of programming languages List of programming languages Environment Modules References[edit] ^ a b "Tcl/Tk Core Development". Tcl Developer Xchange. Retrieved 2016-11-01. ^ "Tcl/Tk License Terms". Tcl Developer Xchange. Retrieved 2016-11-02. ^ "Tcl Dev Kit - Compiler". ActiveState Docs. Retrieved 2016-11-02. ^ Lerdorf, Rasmus (2007-04-26). "PHP on Hormones – history of PHP presentation by Rasmus Lerdorf given at the MySQL Conference in Santa Clara, California". The Conversations Network. Retrieved 2009-12-11. ^ "PowerShell and WPF: WTF". Windows PowerShell Blog. Microsoft. Archived from the original on December 25, 2008. Retrieved April 3, 2019. ^ Kenny, Kevin (4 July 2005). "Re: TCL certification". Newsgroup: comp.lang.tcl. ^ "Language". Tcl Developer Xchange. Retrieved 2016-11-02. ^ Tcl Fundamentals, Chapter 1 in Practical Programming in Tcl and Tk, ISBN 0-13-038560-3 ^ a b From the inside flap of Tcl and the Tk Toolkit, ISBN 0-201-63337-X ^ "Uses for Tcl/Tk". Tcl Developer Xchange. Retrieved 2016-11-02. ^ "Cisco IOS Scripting with TCL Configuration Guide". Cisco Support. Retrieved 2016-11-02. ^ John Ousterhout. "History of Tcl". Personal pages. Stanford University. Retrieved 2011-08-09. ^ "History of Tcl". Tcl Developer Xchange. Retrieved 2016-11-02. ^ "John K Ousterhout - Award Winner". ACM Awards. Retrieved 2016-11-04. ^ From the Tcler's Wiki Tcl vs. TCL ^ "Tcl/Tk 8.0 Release Announcement". Tcl Developer Xchange. Retrieved 2014-07-01. ^ "Tcl/Tk 8.1 Release Announcement". Tcl Developer Xchange. Retrieved 2014-07-01. ^ a b "New Regular Expression Features in Tcl 8.1". Tcl Developer Xchange. Retrieved 2016-11-02. ^ "Tcl/Tk 8.2 Release Announcement". Tcl Developer Xchange. 1999-08-18. Retrieved 2014-07-01. ^ "Tcl/Tk 8.4 Release Announcement". Tcl Developer Xchange. 2013-06-01. Retrieved 2014-07-01. ^ "TIP #237: Arbitrary-Precision Integers for Tcl". Tcl Developer Xchange. Retrieved 2016-11-01. ^ "TIP #194: TIP #194: Procedures as Values via apply". Tcl Developer Xchange. Retrieved 2016-11-01. ^ "Tcl/Tk 8.5 Release Announcement". Tcl Developer Xchange. 2013-09-18. Retrieved 2014-07-01. ^ a b "Tcl/Tk 8.6 Release Announcement". Tcl Developer Xchange. 2013-09-20. Retrieved 2014-07-01. ^ "Tcl/Tk Conferences". Tcl Developer Xchange. Retrieved 2016-11-01. ^ a b c "TIP #257: Object Orientation for Tcl". Tcl Developer Xchange. Retrieved 2016-11-01. ^ "Download Tcl/Tk Sources". Tcl Developer Xchange. Retrieved 2016-11-01. ^ "Safe Tcl". Tcl Developer Xchange. Retrieved 2016-11-01. ^ Brown, Lawrie (September 18–20, 1996). "Mobile Code Security". In Bossomaier, Terry; Chubb, Lucy (eds.). Proceedings, 2nd Joint Conference, AUUG '96 and Asia-Pacific WWW '96. Melbourne, Australia. p. 50. Retrieved 2011-03-22. ^ Welch, Brent B.; Jones, Ken; Hobbs, Jeffrey (2003). Practical programming in Tcl and Tk. 1 (4th ed.). Prentice Hall PTR. p. 291. ISBN 0-13-038560-3. ^ "Tcl manual page - Tcl Built-In Commands". Tcl Developer Xchange. Retrieved 2014-06-14. ^ "Dodekalogue". Tcler's Wiki. Retrieved 2014-06-14. (Also contains a shorter "Octalogue" version of the rules.) ^ "uplevel manual page - Built-In Commands". Tcl Developer Xchange. Retrieved 2016-06-14. ^ "upvar manual page - Built-In Commands". Tcl Developer Xchange. Retrieved 2016-06-14. ^ "Tcl C API". tcl.tk. Retrieved 2016-11-02. ^ "Tile: an improved themeing engine for Tk". SourceForge. Retrieved August 7, 2016. ^ "Tix License". SourceForge. Retrieved August 7, 2012. ^ "TclUDP". Tcl'ers Wiki. Retrieved August 7, 2012. ^ "TDBC". Tcl'ers Wiki. Retrieved August 7, 2012. Further reading[edit] Ousterhout, John K.; Jones, Ken (2009). Tcl and the Tk Toolkit (2nd ed.). Addison Wesley. ISBN 978-0-321-33633-0. Retrieved 4 November 2012. Foster-Johnson, Eric (1997). Graphical Applications with Tcl & Tk (2nd ed.). New York, N.Y.: M&T Books. ISBN 1-55851-569-0. Retrieved 4 November 2012. Brent B. Welch, Practical Programming in Tcl and Tk, Prentice Hall, Upper Saddle River, NJ, USA, ISBN 0-13-038560-3, 2003 J Adrian Zimmer, Tcl/Tk for Programmers, IEEE Computer Society, distributed by John Wiley and Sons, ISBN 0-8186-8515-8, 1998 Mark Harrison and Michael McLennan, Effective Tcl/Tk Programming, Addison-Wesley, Reading, MA, USA, ISBN 0-201-63474-0, 1998 Bert Wheeler, Tcl/Tk 8.5 Programming Cookbook, Packt Publishing, Birmingham, England, UK, ISBN 1849512981, 2011 Wojciech Kocjan, Piotr Beltowski Tcl 8.5 Network Programming, Packt Publishing, ISBN 1849510962, 2010 Clif Flynt Tcl/Tk, Third Edition: A Developer’s Guide, ISBN 0123847176, 2012 Ashok P. Nadkarni The Tcl Programming Language, ISBN 154867964X, 2017 External links[edit] Wikibooks has a book on the topic of: Tcl Programming Wikimedia Commons has media related to Tcl programming language family. Official website Tcl Sources, main Tcl and Tk source code download website Tcler's Wiki TkDocs v t e Programming languages Comparison Timeline History ALGOL APL Assembly BASIC C C++ C# COBOL Go Erlang Forth Fortran Haskell Java JavaScript Kotlin Lisp ML Objective-C Pascal Perl PHP Prolog Python R Ruby Rust SQL Shell Simula Smalltalk Swift more... Category Lists: Alphabetical Categorical Generational Non-English-based v t e Free and open-source software General Alternative terms for free software Comparison of open-source and closed-source software Comparison of source-code-hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Timeline Software packages Audio Bioinformatics Codecs Configuration management Graphics Wireless Geophysics Health Mathematics Operating systems Programming languages Routing Television Video games Web applications E-commerce Android apps iOS apps Commercial Trademarked Formerly proprietary Formerly open-source Community Free software movement History Open-source-software movement Organizations Events Licenses AFL Apache APSL Artistic Beerware BSD Creative Commons CDDL EPL Free Software Foundation GNU GPL GNU LGPL ISC MIT MPL Python Python Software Foundation License Shared Source Initiative Sleepycat Unlicense WTFPL zlib Types and standards Comparison of licenses Contributor License Agreement Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software license Public domain Viral license Challenges Digital rights management Hardware restrictions License proliferation Mozilla software rebranding Proprietary device drivers Proprietary firmware Proprietary software SCO/Linux controversies Software patents Software security Trusted Computing Related topics Forking GNU Manifesto Microsoft Open Specification Promise Open-core model Open-source hardware Shared Source Initiative Source-available software The Cathedral and the Bazaar Revolution OS Portal Category Book Authority control GND: 4361529-6 LCCN: sh94000154 Retrieved from "https://en.wikipedia.org/w/index.php?title=Tcl&oldid=986926595" Categories: American inventions Cross-platform free software Cross-platform software Dynamically typed programming languages Free compilers and interpreters Free software programmed in C High-level programming languages Multi-paradigm programming languages Object-oriented programming languages Procedural programming languages Programming languages created in 1988 Scripting languages Tcl programming language family Text-oriented programming languages Homoiconic programming languages Hidden categories: Articles with short description Short description is different from Wikidata Commons category link is on Wikidata Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikibooks Languages العربية Azərbaycanca Български Català Čeština Deutsch Eesti Ελληνικά Español Esperanto فارسی Français Galego 한국어 Հայերեն Interlingua Íslenska Italiano עברית Kreyòl ayisyen Latina Bahasa Melayu Nederlands 日本語 Norsk bokmål Polski Português Română Русский Simple English Српски / srpski Suomi Svenska Тоҷикӣ Türkçe ᨅᨔ ᨕᨘᨁᨗ Українська Tiếng Việt 粵語 中文 Edit links This page was last edited on 3 November 2020, at 20:13 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement