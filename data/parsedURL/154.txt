Cocoa (API) - Wikipedia Cocoa (API) From Wikipedia, the free encyclopedia (Redirected from Cocoa (software)) Jump to navigation Jump to search Cocoa Developer(s) Apple Inc. Written in C, C++, Objective-C, Swift Operating system macOS Type Software framework License Proprietary with some open source components[citation needed] Website Apple Developer Cocoa is Apple's native object-oriented application programming interface (API) for its desktop operating system macOS. Cocoa consists of the Foundation Kit, Application Kit, and Core Data frameworks, as included by the Cocoa.h header file, and the libraries and frameworks included by those, such as the C standard library and the Objective-C runtime.[1] Cocoa applications are typically developed using the development tools provided by Apple, specifically Xcode (formerly Project Builder) and Interface Builder (now part of Xcode), using the programming languages Objective-C or Swift. However, the Cocoa programming environment can be accessed using other tools, such as Clozure CL, LispWorks, Object Pascal, Python, Perl, Ruby, and AppleScript with the aid of bridge mechanisms such as PasCocoa, PyObjC, CamelBones, RubyCocoa, and a D/Objective-C Bridge. A Ruby language implementation named MacRuby, which removes the need for a bridge mechanism, was formerly developed by Apple, while Nu is a Lisp-like language that can be used with Cocoa with no bridge. It is also possible to write Objective-C Cocoa programs in a simple text editor and build it manually with GNU Compiler Collection (GCC) or Clang from the command line or from a makefile. For end-users, Cocoa applications are those written using the Cocoa programming environment. Such applications usually have a familiar look and feel, since the Cocoa programming environment automates many aspects of an application to comply with Apple's human interface guidelines. For iOS, iPadOS, tvOS, and watchOS, a similar API exists, named Cocoa Touch, which includes gesture recognition, animation, and a different set of graphical control elements. It is used in applications for Apple devices such as the iPhone, the iPod Touch, the iPad, the Apple TV, and the Apple Watch. Contents 1 History 2 Memory management 3 Main frameworks 4 Model-view-controller 5 Late binding 6 Rich objects 7 Implementations and bindings 7.1 AppleScriptObjC 7.2 Other bindings 7.3 Other implementations 8 See also 9 References 10 Bibliography 11 External links History[edit] Further information: History of macOS Cocoa continues the lineage of several software frameworks (mainly the App Kit and Foundation Kit) from the NeXTSTEP and OpenStep programming environments developed by NeXT in the 1980s and 1990s. Apple acquired NeXT in December 1996, and subsequently went to work on the Rhapsody operating system that was to be the direct successor of OpenStep. It was to have had an emulation base for classic Mac OS applications, named Blue Box. The OpenStep base of libraries and binary support was termed Yellow Box. Rhapsody evolved into Mac OS X, and the Yellow Box became Cocoa. Thus, Cocoa classes begin with the letters NS, such as NSString or NSArray. These stand for the original proprietary term for the OpenStep framework, NeXTSTEP.[2] Much of the work that went into developing OpenStep was applied to developing Mac OS X, Cocoa being the most visible part. However, differences exist. For example, NeXTSTEP and OpenStep used Display PostScript for on-screen display of text and graphics, while Cocoa depends on Apple's Quartz (which uses the Portable Document Format (PDF) imaging model, but not its underlying technology). Cocoa also has a level of Internet support, including the NSURL and WebKit HTML classes, and others, while OpenStep had only rudimentary support for managed network connections via NSFileHandle classes and Berkeley sockets. The resulting software framework received the name Cocoa for the sake of expediency, because the name had already been trademarked by Apple. For many years before this present use of the name, Apple's Cocoa trademark had originated as the name of a multimedia project design application for children. The application was originally developed at the Apple Advanced Technology Group under the name KidSim, and was then renamed and trademarked as "Cocoa". The name, coined by Peter Jensen who was hired to develop Cocoa for Apple, was intended to evoke "Java for kids", as it ran embedded in web pages.[3] The trademark, and thus the name "Cocoa", was re-used to avoid the delay which would have occurred while registering a new trademark for this software framework. The original "Cocoa" program was discontinued at Apple in one of the rationalizations that followed Steve Jobs's return to Apple. It was then licensed to a third party and marketed as Stagecast Creator as of 2011[update]. Memory management[edit] One feature of the Cocoa environment is its facility for managing dynamically allocated memory. Foundation Kit's NSObject class, from which most classes, both vendor and user, are derived, implements a reference counting scheme for memory management. Objects that derive from the NSObject root class respond to a retain and a release message, and keep a retain count. A method titled retainCount exists, but contrary to its name, will usually not return the exact retain count of an object. It is mainly used for system-level purposes. Invoking it manually is not recommended by Apple. A newly allocated object created with alloc or copy has a retain count of one. Sending that object a retain message increments the retain count, while sending it a release message decrements the retain count. When an object's retain count reaches zero, it is deallocated by a procedure similar to a C++ destructor. dealloc is not guaranteed to be invoked. Starting with Objective-C 2.0, the Objective-C runtime implemented an optional garbage collector, which is now obsolete and deprecated in favor of Automatic Reference Counting (ARC). In this model, the runtime turned Cocoa reference counting operations such as "retain" and "release" into no-ops. The garbage collector does not exist on the iOS implementation of Objective-C 2.0. Garbage collection in Objective-C ran on a low-priority background thread, and can halt on Cocoa's user events, with the intention of keeping the user experience responsive. The legacy garbage collector is still available on Mac OS X version 10.13, but no Apple-provided applications use it. In 2011, the LLVM compiler introduced Automatic Reference Counting (ARC), which replaces the conventional garbage collector by performing static analysis of Objective-C source code and inserting retain and release messages as necessary. Main frameworks[edit] Cocoa consists of three Objective-C object libraries called frameworks. Frameworks are functionally similar to shared libraries, a compiled object that can be dynamically loaded into a program's address space at runtime, but frameworks add associated resources, header files, and documentation. The Cocoa frameworks are implemented as a type of bundle, containing the aforementioned items in standard locations. Foundation Kit (Foundation), first appeared in Enterprise Objects Framework on NeXTSTEP 3.[4] It was developed as part of the OpenStep work, and subsequently became the basis for OpenStep's AppKit when that system was released in 1994. On macOS, Foundation is based on Core Foundation. Foundation is a generic object-oriented library providing string and value manipulation, containers and iteration, distributed computing, event loops (run loops), and other functions that are not directly tied to the graphical user interface. The "NS" prefix, used for all classes and constants in the framework, comes from Cocoa's OPENSTEP heritage, which was jointly developed by NeXT and Sun Microsystems. Application Kit (AppKit) is directly descended from the original NeXTSTEP Application Kit. It contains code programs can use to create and interact with graphical user interfaces. AppKit is built on top of Foundation, and uses the same NS prefix. Core Data is the object persistence framework included with Foundation and Cocoa and found in Cocoa.h.[1] A key part of the Cocoa architecture is its comprehensive views model. This is organized along conventional lines for an application framework, but is based on the Portable Document Format (PDF) drawing model provided by Quartz. This allows creating custom drawing content using PostScript-like drawing commands, which also allows automatic printer support and so forth. Since the Cocoa framework manages all the clipping, scrolling, scaling and other chores of drawing graphics, the programmer is freed from implementing basic infrastructure and can concentrate on the unique aspects of an application's content. Model-view-controller[edit] Main article: Model-view-controller The Smalltalk teams at Xerox PARC eventually settled on a design philosophy that led to easy development and high code reuse. Named model-view-controller (MVC), the concept breaks an application into three sets of interacting object classes: Model classes represent problem domain data and operations (such as lists of people/departments/budgets; documents containing sections/paragraphs/footnotes of stylized text). View classes implement visual representations and affordances for human-computer interaction (such as scrollable grids of captioned icons and pop-up menus of possible operations). Controller classes contain logic that surfaces model data as view representations, maps affordance-initiated user actions to model operations, and maintains state to keep the two synchronized. Cocoa's design is a fairly, but not absolutely strict application of MVC principles. Under OpenStep, most of the classes provided were either high-level View classes (in AppKit) or one of a number of relatively low-level model classes like NSString. Compared to similar MVC systems, OpenStep lacked a strong model layer. No stock class represented a "document," for instance. During the transition to Cocoa, the model layer was expanded greatly, introducing a number of pre-rolled classes to provide functionality common to desktop applications. In Mac OS X 10.3, Apple introduced the NSController family of classes, which provide predefined behavior for the controller layer. These classes are considered part of the Cocoa Bindings system, which also makes extensive use of protocols such as Key-Value Observing and Key-Value Binding. The term 'binding' refers to a relationship between two objects, often between a view and a controller. Bindings allow the developer to focus more on declarative relationships rather than orchestrating fine-grained behavior. With the arrival of Mac OS X 10.4, Apple extended this foundation further by introducing the Core Data framework, which standardizes change tracking and persistence in the model layer. In effect, the framework greatly simplifies the process of making changes to application data, undoing changes when necessary, saving data to disk, and reading it back in. In providing framework support for all three MVC domains, Apple's goal is to reduce the amount of boilerplate or "glue" code that developers have to write, freeing up resources to spend time on application-specific features. Late binding[edit] In most object-oriented languages, calls to methods are represented physically by a pointer to the code in memory. This restricts the design of an application since specific command handling classes are needed, usually organized according to the chain-of-responsibility pattern. While Cocoa retains this approach for the most part, Objective-C's late binding opens up more flexibility. Under Objective-C, methods are represented by a selector, a string describing the method to call. When a message is sent, the selector is sent into the Objective-C runtime, matched against a list of available methods, and the method's implementation is called. Since the selector is text data, this lets it be saved to a file, transmitted over a network or between processes, or manipulated in other ways. The implementation of the method is looked up at runtime, not compile time. There is a small performance penalty for this,[5] but late binding allows the same selector to reference different implementations. By a similar token, Cocoa provides a pervasive data manipulation method called key-value coding (KVC).[6] This allows a piece of data or property of an object to be looked up or changed at runtime by name. The property name acts as a key to the value. In traditional languages, this late binding is impossible. KVC leads to great design flexibility. An object's type need not be known, yet any property of that object can be discovered using KVC. Also, by extending this system using something Cocoa terms key-value observing (KVO), automatic support for undo-redo is provided. Late static binding is a variant of binding somewhere between static and dynamic binding. The binding of names before the program is run is called static (early); bindings performed as the program runs are dynamic (late or virtual). Rich objects[edit] One of the most useful features of Cocoa is the powerful base objects the system supplies. As an example, consider the Foundation classes NSString and NSAttributedString, which provide Unicode strings, and the NSText system in AppKit, which allows the programmer to place string objects in the GUI. NSText and its related classes are used to display and edit strings. The collection of objects involved permit an application to implement anything from a simple single-line text entry field to a complete multi-page, multi-column text layout schema, with full professional typography features such as kerning, ligatures, running text around arbitrary shapes, rotation, full Unicode support and anti-aliased glyph rendering. Paragraph layout can be controlled automatically or by the user, using a built-in "ruler" object that can be attached to any text view. Spell checking is automatic, using a system-wide set of language dictionaries. Unlimited undo/redo support is built in. Using only the built-in features, one can write a text editor application in as few as 10 lines of code. With new controller objects, this may fall towards zero.When extensions are needed, Cocoa's use of Objective-C makes this a straightforward task. Objective-C includes the concept of "categories," which allows modifying existing class "in-place". Functionality can be accomplished in a category without any changes to the original classes in the framework, or even access to its source. In other common languages, this same task requires deriving a new subclass supporting the added features, and then replacing all instances of the original class with instances of the new subclass. Implementations and bindings[edit] The Cocoa frameworks are written in Objective-C, and hence that is the preferred language for developing Cocoa applications.[citation needed] Java bindings for the Cocoa frameworks (termed the Java bridge) were also made available with the aim of replacing Objective-C with a more popular language[7] but these bindings were unpopular among Cocoa developers and Cocoa's message passing semantics did not translate well to a statically-typed language such as Java.[8] Cocoa's need for runtime binding means many of Cocoa's key features are not available with Java. In 2005, Apple announced that the Java bridge was to be deprecated, meaning that features added to Cocoa in macOS versions later than 10.4 would not be added to the Cocoa-Java programming interface. At Apple Worldwide Developers Conference (WWDC) 2014, Apple introduced a new programming language named Swift, which is intended to replace Objective-C.[9] AppleScriptObjC[edit] Originally, AppleScript Studio could be used to develop simpler Cocoa applications.[10] However, as of Snow Leopard, it has been deprecated. It was replaced with AppleScriptObjC, which allows programming in AppleScript, while using Cocoa frameworks.[11] Other bindings[edit] Third-party bindings available for other languages include Clozure CL, Monobjc and NObjective (C#), Cocoa# (CLI), Cocodao and D/Objective-C Bridge,[12][13] LispWorks, CamelBones (Perl), PyObjC (Python), FPC PasCocoa (Lazarus and Free Pascal), RubyCocoa (Ruby).[14] Nu uses the Objective-C object model directly, and thus can use the Cocoa frameworks without needing a binding. Other implementations[edit] There are also open source implementations of major parts of the Cocoa framework, such as GNUstep and Cocotron,[15] which allow cross-platform Cocoa application development to target other operating systems, such as Microsoft Windows and Linux. See also[edit] Carbon (API) GNUStep Objective-C Xcode iOS SDK Interface Builder Aqua (user interface) Rosetta (software) XNU Quartz (graphics layer) X11 QuickDraw Swift (programming language) References[edit] ^ a b Mac Technology Overview: OS X Frameworks. Developer.apple.com. Retrieved on September 18, 2013. ^ Amit Singh (June 19, 2006). Mac OS X Internals: A Systems Approach. ISBN 0-321-27854-2. Cocoa is an important inheritance from NeXT, as indicated by .. the "NS" prefix ^ Mardesich, Jodi (April 14, 1997). "A Sour Note in Apple's Rhapsody Once-Loyal Software Writers Wary of New OS as Crucial Conference Looms" (Morning Final). San Jose Mercury News. Retrieved August 13, 2015. ^ HybridWorld. Cilinder.be. Retrieved on September 18, 2013. ^ Wikibooks - Some Objective-C advantages ^ Key-Value Coding Programming Guide: Introduction ^ Steve Klingsporn (2003). "Writing Cocoa Apps in Java". MacTech. 19 (12). ^ "Using the Java Bridge" (PDF). Apple Inc. Because Java is a strongly typed language, it requires more information about the classes and interfaces it manipulates at compile time. Therefore, before using Objective-C classes as Java ones, a description of them has to be written and compiled. ^ "Apple's top secret Swift language grew from work to sustain Objective-C, which it now aims to replace". ^ "AppleScript Studio Programming Guide (Not Recommended): About AppleScript Studio". Apple, Inc. Retrieved November 20, 2013. ^ "AppleScriptObjC Release Notes". Apple, Inc. Retrieved November 20, 2013. ^ Cocodao, bridge to create Cocoa applications in D language. ^ D/Objective-C Bridge, a language binding mechanism for Cocoa. ^ more extensive list of implementations ^ Cocotron, free software implementation of Cocoa. Bibliography[edit] Aaron Hillegass: Cocoa Programming for Mac OS X, Addison-Wesley, 3rd Edition 2008, Paperback, ISBN 0-321-50361-9. Stephen Kochan: Programming in Objective-C, Sams, 1st Edition 2003, Paperback, ISBN 0-672-32586-1. Michael Beam, James Duncan Davidson: Cocoa in a Nutshell, O'Reilly, 1st Edition 2003, Paperback, ISBN 0-596-00462-1. Erick Tejkowski: Cocoa Programming for Dummies, 1st Edition 2003, Paperback, ISBN 0-7645-2613-8. Simson Garfinkel, Michael K. Mahoney: Building Cocoa Applications: A Step by Step Guide, O'Reilly, 1st Edition 2002, Paperback, ISBN 0-596-00235-1.[1] Paris Buttfield-Addison, Jon Manning: Learning Cocoa with Objective-C, O'Reilly, 3rd Edition 2012, Paperback, ISBN 978-1-4493-1849-9. Scott Anguish, Erik M. Buck, Donald A. Yacktman: Cocoa Programming, Sams, 1st Edition 2002, Paperback, ISBN 0-672-32230-7. Erik M. Buck, Donald A. Yacktman: Cocoa Design Patterns, Addison-Wesley Professional, 1st Edition 2009, Paperback, ISBN 978-0321535023 Bill Cheeseman: Cocoa Recipes for Mac OS X, Peachpit Press, 1st Edition 2002, Paperback, ISBN 0-201-87801-1. Andrew Duncan: Objective-C Pocket Reference, O'Reilly, 1st Edition 2002, Paperback, ISBN 0-596-00423-0. External links[edit] Official website[dead link] Mac Developer Library, Cocoa Layer, Apple's documentation iDevApps, Mac programming forum Cocoa Dev Central Cocoa Dev Stack Overflow: Cocoa v t e macOS History Architecture Components Server Software Versions Server 1.0 Hera Public Beta Kodiak 10.0 Cheetah 10.1 Puma 10.2 Jaguar 10.3 Panther 10.4 Tiger 10.5 Leopard 10.6 Snow Leopard 10.7 Lion 10.8 Mountain Lion 10.9 Mavericks 10.10 Yosemite 10.11 El Capitan 10.12 Sierra 10.13 High Sierra 10.14 Mojave 10.15 Catalina 11 Big Sur Applications App Store Automator Calculator Calendar Chess Contacts Control Center Dictionary DVD Player FaceTime Finder Game Center Grapher Home Launchpad Mail Messages News Music Notes Notification Center Podcasts Photo Booth Photos Preview Quicktime Player Reminders Safari (version history) Siri Stickies TextEdit Time Machine Discontinued Dashboard Front Row iChat iPhoto iSync iTunes (history) Sherlock Utilities Activity Monitor AirPort Utility AppleScript Editor Archive Utility Audio MIDI Setup Bluetooth File Exchange Boot Camp ColorSync Configurator Console Crash Reporter DigitalColor Meter Directory Utility DiskImageMounter Disk Utility Font Book Grab Help Viewer Image Capture Installer Keychain Access Migration Assistant Network Utility ODBC Administrator Screen Sharing System Preferences System Information Terminal Universal Access VoiceOver Discontinued Software Update Remote Install Mac OS X Technology and user interface AirDrop Apple File System Apple menu Apple Push Notification service AppleScript Aqua Audio Units AVFoundation Bonjour Bundle CloudKit Cocoa ColorSync Command key Core Animation Core Audio Core Data Core Foundation Core Image Core OpenGL Core Text Core Video CUPS Cover Flow Darwin Dock FileVault Fonts Gatekeeper Grand Central Dispatch icns iCloud Kernel panic Keychain launchd Mach-O Menu extra Metal Mission Control Night Shift OpenCL Option key Preference Pane Property list Quartz Quick Look Rosetta Smart Folders Speakable items Spotlight Stacks System Integrity Protection Uniform Type Identifier Universal binary WebKit XNU XQuartz Deprecated HFS+ Discontinued BootX Brushed metal Carbon Classic Environment Inkwell QuickTime Spaces Xgrid v t e List of widget toolkits Low-level On AmigaOS Intuition On Classic Mac OS, macOS Unknown, native Macintosh Toolbox C Carbon On Windows Windows API On Unix, under X11 Xlib XCB X Toolkit Intrinsics, Xt, X-Toolkit On BeOS, Haiku BeOS, ZETA, Haiku On cross-platform CLI OpenTK C GDK SDL Java JOGL On Android CLI Xamarin.Android High-level On AmigaOS BOOPSI MUI ReAction GUI Zune On Classic Mac OS, macOS Object Pascal MacApp (v1, v2) Objective-C, Swift Desktop Cocoa Mobile Cocoa Touch C++ MacApp (v3) PowerPlant THINK Class Library CLI Desktop Xamarin.Mac Mobile Xamarin.iOS On Windows CLI Desktop Windows Forms XAML (Silverlight, WinRT XAML, WPF) XNA Framework Web XAML (Silverlight) Mobile XNA Framework C++ MFC ATL WTL OWL Object Pascal VCL On Unix, under X11 Athena (Xaw) LessTif Motif OLIT XForms On Android C++ Qt for Android Cross-platform, by language C GTK IUP Tk wxC XForms XVT C++ CEGUI CLX FLTK FOX toolkit GLUI Gtkmm JUCE Nana Qt Rogue Wave Views TnFOX Ultimate++ VCF Wt wxWidgets YAAF SFML Objective-C GNUstep CLI Desktop Gtk# Tao (OpenTK, TaoClassic) wx.NET UIML.NET MonoGame Web Moonlight Mobile MonoGame Xamarin.Forms D DFL DlangUI DWT GtkD QtD wxD Flash Apache Flex (MXML) Go Fyne Haskell Gtk2Hs wxHaskell Java Desktop AWT FXML (JavaFX) Qt Jambi Swing SWT wx4j jUIML Web GWT FXML (JavaFX) Mobile LWUIT JavaScript Dojo Toolkit Echo Ext JS Google Closure jQuery UI Qooxdoo YUI Common Lisp CAPI CLIM Common Graphics Ltk McCLIM Lua IUP wxLua Pascal Desktop LCL Mobile LCL Object Pascal Desktop CLX fpGUI IP Pascal LCL Mobile LCL Perl Perl/Tk wxPerl PHP PHP-GTK PHP-Qt wxPHP Python PyGObject PyGTK Pyjs PyQt PySide Tkinter wxPython Ruby Shoes FXRuby Ruby-GNOME2 qtbindings QtRuby wxRuby Tcl Tcl/Tk XML GladeXML Lively Kernel Pyjs Rialto Toolkit XAML XUL Wt shell whiptail dialog ^ Garfinkel, Simson; Mahoney, Michael K. (2002). Building Cocoa Applications: A Step by Step Guide. O'Reilly. Retrieved from "https://en.wikipedia.org/w/index.php?title=Cocoa_(API)&oldid=987177690" Categories: MacOS APIs Hidden categories: Use mdy dates from October 2013 All articles with unsourced statements Articles with unsourced statements from June 2016 Articles containing potentially dated statements from 2011 All articles containing potentially dated statements Articles with unsourced statements from April 2015 Official website different in Wikidata and Wikipedia All articles with dead external links Articles with dead external links from January 2020 Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages العربية Čeština Dansk Deutsch Español فارسی Français 한국어 Italiano Nederlands 日本語 Norsk bokmål Polski Português Русский Suomi Svenska Türkçe Українська Tiếng Việt 中文 Edit links This page was last edited on 5 November 2020, at 11:49 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement