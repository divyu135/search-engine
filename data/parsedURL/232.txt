ECMAScript - Wikipedia ECMAScript From Wikipedia, the free encyclopedia Jump to navigation Jump to search Official specification on which JavaScript and other languages are based This article needs to be updated. Please update this article to reflect recent events or newly available information. (June 2020) ECMAScript Paradigm Multi-paradigm: prototype-based, functional, imperative Designed by Brendan Eich, Ecma International First appeared 1997; 23 years ago (1997) Typing discipline weak, dynamic Website www.ecma-international.org Major implementations JavaScript, SpiderMonkey, V8, ActionScript, JScript, QtScript, InScript, Google Apps Script Influenced by Self, HyperTalk, AWK, C, CoffeeScript, Perl, Python, Java, Scheme ECMAScript Filename extensions .es Internet media type application/ecmascript Developed by Sun Microsystems, Ecma International Initial release June 1997; 23 years ago (1997-06) Latest release Edition 11 (June 2020; 6 months ago (2020-06)) Type of format Scripting language Website ECMA-262, ECMA-290, ECMA-327, ECMA-357, ECMA-402 Part of a series on JavaScript Language History Features Syntax ECMAScript Transpilers Libraries JavaScript libraries Frameworks Ajax frameworks Unit testing frameworks Implementations JavaScript engine Server side See also HTML JSON YAML XMLHttpRequest ASM.JS WASM WebGL WebGPU v t e ECMAScript (or ES)[1]is a general-purpose programming language, standardized by Ecma International according to the document ECMA-262. It is a JavaScript standard meant to ensure the interoperability of Web pages across different Web browsers.[2] ECMAScript is commonly used for client-side scripting on the World Wide Web, and it is increasingly being used for writing server applications and services using Node.js. Contents 1 ECMAScript, ECMA-262 and JavaScript 2 History 2.1 Versions 2.2 4th Edition (abandoned) 2.3 5th Edition 2.4 6th Edition – ECMAScript 2015 2.5 7th Edition – ECMAScript 2016 2.6 8th Edition – ECMAScript 2017 2.7 9th Edition – ECMAScript 2018 2.8 10th Edition – ECMAScript 2019 2.9 11th Edition – ECMAScript 2020 2.10 ES.Next 3 Features 3.1 Imperative and structured 3.2 Weakly typed 3.3 Dynamic 3.4 Transpiling 4 Conformance 5 See also 6 References 7 External links 7.1 ISO standards 7.2 ECMA standards ECMAScript, ECMA-262 and JavaScript[edit] ECMAScript is a programming language itself, specified in the document ECMA-262. In other words, ECMA-262 is the specification of the programming language ECMAScript. JavaScript, on the other hand, can be viewed as a "dialect" of ECMAScript. It conforms to the ECMAScript specification while also providing additional features not described in the specification. History[edit] The ECMAScript specification is a standardized specification of a scripting language developed by Brendan Eich of Netscape; initially named Mocha, then LiveScript, and finally JavaScript.[3] In December 1995, Sun Microsystems and Netscape announced JavaScript in a press release.[4] In November 1996, Netscape announced a meeting of the Ecma International standards organization to advance the standardization of JavaScript.[5] The first edition of ECMA-262 was adopted by the Ecma General Assembly in June 1997. Several editions of the language standard have been published since then. The name "ECMAScript" was a compromise between the organizations involved in standardizing the language, especially Netscape and Microsoft, whose disputes dominated the early standards sessions. Eich commented that "ECMAScript was always an unwanted trade name that sounds like a skin disease."[6] ECMAScript has been formalized through operational semantics by work at Stanford University and the Department of Computing, Imperial College London for security analysis and standardization.[7] Both JavaScript and JScript conform to the ECMAScript specification while also providing additional features not described in the specification.[8][9] Versions[edit] There are eleven editions of ECMA-262 published. Work on version 11 of the standard was finalized in June 2020.[10] ECMAScript version history Edition Date published Name Changes from prior edition Editor 1 June 1997 First edition Guy L. Steele Jr. 2 June 1998 Editorial changes to keep the specification fully aligned with ISO/IEC 16262 international standard Mike Cowlishaw 3 December 1999 Added regular expressions, better string handling, new control statements, try/catch exception handling, tighter definition of errors, formatting for numeric output, and other enhancements Mike Cowlishaw 4 Abandoned (last draft 30 June 2003) Fourth Edition was abandoned, due to political differences concerning language complexity. Many features proposed for the Fourth Edition have been completely dropped; some were incorporated into the sixth edition. 5 December 2009 Adds "strict mode," a subset intended to provide more thorough error checking and avoid error-prone constructs. Clarifies many ambiguities in the 3rd edition specification, and accommodates behaviour of real-world implementations that differed consistently from that specification. Adds some new features, such as getters and setters, library support for JSON, and more complete reflection on object properties.[11] Pratap Lakshman, Allen Wirfs-Brock 5.1 June 2011 This edition 5.1 of the ECMAScript standard is fully aligned with the third edition of the international standard ISO/IEC 16262:2011. Pratap Lakshman, Allen Wirfs-Brock 6 June 2015[12] ECMAScript 2015 (ES2015) See 6th Edition – ECMAScript 2015 Allen Wirfs-Brock 7 June 2016[13] ECMAScript 2016 (ES2016) See 7th Edition – ECMAScript 2016 Brian Terlson 8 June 2017[14] ECMAScript 2017 (ES2017) See 8th Edition – ECMAScript 2017 Brian Terlson 9 June 2018[15] ECMAScript 2018 (ES2018) See 9th Edition – ECMAScript 2018 Brian Terlson 10 June 2019[16] ECMAScript 2019 (ES2019) See 10th Edition – ECMAScript 2019 Brian Terlson, Bradley Farias, Jordan Harband 11 June 2020[10] ECMAScript 2020 (ES2020) See 11th Edition – ECMAScript 2020 Jordan Harband, Kevin Smith In June 2004, Ecma International published ECMA-357 standard, defining an extension to ECMAScript, known as ECMAScript for XML (E4X). Ecma also defined a "Compact Profile" for ECMAScript – known as ES-CP, or ECMA 327 – that was designed for resource-constrained devices, which was withdrawn in 2015.[17] 4th Edition (abandoned)[edit] The proposed fourth edition of ECMA-262 (ECMAScript 4 or ES4) would have been the first major update to ECMAScript since the third edition was published in 1999. The specification (along with a reference implementation) was originally targeted for completion by October 2008.[18] The first draft was dated February 1999.[19] An overview of the language was released by the working group on October 23, 2007.[20] By August 2008, the ECMAScript 4th edition proposal had been scaled back into a project codenamed ECMAScript Harmony. Features under discussion for Harmony at the time included: classes, a module system, optional type annotations and static typing, probably using a structural type system, generators and iterators, destructuring assignment, and algebraic data types. The intent of these features was partly to better support programming in the large, and to allow sacrificing some of the script's ability to be dynamic to improve performance. For example, Tamarin – the virtual machine for ActionScript, developed and open-sourced by Adobe – has just-in-time compilation (JIT) support for certain classes of scripts. In addition to introducing new features, some ES3 bugs were proposed to be fixed in edition 4.[21][22] These fixes and others, and support for JSON encoding/decoding, have been folded into the ECMAScript, 5th Edition specification.[23] Work started on Edition 4 after the ES-CP (Compact Profile) specification was completed, and continued for approximately 18 months where slow progress was made balancing the theory of Netscape's JavaScript 2 specification with the implementation experience of Microsoft's JScript .NET. After some time, the focus shifted to the ECMAScript for XML (E4X) standard. The update has not been without controversy. In late 2007, a debate between Eich, later the Mozilla Foundation's CTO, and Chris Wilson, Microsoft's platform architect for Internet Explorer, became public on a number of blogs. Wilson cautioned that because the proposed changes to ECMAScript made it backwards incompatible in some respects to earlier versions of the language, the update amounted to "breaking the Web,"[24] and that stakeholders who opposed the changes were being "hidden from view".[25] Eich responded by stating that Wilson seemed to be "repeating falsehoods in blogs" and denied that there was attempt to suppress dissent and challenged critics to give specific examples of incompatibility.[26] He pointed out that Microsoft Silverlight and Adobe AIR rely on C# and ActionScript 3 respectively, both of which are larger and more complex than ECMAScript Edition 3.[27] 5th Edition[edit] Yahoo, Microsoft, Google, and other 4th edition dissenters formed their own subcommittee to design a less ambitious update of ECMAScript 3, tentatively named ECMAScript 3.1. This edition would focus on security and library updates, with a large emphasis on compatibility. After the aforementioned public sparring, the ECMAScript 3.1 and ECMAScript 4 teams agreed on a compromise: the two editions would be worked on, in parallel, with coordination between the teams to ensure that ECMAScript 3.1 remains a strict subset of ECMAScript 4 in both semantics and syntax. However, the differing philosophies in each team resulted in repeated breakages of the subset rule, and it remained doubtful that the ECMAScript 4 dissenters would ever support or implement ECMAScript 4 in the future. After over a year since the disagreement over the future of ECMAScript within the Ecma Technical Committee 39, the two teams reached a new compromise in July 2008: Brendan Eich announced that Ecma TC39 would focus work on the ECMAScript 3.1 (later renamed to ECMAScript, 5th Edition) project with full collaboration of all parties, and vendors would target at least two interoperable implementations by early 2009.[28][29] In April 2009, Ecma TC39 published the "final" draft of the 5th edition and announced that testing of interoperable implementations was expected to be completed by mid-July.[30] On December 3, 2009, ECMA-262 5th edition was published.[31] 6th Edition – ECMAScript 2015[edit] The 6th edition, initially known as ECMAScript 6 (ES6) then and later renamed to ECMAScript 2015, was finalized in June 2015.[12][32] This update adds significant new syntax for writing complex applications, including class declarations (class Foo { ... }), ES6 modules like import * as moduleName from "..."; export const Foo, but defines them semantically in the same terms as ECMAScript 5 strict mode. Other new features include iterators and for...of loops, Python-style generators, arrow function expression (() => {...}), let keyword for local declarations, const keyword for constant local declarations, binary data, typed arrays, new collections (maps, sets and WeakMap), promises, number and math enhancements, reflection, proxies (metaprogramming for virtual objects and wrappers) and template literals for strings.[33][34] The complete list is extensive.[35][36] As the first "ECMAScript Harmony" specification, it is also known as "ES6 Harmony." 7th Edition – ECMAScript 2016[edit] The 7th edition, officially known as ECMAScript 2016, was finalized in June 2016.[13] Its features include block-scoping of variables and functions, destructuring patterns (of variables), proper tail calls, exponentiation operator ** for numbers, await, async keywords for asynchronous programming, and the Array.prototype.includes function.[13][37] The exponentiation operator is equivalent to Math.pow, but provides a simpler syntax similar to languages like Python, F#, Perl, and Ruby.async /await was hailed as an easier way to use promises and develop asynchronous code. 8th Edition – ECMAScript 2017[edit] The 8th edition, officially known as ECMAScript 2017, was finalized in June 2017.[14] Its features include the Object.values, Object.entries and Object.getOwnPropertyDescriptors functions for easy manipulation of Objects, async/await constructions which use generators and promises, and additional features for concurrency and atomics.[38][14] 9th Edition – ECMAScript 2018[edit] The 9th edition, officially known as ECMAScript 2018, was finalized in June 2018.[15] New features include rest/spread operators for object literals (three dots: ...identifier), asynchronous iteration, Promise.prototype.finally and additions to RegExp.[15] The spread operator allows for the easy copying of object properties, as shown below. let object = {a: 1, b: 2}let objectClone = Object.assign({}, object) // before ES9let objectClone = {...object} // ES9 syntaxlet otherObject = {c: 3, ...object}console.log(otherObject) // -> {c: 3, a: 1, b: 2} 10th Edition – ECMAScript 2019[edit] The 10th edition, officially known as ECMAScript 2019, was published in June 2019.[16] Added features include, but are not limited to, Array.prototype.flat, Array.prototype.flatMap, changes to Array.sort and Object.fromEntries.[16] Array.sort is now guaranteed to be stable, meaning that elements with the same sorting precedence will appear in the same order in the sorted array. Array.prototype.flat(depth=1) flattens an array to a specified depth, meaning that all subarray elements (up to the specified depth) are concatenated recursively. 11th Edition – ECMAScript 2020[edit] The 11th edition, officially known as ECMAScript 2020, was published in June 2020.[10] In addition to new functions, this version includes a BigInt primitive type for arbitrary-sized integers, the nullish coalescing operator, and the globalThis object.[10] BigInts are created either with the BigInt constructor or with the syntax 10n, where "n" is placed after the number literal. BigInts allow the representation and manipulation of integers beyond Number.MAX_SAFE_INTEGER, while Numbers are represented by a double-precision 64-bit IEEE 754 value. The built-in functions in Math are not compatible with BigInts; for example, exponentiation of BigInts must be done with the ** operator instead of Math.pow. The nullish coalescing operator, ??, returns its right-hand side operand when its left-hand side is null or undefined. This contrasts with the || operator, which would return "string" for all the examples. false ?? "string" // -> falseNaN ?? "string" // -> NaNundefined ?? "string" // -> "string" Optional chaining allows you to access for the nested nodes in an object without having a AND check at each level. An example is const zipcode = person?.address?.zipcode. If any of the properties are not present, zipcode will be undefined. ES.Next[edit] ES.Next is a dynamic name that refers to whatever the next version is at the time of writing. ES.Next features are finished proposals (aka "stage 4 proposals") as listed at finished proposal that are not part of a ratified specification. The language committee follows a "living spec" model, so these changes are part of the standard, and ratification is a formality.[citation needed] Features[edit] This section needs expansion. You can help by adding to it. (February 2017) Main articles: ECMAScript syntax and JavaScript § Features The ECMAScript language includes structured, dynamic, functional, and prototype-based features.[39] Imperative and structured[edit] ECMAScript JavaScript supports C style structured programming. However, there exist some dissimilarities between both languages implementation of scoping. Until ECMAScript 2015, JavaScript supported only function scoping using the keyword var. ECMAScript 2015 added the keywords let and const allowing JavaScript to support both block scoping as well as function scoping. JavaScript supports automatic semicolon insertion, meaning that semicolons that are normally used to terminate a statement in C may be omitted in JavaScript.[40] Like C-style languages, control flow is done with the while, for, do/while, if/else, and switch statements. Functions are weakly typed and may accept and return any type. Arguments not provided default to undefined. Weakly typed[edit] ECMAScript is weakly typed. This means that certain types are assigned implicitly based on the operation being performed. However, there are several quirks in JavaScript's implementation of the conversion of a variable from one type to another. These quirks have drawn criticism from many developers.[citation needed] Dynamic[edit] ECMAScript is dynamically typed. Thus, a type is associated with a value rather than an expression. ECMAScript supports various ways to test the type of objects, including duck typing.[41] Transpiling[edit] Main article: JavaScript § transpilers Since ES 2015, transpiling JavaScript has become very common. Transpilation is a source-to-source compilation in which the newer versions of JavaScript are used in the user's source code, and the transpiler rewrites them so that they are compliant with the current specification. Usually, transpilers transpile down to ES3 to maintain compatibility with all versions of browsers. The settings to transpiling to a specific version can be configured according to need. Transpiling adds an extra step to the build process and is sometimes done to avoid needing polyfills. Polyfills allow using functionalities from newer ECMA versions in older environments that lack them. Polyfills do this at runtime in the interpreter, such as the user's browser or on the server. Instead, transpiling rewrites the ECMA code itself during the build phase of development before it reaches the interpreter. Conformance[edit] In 2010, Ecma International started developing a standards test for Ecma 262 ECMAScript.[42]Test262 is an ECMAScript conformance test suite that can be used to check how closely a JavaScript implementation follows the ECMAScript 5th Edition Specification. The test suite contains thousands of individual tests, each of which tests some specific requirements of the ECMAScript specification. The development of Test262 is a project of the Ecma Technical Committee 39 (TC39). The testing framework and individual tests are created by member organizations of TC39 and contributed to Ecma for use in Test262. Important contributions were made by Google (Sputnik testsuite) and Microsoft who both contributed thousands of tests.The Test262 testsuite consisted of 38014 tests as of January 2020[update].[43] ECMAScript specifications through ES7 are well-supported in major web browsers. The table below shows the conformance rate for current versions of software with respect to the most recent editions of ECMAScript. Scripting engine conformance Scripting engine Reference application(s) Conformance[44] ES5[45] ES6 (2015)[46] ES7 (2016)[47] Newer (2017+)[47][48] Chakra Microsoft Edge 18 100% 96% 100% 33% SpiderMonkey Firefox 79 100% 98% 100% 100% V8 Google Chrome 84, Microsoft Edge 84, Opera 70 100% 98% 100% 100% JavaScriptCore Safari 13.1 99% 99% 100% 84% See also[edit] Comparison of layout engines (ECMAScript) ECMAScript for XML (E4X) JavaScript JScript List of ECMAScript engines References[edit] ^ Stefanov, Stoyan (2010). JavaScript Patterns. O'Reilly Media, Inc. p. 5. ISBN 9781449396947. Retrieved 2016-01-12. The core JavaScript programming language [...] is based on the ECMAScript standard, or ES for short. ^ Wirfs-Brock, Allen; Eich, Brendan (2020). "JavaScript: The First 20 Years". Proceedings of the ACM on Programming Languages. 4: 1–189. doi:10.1145/3386327. S2CID 219603695. ^ Krill, Paul (2008-06-23). "JavaScript creator ponders past, future". InfoWorld. Retrieved 2013-10-31. ^ "Netscape and Sun announce JavaScript, the Open, Cross-platform Object Scripting Language for Enterprise Networks and the Internet". Netscape. 1995-12-04. Archived from the original on 2002-06-06. Retrieved 2019-11-04. ^ "Industry Leaders to Advance Standardization of Netscape's JavaScript at Standards Body Meeting". Netscape. November 15, 1996. Archived from the original on 1998-12-03. Retrieved 2013-10-31. ^ "Will there be a suggested file suffix for es4?". Mail.mozilla.org. 2006-10-03. Retrieved 2013-10-31. ^ Maffeis, Sergio; Mitchell, John C.; Taly, Ankur. "An Operational Semantics for JavaScript" (PDF). Association for Computing Machinery. ^ "JavaScript and JScript: What's the Difference?". About.com. 2015-11-25. Archived from the original on 2015-11-26. ^ "JavaScript and JScript: What's the Difference?". ThoughtCo.com. 2019-07-03. Retrieved 2019-11-04. ^ a b c d "ECMAScript 2020 Language Specification". Ecma International. June 2020. ^ "Changes to JavaScript, Part 1: EcmaScript 5". YouTube. 2009-05-18. Retrieved 2013-10-31. ^ a b "ECMAScript 2015 Language Specification". Ecma International. June 2015. ^ a b c "ECMAScript 2016 Language Specification". Ecma International. June 2016. ^ a b c "ECMAScript 2017 Language Specification". Ecma International. June 2017. ^ a b c "ECMAScript 2018 Language Specification". Ecma International. June 2018. ^ a b c "ECMAScript 2019 Language Specification". Ecma International. June 2019. ^ 2015-03-24 Meeting Notes. ESDiscuss. Also see Ecma withdrawn Standards. ECMA. ^ "ES4 overview paper released". Mail.mozilla.org. Retrieved 2013-10-31. ^ "The Real Story Behind ECMAScript 4". ^ "Proposed ECMAScript 4th Edition – Language Overview" (PDF). ecmascript.org. 23 October 2007. Archived from the original (PDF) on 13 July 2010. ^ John Resig. "John Resig – Bug Fixes in JavaScript 2". Ejohn.org. Retrieved 2013-10-31. ^ "Compatibility Between ES3 and Proposed ES4" (PDF). Ecmascript.org. Archived from the original (PDF) on 2014-07-24. Retrieved 2013-10-31. ^ (PDF). 2009-04-19 https://web.archive.org/web/20090419044026/http://www.ecma-international.org/publications/files/drafts/tc39-2009-025.pdf. Archived from the original (PDF) on 2009-04-19. Retrieved 2018-03-19. Missing or empty |title= (help) ^ "ECMAScript 3 and Beyond – IEBlog – Site Home – MSDN Blogs". Blogs.msdn.com. 2007-10-30. Retrieved 2013-10-31. ^ "What I think about ES4. – Albatross! – Site Home – MSDN Blogs". Blogs.msdn.com. 2007-10-31. Retrieved 2013-10-31. ^ "Open letter to Chris Wilson". Brendan Eich. 2007-10-31. Retrieved 2013-10-31. ^ "JavaScript 2 and the Open Web". 2007-11-20. Retrieved 2014-01-20. ^ "ECMAScript Harmony". Mail.mozilla.org. Retrieved 2013-10-31. ^ "A Major Milestone in JavaScript Standardization – JScript Blog – Site Home – MSDN Blogs". Blogs.msdn.com. 2009-04-09. Retrieved 2013-10-31. ^ "Ecma International finalises major revision of ECMAScript". Ecma International. 2009-04-09. Retrieved 2009-05-22. ^ "Ecma previous news". Ecma-international.org. Retrieved 2020-03-29. ^ Krill, Paul. "It's official: ECMAScript 6 is approved". InfoWorld. Retrieved 2018-03-19. ^ "5 Great Features in EcmaScript 6 (ES6 Harmony) – Wintellect". Wintellect. 2014-03-24. Retrieved 2018-03-19. ^ "ECMAScript 6 (ES6): What's New In The Next Version Of JavaScript". Smashing Magazine. 2015-10-28. Retrieved 2018-03-19. ^ "ECMAScript 6: New Features: Overview and Comparison". es6-features.org. Retrieved 2018-03-19. ^ "Standard ECMA-262 6th Edition / June 2015 ECMAScript 2015 Language Specification 14.2 Arrow Function Definitions". www.ecma-international.org. 2015. ^ Saboff, Michael (2016-05-23). "ECMAScript 6 Proper Tail Calls in WebKit". WebKit. Retrieved 2019-04-11. ^ "ECMAScript 2017 (ES8): the final feature set". 2ality. Retrieved 2018-04-23. ^ "About". ECMAScript. Archived from the original on 2012-08-02. Retrieved 2009-12-17. ^ David Flanagan (17 August 2006). JavaScript: The Definitive Guide: The Definitive Guide. "O'Reilly Media, Inc.". p. 16. ISBN 978-0-596-55447-7. ^ "JavaScript data types and data structures – JavaScript | MDN". Developer.mozilla.org. 2017-02-16. Retrieved 2017-02-24. ^ "ECMAScript Language – test262". Test262.ecmascript.org. Archived from the original on 2011-05-14. Retrieved 2013-10-31. ^ "tc39/test262". GitHub. January 24, 2020. Retrieved January 29, 2020. ^ ES5 is the baseline for this test suite. The conformance rate for other editions reflects support for new features only, not a comprehensive score. ^ "ECMAScript 5 compatibility table". kangax.github.io. Retrieved 2018-11-08. ^ "ECMAScript 6 compatibility table". kangax.github.io. Retrieved 2018-11-08. ^ a b "ECMAScript 2016+ compatibility table". kangax.github.io. Retrieved 2018-11-08. ^ Composite score that includes new features from ES7 through next edition drafts External links[edit] ISO standards[edit] ISO 16262 ECMA standards[edit] ECMA-262 ECMA-262 ECMAScript Language Specification 3rd edition (December 1999) ECMAScript Language Specification, Edition 3 Final, 24-Mar-00 4th Edition (overview): PDF 4th Edition (final draft): HTML, PDF ECMA-262 ECMAScript Language Specification 5th edition (December 2009) 5.1 Edition / June 2011: HTML, PDF 6th Edition / June 2015 (ECMAScript 2015 Language Specification): HTML, PDF 7th Edition / June 2016 (ECMAScript 2016 Language Specification): HTML, PDF 8th edition, June 2017 (ECMAScript 2017 Language Specification): HTML, PDF 9th edition, June 2018 (ECMAScript 2018 Language Specification): HTML, PDF 10th edition, June 2019 (ECMAScript 2019 Language Specification): HTML, PDF ECMA-290 ECMAScript Components Specification (June 1999) ECMA-327 ECMAScript 3rd Edition Compact Profile (June 2001) ECMA-357 ECMAScript for XML (E4X) Specification (June 2004) v t e ECMAScript Dialects ActionScript Caja JavaScript engines asm.js JScript JScript .NET QtScript TypeScript WMLScript Engines (comparison) Carakan Futhark InScript JavaScriptCore JScript KJS Linear B Narcissus QtScript Rhino SpiderMonkey TraceMonkey JägerMonkey Tamarin V8 ChakraCore Chakra JScript .NET Nashorn Frameworks Client-side Chaplin.js Dojo Echo Ext JS Google Web Toolkit jQuery Lively Kernel midori MochiKit MooTools Prototype Pyjs qooxdoo Rialto Rico script.aculo.us SproutCore Spry Wakanda Framework Server-side AppJet Deno Jaxer Node.js WakandaDB Multiple Cappuccino Objective-J PureMVC Libraries Backbone.js SWFObject SWFAddress Underscore.js People Brendan Eich Douglas Crockford John Resig Scott Isaacs Other DHTML Ecma International JSDoc JSGI JSHint JSLint JSON JSSS Sputnik SunSpider Asynchronous module definition CommonJS Lists JavaScript libraries Ajax frameworks Comparisons JavaScript frameworks server-side JavaScript v t e Standards of Ecma International Application interfaces ANSI escape code Common Language Infrastructure Office Open XML OpenXPS File systems (tape) Advanced Intelligent Tape DDS DLT Super DLT Holographic Versatile Disc Linear Tape-Open (Ultrium-1) VXA File systems (disk) CD-ROM CD File System (CDFS) FAT FAT12 FAT16 FAT16B FD UDF Ultra Density Optical Universal Media Disc Graphics Universal 3D Programming languages C++/CLI C# Eiffel JavaScript (E4X, ECMAScript) Dart Radio link interfaces NFC UWB Other ECMA-35 List of Ecma standards (1961 - Present) v t e ISO standards by standard number List of ISO standards / ISO romanizations / IEC standards 1–9999 1 2 3 4 5 6 7 9 16 17 31 -0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 128 216 217 226 228 233 259 269 302 306 361 428 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10005 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10303 -11 -21 -22 -28 -238 10383 10487 10585 10589 10646 10664 10746 10861 10957 10962 10967 11073 11170 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 (-2) 11941 11941 (TR) 11992 12006 12182 12207 12234-2 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14644 14649 14651 14698 14750 14764 14882 14971 15022 15189 15288 15291 15292 15398 15408 15444 -3 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 16023 16262 16355-1 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17799 18000 18004 18014 18245 18629 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000+ 20000 20022 20121 20400 21000 21047 21500 21827 22000 22300 22395 23270 23271 23360 24517 24613 24617 24707 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30170 31000 32000 37001 38500 40500 42010 45001 50001 55000 80000 -1 Category v t e List of International Electrotechnical Commission standards IEC standards IEC 60027 IEC 60034 IEC 60038 IEC 60062 IEC 60063 IEC 60068 IEC 60112 IEC 60228 IEC 60269 IEC 60297 IEC 60309 IEC 60320 IEC 60364 IEC 60446 IEC 60559 IEC 60601 IEC 60870 IEC 60870-5 IEC 60870-6 IEC 60906-1 IEC 60908 IEC 60929 IEC 60958 AES3 S/PDIF IEC 61030 IEC 61131 IEC 61131-3 IEC 61131-9 IEC 61158 IEC 61162 IEC 61334 IEC 61346 IEC 61355 IEC 61360 IEC 61400 IEC 61499 IEC 61508 IEC 61511 IEC 61784 IEC 61850 IEC 61851 IEC 61883 IEC 61960 IEC 61968 IEC 61970 IEC 62014-4 IEC 62026 IEC 62056 IEC 62061 IEC 62196 IEC 62262 IEC 62264 IEC 62304 IEC 62325 IEC 62351 IEC 62365 IEC 62366 IEC 62379 IEC 62386 IEC 62455 IEC 62680 IEC 62682 IEC 62700 IEC 63110 IEC 63119 ISO/IEC standards ISO/IEC 646 ISO/IEC 2022 ISO/IEC 4909 ISO/IEC 5218 ISO/IEC 6429 ISO/IEC 6523 ISO/IEC 7810 ISO/IEC 7811 ISO/IEC 7812 ISO/IEC 7813 ISO/IEC 7816 ISO/IEC 7942 ISO/IEC 8613 ISO/IEC 8632 ISO/IEC 8652 ISO/IEC 8859 ISO/IEC 9126 ISO/IEC 9293 ISO/IEC 9592 ISO/IEC 9593 ISO/IEC 9899 ISO/IEC 9945 ISO/IEC 9995 ISO/IEC 10021 ISO/IEC 10116 ISO/IEC 10165 ISO/IEC 10179 ISO/IEC 10646 ISO/IEC 10967 ISO/IEC 11172 ISO/IEC 11179 ISO/IEC 11404 ISO/IEC 11544 ISO/IEC 11801 ISO/IEC 12207 ISO/IEC 13250 ISO/IEC 13346 ISO/IEC 13522-5 ISO/IEC 13568 ISO/IEC 13818 ISO/IEC 14443 ISO/IEC 14496 ISO/IEC 14882 ISO/IEC 15288 ISO/IEC 15291 ISO/IEC 15408 ISO/IEC 15444 ISO/IEC 15445 ISO/IEC 15504 ISO/IEC 15511 ISO/IEC 15693 ISO/IEC 15897 ISO/IEC 15938 ISO/IEC 16262 ISO/IEC 17024 ISO/IEC 17025 ISO/IEC 18000 ISO/IEC 18004 ISO/IEC 18014 ISO/IEC 19752 ISO/IEC 19757 ISO/IEC 19770 ISO/IEC 19788 ISO/IEC 20000 ISO/IEC 21000 ISO/IEC 21827 ISO/IEC 23000 ISO/IEC 23003 ISO/IEC 23008 ISO/IEC 23270 ISO/IEC 23360 ISO/IEC 24707 ISO/IEC 24727 ISO/IEC 24744 ISO/IEC 24752 ISO/IEC 26300 ISO/IEC 27000 ISO/IEC 27000-series ISO/IEC 27002 ISO/IEC 27040 ISO/IEC 29119 ISO/IEC 33001 ISO/IEC 38500 ISO/IEC 42010 ISO/IEC 80000 Related International Electrotechnical Commission Retrieved from "https://en.wikipedia.org/w/index.php?title=ECMAScript&oldid=991765218" Categories: Computer-related introductions in 1997 C programming language family Computer standards Dynamically typed programming languages Ecma standards JavaScript dialect engines JavaScript programming language family Object-based programming languages Programming languages with an ISO standard Prototype-based programming languages Scripting languages Source-to-source compilers Hidden categories: Pages with syntax highlighting errors Pages with citations lacking titles Pages with citations having bare URLs Articles with short description Short description matches Wikidata Wikipedia articles in need of updating from June 2020 All Wikipedia articles in need of updating All articles with unsourced statements Articles with unsourced statements from December 2019 Articles to be expanded from February 2017 All articles to be expanded Articles using small message boxes Articles with unsourced statements from January 2020 Articles containing potentially dated statements from January 2020 All articles containing potentially dated statements Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages العربية Български Català Čeština Dansk Deutsch Eesti Español فارسی Français 한국어 Íslenska Italiano עברית Magyar മലയാളം Bahasa Melayu Nederlands 日本語 Norsk bokmål Polski Português Русский Српски / srpski Svenska ไทย Türkçe Українська Tiếng Việt Yorùbá 中文 Edit links This page was last edited on 1 December 2020, at 18:33 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement