PSPACE-complete - Wikipedia PSPACE-complete From Wikipedia, the free encyclopedia Jump to navigation Jump to search In computational complexity theory, a decision problem is PSPACE-complete if it can be solved using an amount of memory that is polynomial in the input length (polynomial space) and if every other problem that can be solved in polynomial space can be transformed to it in polynomial time. The problems that are PSPACE-complete can be thought of as the hardest problems in PSPACE, because a solution to any one such problem could easily be used to solve any other problem in PSPACE. The PSPACE-complete problems are widely suspected to be outside the more famous complexity classes P and NP, but that is not known.[1] It is known that they lie outside of the class NC (a class of problems with highly efficient parallel algorithms), because problems in NC can be solved in an amount of space polynomial in the logarithm of the input size, and the class of problems solvable in such a small amount of space is strictly contained in PSPACE by the space hierarchy theorem. Contents 1 Examples 1.1 Regular expressions and automata 1.2 Context-sensitive grammars 1.3 Quantified Boolean formulas 1.4 Puzzles and games 2 References 3 Further reading Examples[edit] Main article: List of PSPACE-complete problems Regular expressions and automata[edit] Given a regular expression R, determining whether it generates every string over its alphabet is PSPACE-complete.[2] A related result is that the class of languages recognizable with zero error by automata with two-way infinite random tape equals nondeterministic linear space. This holds for both two-way and multipass one-way access to input. Testing whether an automaton (with two-way infinite random tape) accepts a word with zero error is NSPACE(O(kn)) complete, where n is the input size and k is the number of states. Context-sensitive grammars[edit] The first known PSPACE-complete problem was the word problem for deterministic context-sensitive grammars. In the word problem for context-sensitive grammars, one is given a set of grammatical transformations which can increase, but cannot decrease, the length of a sentence, and wishes to determine if a given sentence could be produced by these transformations. The technical condition of "determinism" (implying roughly that each transformation makes it obvious that it was used) ensures that this process can be solved in polynomial space, and Kuroda (1964) showed that every (possibly non-deterministic) program computable in linear space could be converted into the parsing of a context-sensitive grammar, in a way which preserves determinism.[3] In 1970, Savitch's theorem showed that PSPACE is closed under nondeterminism, implying that even non-deterministic context-sensitive grammars are in PSPACE. Quantified Boolean formulas[edit] Nowadays, the archetypal PSPACE-complete problem is generally taken to be the quantified Boolean formula problem (usually abbreviated to QBF or TQBF; the T stands for "true"), a generalization of the first known NP-complete problem, the Boolean satisfiability problem (SAT). The satisfiability problem is the problem of whether there are assignments of truth values to variables that make a Boolean expression true.[4] For example, one instance of SAT would be the question of whether the following is true: ∃ x 1 ∃ x 2 ∃ x 3 ∃ x 4 : ( x 1 ∨ ¬ x 3 ∨ x 4 ) ∧ ( ¬ x 2 ∨ x 3 ∨ ¬ x 4 ) {\displaystyle \exists x_{1}\,\exists x_{2}\,\exists x_{3}\,\exists x_{4}:(x_{1}\lor \neg x_{3}\lor x_{4})\land (\neg x_{2}\lor x_{3}\lor \neg x_{4})} The quantified Boolean formula problem differs in allowing both universal and existential quantification over the values of the variables: ∃ x 1 ∀ x 2 ∃ x 3 ∀ x 4 : ( x 1 ∨ ¬ x 3 ∨ x 4 ) ∧ ( ¬ x 2 ∨ x 3 ∨ ¬ x 4 ) {\displaystyle \exists x_{1}\,\forall x_{2}\,\exists x_{3}\,\forall x_{4}:(x_{1}\lor \neg x_{3}\lor x_{4})\land (\neg x_{2}\lor x_{3}\lor \neg x_{4})} . The proof that QBF is a PSPACE-complete problem is essentially a restatement of the proof of Savitch's theorem in the language of logic, and is a bit more technical. Puzzles and games[edit] For a list of games by completeness for PSPACE or other complexity classes, see Game complexity. The NP-complete problem in the previous section resembles typical puzzles: is there some way to plug in values that solves the problem? Correspondingly, the PSPACE-complete problem there resembles games: is there some move I can make, such that for all moves my opponent might make, there will then be some move I can make to win? The question alternates existential and universal quantifiers. Not surprisingly, many puzzles turn out to be NP-complete, and many games turn out to be PSPACE-complete.[5] Examples of games that are PSPACE-complete (when generalized so that they can be played on an n × n board) are the games Hex and Reversi the solitaire games Rush Hour, Mahjong, Atomix and Sokoban, and the mechanical computer Turing Tumble. Some other generalized games, such as chess, checkers (draughts), and Go are EXPTIME-complete because a game between two perfect players can be very long, so they are unlikely to be in PSPACE. But they will become PSPACE-complete if a polynomial bound on the number of moves is enforced.[5] Note that the definition of PSPACE-completeness is based on asymptotic complexity: the time it takes to solve a problem of size n, in the limit as n grows without bound. That means a finite game like checkers (which is played on an 8 × 8 board) could never be PSPACE-complete, since they can be solved in constant time and space using a very large lookup table (checkers is already solved in this way). That is why all the games were modified by playing them on an n × n board instead; in some cases, such as for Chess, these extensions are artificial. References[edit] ^ Arora, Sanjeev; Barak, Boaz (2009), Computational Complexity: A Modern Approach, Cambridge University Press, p. 92, ISBN 9781139477369 ^ Hunt, H. B., III (1973), "On the time and tape complexity of languages. I", Fifth Annual ACM Symposium on Theory of Computing (Austin, Tex., 1973), Assoc. Comput. Mach., New York, pp. 10–19, MR 0421145 ^ Kuroda, S.-Y. (1964), "Classes of languages and linear-bounded automata", Information and Computation, 7: 207–223, doi:10.1016/s0019-9958(64)90120-2, MR 0169724 ^ Garey, Michael R.; Johnson, David S. (1979), "Section 7.4: Polynomial Space Completeness", Computers and Intractability: A Guide to the Theory of NP-Completeness, W.H. Freeman, pp. 170–177, ISBN 0-7167-1045-5 ^ a b Eppstein, David, Computational Complexity of Games and Puzzles Further reading[edit] Sipser, Michael (1997), "Section 8.3: PSPACE-completeness", Introduction to the Theory of Computation, PWS Publishing, pp. 283–294, ISBN 0-534-94728-X . v t e Important complexity classes (more) Considered feasible DLOGTIME AC0 ACC0 TC0 L SL RL NL NC SC CC P P-complete ZPP RP BPP BQP APX Suspected infeasible UP NP NP-complete NP-hard co-NP co-NP-complete AM QMA PH ⊕P PP #P #P-complete IP PSPACE PSPACE-complete Considered infeasible EXPTIME NEXPTIME EXPSPACE 2-EXPTIME ELEMENTARY PR R RE ALL Class hierarchies Polynomial hierarchy Exponential hierarchy Grzegorczyk hierarchy Arithmetical hierarchy Boolean hierarchy Families of classes DTIME NTIME DSPACE NSPACE Probabilistically checkable proof Interactive proof system Retrieved from "https://en.wikipedia.org/w/index.php?title=PSPACE-complete&oldid=960651766" Categories: Complexity classes Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages العربية Català Español 한국어 Português Edit links This page was last edited on 4 June 2020, at 04:17 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement