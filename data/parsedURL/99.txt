APL (programming language) - Wikipedia APL (programming language) From Wikipedia, the free encyclopedia Jump to navigation Jump to search Not to be confused with Address programming language. Functional, symbolic programming language for operating on multidimensional arrays APL Paradigm Array, functional, structured, modular Designed by Kenneth E. Iverson Developer Larry Breed, Dick Lathwell, Roger Moore and others First appeared November 27, 1966; 54 years ago (1966-11-27)[1] Stable release ISO/IEC 13751:2001 / February 1, 2001; 19 years ago (2001-02-01) Typing discipline Dynamic Platform Cross platform License Proprietary, open source Major implementations APL\360 APL\1130 APL*Plus Sharp APL APL2 Dyalog APL NARS2000 APLX GNU APL Influenced by Mathematical notation Influenced A and A+ C++[2] FP J K LYaPAS[citation needed] MATLAB Nial PPL Python S Speakeasy Wolfram Language This article contains APL source code. Without proper rendering support, you may see question marks, boxes, or other symbols instead of APL symbols. APL (named after the book A Programming Language)[3] is a programming language developed in the 1960s by Kenneth E. Iverson. Its central datatype is the multidimensional array. It uses a large range of special graphic symbols[4] to represent most functions and operators, leading to very concise code. It has been an important influence on the development of concept modeling, spreadsheets, functional programming,[5] and computer math packages.[6] It has also inspired several other programming languages.[7][8] Contents 1 History 1.1 Mathematical notation 1.2 Development into a computer programming language 1.3 Hardware 1.4 Commercial availability 1.5 Microcomputers 1.6 APL2 1.7 Modern implementations 1.8 Derivative languages 2 Language characteristics 2.1 Character set 2.2 Design 2.3 Terminology 2.4 Syntax 2.5 Examples 2.5.1 Hello, World 2.5.2 Exponentiation 2.5.3 Simple statistics 2.5.4 Pick 6 lottery numbers 2.5.5 Prime numbers 2.5.6 Sorting 2.5.7 Game of Life 2.5.8 HTML tags removal 3 Use 4 Notable implementations 4.1 APL\360 4.2 APL\1130 4.3 APL*Plus and Sharp APL 4.4 APL2 4.5 Dyalog APL 4.6 NARS2000 4.7 APLX 4.8 GNU APL 5 Interpretation and compilation of APL 5.1 Idiom recognition 5.2 Optimised bytecode 5.3 Compilation 6 Standards 7 References 8 Further reading 8.1 Video 9 External links 9.1 Online resources 9.2 Providers 9.3 User groups and societies History[edit] Mathematical notation[edit] A mathematical notation for manipulating arrays was developed by Kenneth E. Iverson, starting in 1957 at Harvard University. In 1960, he began work for IBM where he developed this notation with Adin Falkoff and published it in his book A Programming Language in 1962.[3] The preface states its premise: Applied mathematics is largely concerned with the design and analysis of explicit procedures for calculating the exact or approximate values of various functions. Such explicit procedures are called algorithms or programs. Because an effective notation for the description of programs exhibits considerable syntactic structure, it is called a programming language. This notation was used inside IBM for short research reports on computer systems, such as the Burroughs B5000 and its stack mechanism when stack machines versus register machines were being evaluated by IBM for upcoming computers. Iverson also used his notation in a draft of the chapter A Programming Language, written for a book he was writing with Fred Brooks, Automatic Data Processing, which would be published in 1963.[9][10] In 1979, Iverson received the Turing Award for his work on APL.[11] Development into a computer programming language[edit] As early as 1962, the first attempt to use the notation to describe a complete computer system happened after Falkoff discussed with William C. Carter his work to standardize the instruction set for the machines that later became the IBM System/360 family. In 1963, Herbert Hellerman, working at the IBM Systems Research Institute, implemented a part of the notation on an IBM 1620 computer, and it was used by students in a special high school course on calculating transcendental functions by series summation. Students tested their code in Hellerman's lab. This implementation of a part of the notation was called Personalized Array Translator (PAT).[12] In 1963, Falkoff, Iverson, and Edward H. Sussenguth Jr., all working at IBM, used the notation for a formal description of the IBM System/360 series machine architecture and functionality, which resulted in a paper published in IBM Systems Journal in 1964. After this was published, the team turned their attention to an implementation of the notation on a computer system. One of the motivations for this focus of implementation was the interest of John L. Lawrence who had new duties with Science Research Associates, an educational company bought by IBM in 1964. Lawrence asked Iverson and his group to help use the language as a tool to develop and use computers in education.[13] After Lawrence M. Breed and Philip S. Abrams of Stanford University joined the team at IBM Research, they continued their prior work on an implementation programmed in FORTRAN IV for a part of the notation which had been done for the IBM 7090 computer running on the IBSYS operating system. This work was finished in late 1965 and later named IVSYS (for Iverson system). The basis of this implementation was described in detail by Abrams in a Stanford University Technical Report, "An Interpreter for Iverson Notation" in 1966, the academic aspect of this was formally supervised by Niklaus Wirth.[14] Like Hellerman's PAT system earlier, this implementation did not include the APL character set but used special English reserved words for functions and operators. The system was later adapted for a time-sharing system and, by November 1966, it had been reprogrammed for the IBM System/360 Model 50 computer running in a time sharing mode and was used internally at IBM.[15] Hardware[edit] IBM typeballs (one OCR) with clip, €2 coin for scale A programmer's view of the IBM 2741 keyboard layout with the APL typing element print head inserted A key development in the ability to use APL effectively, before the wide use of cathode ray tube (CRT) terminals, was the development of a special IBM Selectric typewriter interchangeable typing element with all the special APL characters on it. This was used on paper printing terminal workstations using the Selectric typewriter and typing element mechanism, such as the IBM 1050 and IBM 2741 terminal. Keycaps could be placed over the normal keys to show which APL characters would be entered and typed when that key was struck. For the first time, a programmer could type in and see proper APL characters as used in Iverson's notation and not be forced to use awkward English keyword representations of them. Falkoff and Iverson had the special APL Selectric typing elements, 987 and 988, designed in late 1964, although no APL computer system was available to use them.[16] Iverson cited Falkoff as the inspiration for the idea of using an IBM Selectric typing element for the APL character set.[17] Many APL symbols, even with the APL characters on the Selectric typing element, still had to be typed in by over-striking two extant element characters. An example is the grade up character, which had to be made from a delta (shift-H) and a Sheffer stroke (shift-M). This was necessary because the APL character set was much larger than the 88 characters allowed on the typing element, even when letters were restricted to upper-case (capitals). Commercial availability[edit] The first APL interactive login and creation of an APL workspace was in 1966 by Larry Breed using an IBM 1050 terminal at the IBM Mohansic Labs near Thomas J. Watson Research Center, the home of APL, in Yorktown Heights, New York.[16] IBM was chiefly responsible for introducing APL to the marketplace. APL was first available in 1967 for the IBM 1130 as APL\1130.[18][19] It would run in as little as 8k 16-bit words of memory, and used a dedicated 1 megabyte hard disk. APL gained its foothold on mainframe timesharing systems from the late 1960s through the early 1980s, in part because it would support multiple users on lower-specification systems that had no dynamic address translation hardware.[20] Additional improvements in performance for selected IBM System/370 mainframe systems included the APL Assist Microcode in which some support for APL execution was included in the processor's firmware, as distinct from being implemented entirely by higher-level software. Somewhat later, as suitably performing hardware was finally growing available in the mid- to late-1980s, many users migrated their applications to the personal computer environment. Early IBM APL interpreters for IBM 360 and IBM 370 hardware implemented their own multi-user management instead of relying on the host services, thus they were their own timesharing systems. First introduced in 1966, the APL\360[21][22][23] system was a multi-user interpreter. The ability to programmatically communicate with the operating system for information and setting interpreter system variables was done through special privileged "I-beam" functions, using both monadic and dyadic operations.[24] In 1973, IBM released APL.SV, which was a continuation of the same product, but which offered shared variables as a means to access facilities outside of the APL system, such as operating system files. In the mid-1970s, the IBM mainframe interpreter was even adapted for use on the IBM 5100 desktop computer, which had a small CRT and an APL keyboard, when most other small computers of the time only offered BASIC. In the 1980s, the VSAPL program product enjoyed wide use with Conversational Monitor System (CMS), Time Sharing Option (TSO), VSPC, MUSIC/SP, and CICS users. In 1973–1974, Patrick E. Hagerty directed the implementation of the University of Maryland APL interpreter for the 1100 line of the Sperry UNIVAC 1100/2200 series mainframe computers.[25] At the time, Sperry had nothing. In 1974, student Alan Stebbens was assigned the task of implementing an internal function.[26] Xerox APL was available from June 1975 for Xerox 560 and Sigma 6, 7, and 9 mainframes running CP-V and for Honeywell CP-6.[27] In the 1960s and 1970s, several timesharing firms arose that sold APL services using modified versions of the IBM APL\360[23] interpreter. In North America, the better-known ones were I. P. Sharp Associates, Scientific Time Sharing Corporation (STSC), Time Sharing Resources (TSR), and The Computer Company (TCC). CompuServe also entered the market in 1978 with an APL Interpreter based on a modified version of Digital Equipment Corp and Carnegie Mellon's, which ran on DEC's KI and KL 36-bit machines. CompuServe's APL was available both to its commercial market and the consumer information service. With the advent first of less expensive mainframes such as the IBM 4300, and later the personal computer, by the mid-1980s, the timesharing industry was all but gone. Sharp APL was available from I. P. Sharp Associates, first as a timesharing service in the 1960s, and later as a program product starting around 1979. Sharp APL was an advanced APL implementation with many language extensions, such as packages (the ability to put one or more objects into a single variable), file system, nested arrays, and shared variables. APL interpreters were available from other mainframe and mini-computer manufacturers also, notably Burroughs, Control Data Corporation (CDC), Data General, Digital Equipment Corporation (DEC), Harris, Hewlett-Packard (HP), Siemens AG, Xerox, and others. Garth Foster of Syracuse University sponsored regular meetings of the APL implementers' community at Syracuse's Minnowbrook Conference Center in Blue Mountain Lake, New York. In later years, Eugene McDonnell organized similar meetings at the Asilomar Conference Grounds near Monterey, California, and at Pajaro Dunes near Watsonville, California. The SIGAPL special interest group of the Association for Computing Machinery continues to support the APL community.[28] Microcomputers[edit] On microcomputers, which became available from the mid 1970s onwards, BASIC became the dominant programming language.[29] Nevertheless, some microcomputers provided APL instead - the first being the Intel 8008-based MCM/70 which was released in 1974[30][31] and which was primarily used in education.[32] Another machine of this time was the VideoBrain Family Computer, released in 1977, which was supplied with its dialect of APL called APL/S.[33] The Commodore SuperPET, introduced in 1981, included an APL interpreter developed by the University of Waterloo.[34] In 1976, Bill Gates claimed in his Open Letter to Hobbyists that Microsoft Corporation was implementing APL for the Intel 8080 and Motorola 6800 but had "very little incentive to make [it] available to hobbyists" because of software piracy.[35] It was never released. APL2[edit] Starting in the early 1980s, IBM APL development, under the leadership of Jim Brown, implemented a new version of the APL language that contained as its primary enhancement the concept of nested arrays, where an array can contain other arrays, and new language features which facilitated integrating nested arrays into program workflow. Ken Iverson, no longer in control of the development of the APL language, left IBM and joined I. P. Sharp Associates, where one of his major contributions was directing the evolution of Sharp APL to be more in accord with his vision.[36][37][38] As other vendors were busy developing APL interpreters for new hardware, notably Unix-based microcomputers, APL2 was almost always the standard chosen for new APL interpreter developments. Even today, most APL vendors or their users cite APL2 compatibility, as a selling point for those products.[39][40] APL2 for IBM mainframe computers is still available. IBM cites its use for problem solving, system design, prototyping, engineering and scientific computations, expert systems,[41] for teaching mathematics and other subjects, visualization and database access[42] and was first available for CMS and TSO in 1984.[43] The APL2 Workstation edition (Windows, OS/2, AIX, Linux, and Solaris) followed much later in the early 1990s.[citation needed] Modern implementations[edit] Various implementations of APL by APLX, Dyalog, et al., include extensions for object-oriented programming, support for .NET Framework, XML-array conversion primitives, graphing, operating system interfaces, and lambda calculus expressions. Derivative languages[edit] APL has formed the basis of, or influenced, the following languages:[citation needed] A and A+, an alternative APL, the latter with graphical extensions. FP, a functional programming language. Ivy, an interpreter for an APL-like language developed by Rob Pike, and which uses ASCII as input.[44] J, which was also designed by Iverson, and which uses ASCII with digraphs instead of special symbols.[7] K, a proprietary variant of APL developed by Arthur Whitney.[8] LYaPAS, a Soviet extension to APL.[citation needed] MATLAB, a numerical computation tool.[6] Nial, a high-level array programming language with a functional programming notation. Polymorphic Programming Language, an interactive, extensible language with a similar base language. S, a statistical programming language (usually now seen in the open-source version known as R). Speakeasy, a numerical computing interactive environment. Wolfram Language, the programming language of Mathematica.[45] Language characteristics[edit] Character set[edit] Main articles: APL (codepage) and syntax and symbols. APL has been both criticized and praised for its choice of a unique, non-standard character set. Some who learn it become ardent adherents, suggesting that there is some weight behind Iverson's idea that the notation used does make a difference. In the 1960s and 1970s, few terminal devices and even display monitors could reproduce the APL character set. The most popular ones employed the IBM Selectric print mechanism used with a special APL type element. One of the early APL line terminals (line-mode operation only, not full screen) was the Texas Instruments TI Model 745 (circa 1977) with the full APL character set[46] which featured half and full duplex telecommunications modes, for interacting with an APL time-sharing service or remote mainframe to run a remote computer job, called an RJE. Over time, with the universal use of high-quality graphic displays, printing devices and Unicode support, the APL character font problem has largely been eliminated. However, entering APL characters requires the use of input method editors, keyboard mappings, virtual/on-screen APL symbol sets,[47][48] or easy-reference printed keyboard cards which can frustrate beginners accustomed to other programming languages.[49][50][51] With beginners who have no prior experience with other programming languages, a study involving high school students found that typing and using APL characters did not hinder the students in any measurable way.[52] In defense of APL use, APL requires less coding to type in, and keyboard mappings become memorized over time. Also, special APL keyboards are manufactured and in use today, as are freely available downloadable fonts for operating systems such as Microsoft Windows.[53] The reported productivity gains assume that one will spend enough time working in APL to make it worthwhile to memorize the symbols, their semantics, and keyboard mappings, not to mention a substantial number of idioms for common tasks.[citation needed] Design[edit] Unlike traditionally structured programming languages, APL code is typically structured as chains of monadic or dyadic functions, and operators[54] acting on arrays.[55] APL has many nonstandard primitives (functions and operators) that are indicated by a single symbol or a combination of a few symbols. All primitives are defined to have the same precedence, and always associate to the right. Thus, APL is read or best understood from right-to-left. Early APL implementations (circa 1970 or so) had no programming loop-flow control structures, such as do or while loops, and if-then-else constructs. Instead, they used array operations, and use of structured programming constructs was often not necessary, since an operation could be performed on a full array in one statement. For example, the iota function (ι) can replace for-loop iteration: ιN when applied to a scalar positive integer yields a one-dimensional array (vector), 1 2 3 ... N. More recent implementations of APL generally include comprehensive control structures, so that data structure and program control flow can be clearly and cleanly separated. The APL environment is called a workspace. In a workspace the user can define programs and data, i.e., the data values exist also outside the programs, and the user can also manipulate the data without having to define a program.[56] In the examples below, the APL interpreter first types six spaces before awaiting the user's input. Its own output starts in column one.       n ← 4 5 6 7 Assigns vector of values, {4 5 6 7}, to variable n, an array create operation. An equivalent yet more concise APL expression would be n ← 3 + ⍳4. Multiple values are stored in array n, the operation performed without formal loops or control flow language.       n 4 5 6 7 Display the contents of n, currently an array or vector.       n+48 9 10 11 4 is now added to all elements of vector n, creating a 4-element vector {8 9 10 11}. As above, APL's interpreter displays the result because the expression's value was not assigned to a variable (with a ←).       +/n22 APL displays the sum of components of the vector n, i.e., 22 (= 4 + 5 + 6 + 7) using a very compact notation: read +/ as "plus, over..." and a slight change would be "multiply, over..."       m ← +/(3+⍳4)      m22 These operations can be combined into one statement, remembering that APL evaluates expressions right to left: first ⍳4 creates an array, [1,2,3,4], then 3 is added to each component, which are summed together and the result stored in variable m, finally displayed. In normal mathematical notation, it is equivalent to: m = ∑ i = 1 4 ( i + 3 ) {\displaystyle \displaystyle m=\sum \limits _{i=1}^{4}(i+3)} . Recall that mathematical expressions are not read or evaluated from right-to-left. The user can save the workspace with all values, programs, and execution status. APL uses a set of non-ASCII symbols, which are an extension of traditional arithmetic and algebraic notation. Having single character names for single instruction, multiple data (SIMD) vector functions is one way that APL enables compact formulation of algorithms for data transformation such as computing Conway's Game of Life in one line of code.[57] In nearly all versions of APL, it is theoretically possible to express any computable function in one expression, that is, in one line of code. Because of the unusual character set, many programmers use special keyboards with APL keytops to write APL code.[58] Although there are various ways to write APL code using only ASCII characters,[59] in practice it is almost never done. (This may be thought to support Iverson's thesis about notation as a tool of thought.[60]) Most if not all modern implementations use standard keyboard layouts, with special mappings or input method editors to access non-ASCII characters. Historically, the APL font has been distinctive, with uppercase italic alphabetic characters and upright numerals and symbols. Most vendors continue to display the APL character set in a custom font. Advocates of APL[who?] claim that the examples of so-called write-only code (badly written and almost incomprehensible code) are almost invariably examples of poor programming practice or novice mistakes, which can occur in any language. Advocates also claim that they are far more productive with APL than with more conventional computer languages, and that working software can be implemented in far less time and with far fewer programmers than using other technology.[citation needed] They also may claim that because it is compact and terse, APL lends itself well to larger-scale software development and complexity, because the number of lines of code can be reduced greatly. Many APL advocates and practitioners also view standard programming languages such as COBOL and Java as being comparatively tedious. APL is often found where time-to-market is important, such as with trading systems.[61][62][63][64] Terminology[edit] APL makes a clear distinction between functions and operators.[54][65] Functions take arrays (variables or constants or expressions) as arguments, and return arrays as results. Operators (similar to higher-order functions) take functions or arrays as arguments, and derive related functions. For example, the sum function is derived by applying the reduction operator to the addition function. Applying the same reduction operator to the maximum function (which returns the larger of two numbers) derives a function which returns the largest of a group (vector) of numbers. In the J language, Iverson substituted the terms verb for function and adverb or conjunction for operator. APL also identifies those features built into the language, and represented by a symbol, or a fixed combination of symbols, as primitives. Most primitives are either functions or operators. Coding APL is largely a process of writing non-primitive functions and (in some versions of APL) operators. However a few primitives are considered to be neither functions nor operators, most noticeably assignment. Some words used in APL literature have meanings that differ from those in both mathematics and the generality of computer science. Terminology of APL operators Term Description function operation or mapping that takes zero, one (right) or two (left & right) arguments which may be scalars, arrays, or more complicated structures, and may return a similarly complex result. A function may be: Primitive: built-in and represented by a single glyph;[66] Defined: as a named and ordered collection of program statements;[66] Derived: as a combination of an operator with its arguments.[66] array data valued object of zero or more orthogonal dimensions in row-major order in which each item is a primitive scalar datum or another array.[67] niladic not taking or requiring any arguments,[68] monadic requiring only one argument; on the right for a function, on the left for an operator, unary[68] dyadic requiring both a left and a right argument, binary[68] ambivalent or monadic capable of use in a monadic or dyadic context, permitting its left argument to be elided[66] operator operation or mapping that takes one (left) or two (left & right) function or array valued arguments (operands) and derives a function. An operator may be: Primitive: built-in and represented by a single glyph;[66] Defined: as a named and ordered collection of program statements.[66] Syntax[edit] Main article: APL syntax and symbols APL has explicit representations of functions, operators, and syntax, thus providing a basis for the clear and explicit statement of extended facilities in the language, and tools to experiment on them.[69] Examples[edit] Hello, World[edit] This displays "Hello, world": 'Hello, world' 'Hello World,' sample user session on YouTube[70] A design theme in APL is to define default actions in some cases that would produce syntax errors in most other programming languages. The 'Hello, world' string constant above displays, because display is the default action on any expression for which no action is specified explicitly (e.g. assignment, function parameter). Exponentiation[edit] Another example of this theme is that exponentiation in APL is written as "2*3", which indicates raising 2 to the power 3 (this would be written as "2^3" in some other languages and "2**3" in FORTRAN and Python): many languages use * to signify multiplication as in 2*3 but APL uses 2×3 for that. However, if no base is specified (as with the statement "*3" in APL, or "^3" in other languages), in most other programming languages one would have a syntax error. APL however assumes the missing base to be the natural logarithm constant e (2.71828....), and so interpreting "*3" as "2.71828*3". Simple statistics[edit] Suppose that X is an array of numbers. Then (+/X)÷⍴X gives its average. Reading right-to-left, ⍴X gives the number of elements in X, and since ÷ is a dyadic operator, the term to its left is required as well. It is in parenthesis since otherwise X would be taken (so that the summation would be of X÷⍴X, of each element of X divided by the number of elements in X), and +/X adds all the elements of X. Building on this, ((+/((X - (+/X)÷⍴X)*2))÷⍴X)*0.5 calculates the standard deviation. Further, since assignment is an operator, it can appear within an expression, so SD←((+/((X - AV←(T←+/X)÷⍴X)*2))÷⍴X)*0.5 would place suitable values into T, AV and SD. Naturally, one would make this expression into a function for repeated use rather than retyping it each time. Pick 6 lottery numbers[edit] This following immediate-mode expression generates a typical set of Pick 6 lottery numbers: six pseudo-random integers ranging from 1 to 40, guaranteed non-repeating, and displays them sorted in ascending order: x[⍋x←6?40] The above does a lot, concisely; although it seems complex to a new APLer. It combines the following APL functions (also called primitives[71] and glyphs[72]): The first to be executed (APL executes from rightmost to leftmost) is dyadic function ? (named deal when dyadic) that returns a vector consisting of a select number (left argument: 6 in this case) of random integers ranging from 1 to a specified maximum (right argument: 40 in this case), which, if said maximum ≥ vector length, is guaranteed to be non-repeating; thus, generate/create 6 random integers ranging from 1-40.[73] This vector is then assigned (←) to the variable x, because it is needed later. This vector is then sorted in ascending order by a monadic ⍋ function, which has as its right argument everything to the right of it up to the next unbalanced close-bracket or close-parenthesis. The result of ⍋ is the indices that will put its argument into ascending order. Then the output of ⍋ is used to index the variable x, which we saved earlier for this purpose, thereby selecting its items in ascending sequence. Since there is no function to the left of the left-most x to tell APL what to do with the result, it simply outputs it to the display (on a single line, separated by spaces) without needing any explicit instruction to do that. ? also has a monadic equivalent called roll, which simply returns one random integer between 1 and its sole operand [to the right of it], inclusive. Thus, a role-playing game program might use the expression ?20 to roll a twenty-sided die. Prime numbers[edit] The following expression finds all prime numbers from 1 to R. In both time and space, the calculation complexity is O ( R 2 ) {\displaystyle O(R^{2})\,\!} (in Big O notation). (~R∊R∘.×R)/R←1↓ιR Executed from right to left, this means: Iota ι creates a vector containing integers from 1 to R (if R= 6 at the start of the program, ιR is 1 2 3 4 5 6) Drop first element of this vector (↓ function), i.e., 1. So 1↓ιR is 2 3 4 5 6 Set R to the new vector (←, assignment primitive), i.e., 2 3 4 5 6 The / replicate operator is dyadic (binary) and the interpreter first evaluates its left argument (fully in parentheses): Generate outer product of R multiplied by R, i.e., a matrix that is the multiplication table of R by R (°.× operator), i.e., 4 6 8 10 12 6 9 12 15 18 8 12 16 20 24 10 15 20 25 30 12 18 24 30 36 Build a vector the same length as R with 1 in each place where the corresponding number in R is in the outer product matrix (∈, set inclusion or element of or Epsilon operator), i.e., 0 0 1 0 1 Logically negate (not) values in the vector (change zeros to ones and ones to zeros) (∼, logical not or Tilde operator), i.e., 1 1 0 1 0 Select the items in R for which the corresponding element is 1 (/ replicate operator), i.e., 2 3 5 (Note, this assumes the APL origin is 1, i.e., indices start with 1. APL can be set to use 0 as the origin, so that ι6 is 0 1 2 3 4 5, which is convenient for some calculations.) Sorting[edit] The following expression sorts a word list stored in matrix X according to word length: X[⍋X+.≠' ';] Game of Life[edit] The following function "life", written in Dyalog APL, takes a boolean matrix and calculates the new generation according to Conway's Game of Life. It demonstrates the power of APL to implement a complex algorithm in very little code, but it is also very hard to follow unless one has advanced knowledge of APL. life←{↑1 ⍵∨.∧3 4=+/,¯1 0 1∘.⊖¯1 0 1∘.⌽⊂⍵} HTML tags removal[edit] In the following example, also Dyalog, the first line assigns some HTML code to a variable txt and then uses an APL expression to remove all the HTML tags (explanation):       txt←'<html><body><p>This is <em>emphasized</em> text.</p></body></html>'      {⍵ /⍨ ~{⍵∨≠\⍵}⍵∊'<>'} txtThis is emphasized text. Use[edit] APL is used for many purposes including financial and insurance applications,[74] artificial intelligence,[75][76]neural networks[77]and robotics.[78] It has been argued that APL is a calculation tool and not a programming language;[79] its symbolic nature and array capabilities have made it popular with domain experts and data scientists[80] who do not have or require the skills of a computer programmer. APL is well suited to image manipulation and computer animation, where graphic transformations can be encoded as matrix multiplications. One of the first commercial computer graphics houses, Digital Effects, produced an APL graphics product named Visions, which was used to create television commercials and animation for the 1982 film Tron.[81] Latterly, the Stormwind boating simulator uses APL to implement its core logic, its interfacing to the rendering pipeline middleware and a major part of its physics engine.[82] Today, APL remains in use in a wide range of commercial and scientific applications, for exampleinvestment management,[74]asset management,[83]health care,[84]and DNA profiling,[85][86] and by hobbyists.[87] Notable implementations[edit] APL\360[edit] The first implementation of APL using recognizable APL symbols was APL\360 which ran on the IBM System/360, and was completed in November 1966[1] though at that time remained in use only within IBM.[43] In 1973 its implementors, Larry Breed, Dick Lathwell and Roger Moore, were awarded the Grace Murray Hopper Award from the Association for Computing Machinery (ACM). It was given "for their work in the design and implementation of APL\360, setting new standards in simplicity, efficiency, reliability and response time for interactive systems."[88][89][90] In 1975, the IBM 5100 microcomputer offered APL\360[91] as one of two built-in ROM-based interpreted languages for the computer, complete with a keyboard and display that supported all the special symbols used in the language.[92] Significant developments to APL\360 included CMS/APL, which made use of the virtual storage capabilities of CMS and APLSV, which introduced shared variables, system variables and system functions. It was subsequently ported to the IBM System/370 and VSPC platforms until its final release in 1983, after which it was replaced by APL2.[43] APL\1130[edit] In 1968, APL\1130 became the first publicly available APL system,[93] created by IBM for the IBM 1130. It became the most popular IBM Type-III Library software that IBM released.[94] APL*Plus and Sharp APL[edit] Main articles: I. P. Sharp Associates and Scientific Time Sharing Corporation APL*Plus and Sharp APL are versions of APL\360 with added business-oriented extensions such as data formatting and facilities to store APL arrays in external files. They were jointly developed by two companies, employing various members of the original IBM APL\360 development team.[95] The two companies were I. P. Sharp Associates (IPSA), an APL\360 services company formed in 1964 by Ian Sharp, Roger Moore and others, and STSC, a time-sharing and consulting service company formed in 1969 by Lawrence Breed and others. Together the two developed APL*Plus and thereafter continued to work together but develop APL separately as APL*Plus and Sharp APL. STSC ported APL*Plus to many platforms with versions being made for the VAX 11,[96] PC and UNIX, whereas IPSA took a different approach to the arrival of the Personal Computer and made Sharp APL available on this platform using additional PC-XT/360 hardware. In 1993, Soliton Incorporated was formed to support Sharp APL and it developed Sharp APL into SAX (Sharp APL for Unix). As of 2018[update], APL*Plus continues as APL2000 APL+Win. In 1985, Ian Sharp, and Dan Dyer of STSC, jointly received the Kenneth E. Iverson Award for Outstanding Contribution to APL.[97] APL2[edit] APL2 was a significant re-implementation of APL by IBM which was developed from 1971 and first released in 1984. It provides many additions to the language, of which the most notable is nested (non-rectangular) array support.[43] As of 2018[update] it is available for mainframe computers running z/OS or z/VM and workstations running AIX, Linux, Sun Solaris, and Microsoft Windows.[98] The entire APL2 Products and Services Team was awarded the Iverson Award in 2007.[97] Dyalog APL[edit] Dyalog APL was first released by British company Dyalog Ltd.[99] in 1983[100] and, as of 2018[update], is available for AIX, Linux (including on the Raspberry Pi), macOS and Microsoft Windows platforms. It is based on APL2, with extensions to support object-oriented programming[101] and functional programming.[102] Licences are free for personal/non-commercial use.[103] In 1995, two of the development team - John Scholes and Peter Donnelly - were awarded the Iverson Award for their work on the interpreter.[97] Gitte Christensen and Morten Kromberg were joint recipients of the Iverson Award in 2016.[104] NARS2000[edit] NARS2000 is an open-source APL interpreter written by Bob Smith, a prominent APL developer and implementor from STSC in the 1970s and 1980s. NARS2000 contains advanced features and new datatypes and runs natively on Microsoft Windows, and other platforms under Wine.[105] APLX[edit] Main article: APLX APLX is a cross-platform dialect of APL, based on APL2 and with several extensions, which was first released by British company MicroAPL in 2002. Although no longer in development or on commercial sale it is now available free of charge from Dyalog.[106] GNU APL[edit] GNU APL is a free implementation of Extended APL as specified in ISO/IEC 13751:2001 and is thus an implementation of APL2. It runs on GNU/Linux and on Windows using Cygwin, and uses Unicode internally. It was written by Jürgen Sauermann.[107] Richard Stallman, founder of the GNU Project, was an early adopter of APL, using it to write a text editor as a high school student in the summer of 1969.[108] Interpretation and compilation of APL[edit] APL is traditionally an interpreted language, having language characteristics such as weak variable typing not well suited to compilation.[109] However, with arrays as its core data structure[110] it provides opportunities for performance gains through parallelism,[111] parallel computing,[112][113] massively parallel applications,[114][115] and very-large-scale integration (VLSI),[116][117] and from the outset APL has been regarded as a high-performance language[118] - for example, it was noted for the speed with which it could perform complicated matrix operations "because it operates on arrays and performs operations like matrix inversion internally".[119] Nevertheless, APL is rarely purely interpreted and compilation or partial compilation techniques that are, or have been, used include the following: Idiom recognition[edit] Most APL interpreters support idiom recognition[120] and evaluate common idioms as single operations.[121][122] For example, by evaluating the idiom BV/⍳⍴A as a single operation (where BV is a Boolean vector and A is an array), the creation of two intermediate arrays is avoided.[123] Optimised bytecode[edit] Weak typing in APL means that a name may reference an array (of any datatype), a function or an operator. In general, the interpreter cannot know in advance which form it will be and must therefore perform analysis, syntax checking etc. at run-time.[124] However, in certain circumstances, it is possible to deduce in advance what type a name is expected to reference and then generate bytecode which can be executed with reduced run-time overhead. This bytecode can also be optimised using compilation techniques such as constant folding or common subexpression elimination.[125] The interpreter will execute the bytecode when present and when any assumptions which have been made are met. Dyalog APL includes support for optimised bytecode.[125] Compilation[edit] Compilation of APL has been the subject of research and experiment since the language first became available; the first compiler is considered to be the Burroughs APL-700[126] which was released around 1971.[127] In order to be able to compile APL, language limitations have to be imposed.[126][128] APEX is a research APL compiler which was written by Robert Bernecky and is available under the GNU Public License.[129] The STSC APL Compiler is a hybrid of a bytecode optimiser and a compiler - it enables compilation of functions to machine code provided that its sub-functions and globals are declared, but the interpreter is still used as a runtime library and to execute functions which do not meet the compilation requirements.[130] Standards[edit] APL has been standardized by the American National Standards Institute (ANSI) working group X3J10 and International Organization for Standardization (ISO) and International Electrotechnical Commission (IEC), ISO/IEC Joint Technical Committee 1 Subcommittee 22 Working Group 3. The Core APL language is specified in ISO 8485:1989, and the Extended APL language is specified in ISO/IEC 13751:2001. References[edit] ^ a b "APL Quotations and Anecdotes". jsoftware.com. jsoftware. Retrieved April 14, 2018. ^ "std::iota". cppreference.com. ^ a b Iverson, Kenneth E. (1962). A Programming Language. Wiley. ISBN 978-0-471-43014-8. Archived from the original on 2014-10-27. Retrieved 2014-10-27. ^ McIntyre, Donald B. (1991). "Language as an Intellectual Tool: From Hieroglyphics to APL". IBM Systems Journal. 30 (4): 554–581. doi:10.1147/sj.304.0554. Archived from the original on March 4, 2016. Retrieved January 9, 2015. ^ "ACM Award Citation – John Backus". Awards.acm.org. 1977. Archived from the original on February 12, 2008. Retrieved February 3, 2010. ^ a b Moler, Cleve. "The Growth of MATLAB" (PDF). Archived from the original (PDF) on April 11, 2009. Retrieved February 3, 2010. ^ a b "A Bibliography of APL and J". Jsoftware.com. Retrieved March 2, 2010. ^ a b "An Interview with Arthur Whitney". Kx Systems. January 4, 2004. Archived from the original on April 4, 2009. Retrieved March 2, 2010. ^ Iverson, Kenneth E., "Automatic Data Processing: Chapter 6: A programming language" Archived June 4, 2009, at the Wayback Machine, 1960, Draft copy for Brooks and Iverson 1963 book, Automatic Data Processing. ^ Brooks, Fred; Iverson, Kenneth, (1963), Automatic Data Processing, John Wiley & Sons Inc. ^ "Turing Award Citation 1979". Awards.acm.org. Archived from the original on 2009-12-23. Retrieved February 3, 2010. ^ Hellerman, H. (July 1964). "Experimental Personalized Array Translator System". Communications of the ACM. 7 (7): 433–438. doi:10.1145/364520.364573. S2CID 2181070. ^ Falkoff, Adin D.; Iverson, Kenneth E., "The Evolution of APL", ACM SIGPLAN Notices 13, 1978-08. ^ Abrams, Philip S., An interpreter for "Iverson notation", Technical Report: CS-TR-66-47, Department of Computer Science, Stanford University, August 1966; ^ Haigh, Thomas (2005). "Biographies: Kenneth E. Iverson". IEEE Annals of the History of Computing. doi:10.1109/MAHC.2005.4. ^ a b Breed, Larry, "The First APL Terminal Session", APL Quote Quad, Association for Computing Machinery, Volume 22, Number 1, September 1991, p.2-4. ^ 19, 2009 Adin Falkoff – Computer History Museum. "Iverson credited him for choosing the name APL and the introduction of the IBM golf-ball typewriter with the replacement typehead, which provided the famous character set to represent programs." ^ Breed, Larry (August 2006). "How We Got to APL\1130". Vector (British APL Association). 22 (3). ISSN 0955-1433. Archived from the original on 2008-05-12. Retrieved 2007-04-02. ^ APL\1130 Manual Archived 2011-02-21 at the Wayback Machine, May 1969 ^ "Remembering APL". Quadibloc.com. Retrieved June 17, 2013. ^ Falkoff, Adin; Iverson, Kenneth E., "APL\360 Users Guide" Archived 2012-02-29 at the Wayback Machine, IBM Research, Thomas J. Watson Research Center, Yorktown Heights, NY, August 1968. ^ "APL\360 Terminal System" Archived 2010-07-11 at the Wayback Machine, IBM Research, Thomas J. Watson Research Center, March 1967. ^ a b Pakin, Sandra (1968). APL\360 Reference Manual. Science Research Associates, Inc. ISBN 978-0-574-16135-2. ^ Falkoff, Adin D.; Iverson, Kenneth E.,The Design of APL, IBM Journal of Research and Development, Volume 17, Number 4, July 1973. "These environmental defined functions were based on the use of still another class of functions—called "I-beams" because of the shape of the symbol used for them—which provide a more general facility for communication between APL programs and the less abstract parts of the system. The I-beam functions were first introduced by the system programmers to allow them to execute System/360 instructions from within APL programs, and thus use APL as a direct aid in their programming activity. The obvious convenience of functions of this kind, which appeared to be part of the language, led to the introduction of the monadic I-beam function for direct use by anyone. Various arguments to this function yielded information about the environment such as available space and time of day." ^ Minker, Jack (January 2004). "Beginning of Computing and Computer Sciences at the University of Maryland" (PDF). Section 2.3.4: University of Maryland. p. 38. Archived from the original (PDF) on June 10, 2011. Retrieved May 23, 2011.CS1 maint: location (link) ^ Stebbens, Alan. "How it all began". Archived from the original on 2016-03-04. Retrieved 2011-05-22. ^ "Xerox APL Language and Operations Reference Manual" (PDF). ^ "SIGAPL". Sigapl.org. Retrieved June 17, 2013. ^ "Fifty Years of BASIC, the Programming Language That Made Computers Personal". time.com. TIME. April 29, 2014. Retrieved April 29, 2018. ^ "MCM Computers M70/M700". old-computers.com. Archived from the original on April 3, 2018. Retrieved April 8, 2018. ^ Stachniak, Stachniak (2011). Inventing the PC: The MCM/70 Story. McGill Queens's University Press. ISBN 978-0-7735-3852-8. ^ Miller, Michael (December 17, 2014). "PCs That Paved the Way for the Altair". PCMagazine. Ziff Davis. Retrieved April 29, 2018. ^ "VideoBrain Family Computer", Popular Science, November 1978, advertisement. ^ "A Look at SuperPet". COMPUTE! The Journal for Progressive Computing. Small System Services Inc. December 1981. Retrieved April 29, 2018. ^ Gates, Bill (January 31, 1976). "An Open Letter to Hobbyists". Homebrew Computer Club Newsletter. Retrieved April 29, 2018. ^ Hui, Roger. "Remembering Ken Iverson". keiapl.org. KEIAPL. Retrieved January 10, 2015. ^ ACM A.M. Turing Award. "Kenneth E. Iverson – Citation". amturing.acm.org. ACM. Retrieved January 10, 2015. ^ ACM SIGPLAN. "APL2: The Early Years". www.sigapl.org. ACM. Retrieved January 10, 2015. ^ Micro APL. "Overview of the APL System". www.microapl.co.uk. Micro APL. Retrieved January 10, 2015. ^ Robertson, Graeme. "A Personal View of APL2010". archive.vector.org.uk. Vector – Journal of the British APL Association. Archived from the original on April 2, 2015. Retrieved January 10, 2015. ^ Rodriguez, P.; Rojas, J.; Alfonseca, M.; Burgos, J. I. (1989). "An Expert System in Chemical Synthesis written in APL2/PC". ACM SIGAPL APL Quote Quad. 19 (4): 299–303. doi:10.1145/75144.75185. S2CID 16876053. ^ IBM. "APL2: A Programming Language for Problem Solving, Visualization and Database Access". www-03.ibm.com. IBM. Retrieved January 10, 2015. ^ a b c d Falkoff, Adin D. (1991). "The IBM family of APL systems". IBM Systems Journal. 30 (4): 416–432. doi:10.1147/sj.304.0416. S2CID 19030940. ^ Pike, Rob (2018-03-25). "Ivy". GoDoc. Archived from the original on 2019-08-13. ^ "Wolfram Language FAQ". Wolfram. Retrieved February 20, 2020. LISP and APL were two early influences ^ Texas Instruments (1977). "TI 745 full page ad: Introducing a New Set of Characters". Computerworld. 11 (27): 32. Retrieved January 20, 2015. ^ Dyalog. "APL Fonts and Keyboards". www.dyalog.com. Dyalog. Retrieved January 19, 2015. ^ Smith, Bob. "NARS2000 Keyboard". www.sudleyplace.com. Bob Smith / NARS2000. Retrieved January 19, 2015. ^ MicroAPL Ltd. "Introduction to APL – APL Symbols". www.microapl.co.uk. MicroAPL Ltd. Retrieved January 8, 2015. ^ Brown, James A.; Hawks, Brent; Trimble, Ray (1993). "Extending the APL character set". ACM SIGAPL APL Quote Quad. 24 (1): 41–46. doi:10.1145/166198.166203. ^ Kromberg, Morten. "Unicode Support for APL". archive.vector.org.uk. Vector, Journal of the British APL Association. Archived from the original on January 20, 2015. Retrieved January 8, 2015. ^ Hsu, Aaron. "Computer Science Outreach and Education with APL". Dyalog, Ltd. Retrieved July 15, 2016. ^ Dyalog, Inc. APL fonts and keyboards. http://www.dyalog.com/apl-font-keyboard.htm ^ a b MicroAPL. "Operators". www.microapl.co.uk. MicroAPL. Retrieved January 12, 2015. ^ Primitive Functions. "Primitive Functions". www.microapl.co.uk/. Retrieved January 1, 2015. ^ Workspace. "The Workspace". www.microapl.co.uk. Retrieved January 1, 2015. ^ "example". Catpad.net. Archived from the original on July 8, 2013. Retrieved June 17, 2013. ^ APL Symbols. "Entering APL Symbols". www.microapl.co.uk. Retrieved January 1, 2015. ^ Dickey, Lee, A list of APL Transliteration Schemes, 1993 ^ Iverson K.E.,"Notation as a Tool of Thought Archived 2013-09-20 at the Wayback Machine", Communications of the ACM, 23: 444-465 (August 1980). ^ Batenburg. "APL Efficiency". www.ekevanbatenburg.nl. Retrieved January 1, 2015. ^ Vaxman. "APL Great Programming" (PDF). www.vaxman.de. Retrieved January 1, 2015. ^ Janko, Wolfgang (May 1987). "Investigation into the efficiency of using APL for the programming of an inference machine". ACM SIGAPL APL Quote Quad. 17 (4): 450–456. doi:10.1145/384282.28372. ^ Borealis. "Why APL?". www.aplborealis.com. Retrieved January 1, 2015. ^ Iverson, Kenneth E. "A Dictionary of APL". www.jsoftware.com. JSoftware; Iverson Estate. Retrieved January 20, 2015. ^ a b c d e f "APL concepts". Microapl.co.uk. Retrieved February 3, 2010. ^ "Nested array theory". Nial.com. Archived from the original on 2011-07-09. Retrieved February 3, 2010. ^ a b c "Programmera i APL", Bohman, Fröberg, Studentlitteratur, ISBN 91-44-13162-3 ^ Iverson, Kenneth E. "APL Syntax and Semantics". www.jsoftware.com. I. P. Sharp Associates. Retrieved January 11, 2015. ^ Dyalog APL/W. "Producing a standalone 'Hello World' program in APL". www.youtube.com. Dyalog-APLtrainer. Retrieved January 11, 2015. ^ MicroAPL. "APL Primitives". www.microapl.co.uk. MicroAPL. Retrieved January 11, 2015. ^ NARS2000. "APL Font – Extra APL Glyphs". wiki.nars2000.org. NARS2000. Retrieved January 11, 2015. ^ Fox, Ralph L. "Systematically Random Numbers". www.sigapl.org. SIGAPL. Retrieved January 11, 2015. ^ a b "2017 Annual Report" (PDF). SimCorp. February 1, 2018. Retrieved April 3, 2018. Sofia is a front-to-back investment management platform like SimCorp Dimension. ... Sofia is based on the APL coding language just like some parts of SimCorp Dimension. ^ Lee, Georges; Lelouche, Ruddy; Meissonnier, Vincent; Zarri, Gian Piero (September 1, 1982). "Using APL in an Artificial Intelligence environment". ACM SIGAPL APL Quote Quad. 13 (1): 183–191. doi:10.1145/390006.802242. Retrieved April 3, 2018. ^ Fordyce, K.; Sullivan, G. (1985). "Artificial Intelligence Development Aids". APL Quote Quad. APL 85 Conf. Proc. (15): 106–113. doi:10.1145/255315.255347. ^ Alfonseca, Manuel (July 1990). "Neural networks in APL". ACM SIGAPL APL Quote Quad. 20 (4): 2–6. doi:10.1145/97811.97816. Retrieved April 3, 2018. ^ Kromberg, Morten. "Robot Programming in APL". www.dyalog.com/. Retrieved January 6, 2015. ^ Holmes, W N (May 1978). "Is APL a Programming Language?". The Computer Journal. 21 (2): 128–131. doi:10.1093/comjnl/21.2.128. ^ Hsu, Aaron (November 18, 2017). "Design Patterns vs. Anti-pattern in APL". functionalconf.com. Retrieved 2018-04-07. ^ Magnenat-Thalmann, Nadia; Thalmann, Daniel (1985). Computer Animation Theory and Practice. Springer-Verlag. p. 38. ISBN 9784431684336. Retrieved April 3, 2018. Digital Effects is another production house that worked on Tron. They used a laser-scanning system to digitize, store and reproduce images. Judson Rosebush, president of Digital Effects, is the primary designer of APL VISION and FORTRAN VISION, two computer animation packages that are currently used. ^ Gutsell, Sam (October 17, 2017). "Stormwind Simulator at Dyalog '16". www.optima-systems.co.uk. Optima Systems. Retrieved April 3, 2018. Stormwind is a [3D boating simulator] that has gained a huge amount of interest in the APL community. ^ "OP-Pohjola ja Tieto hoitivat sovelluksen muutostyöt sujuvalla yhteistyöllä" [Smooth cooperation between OP-Pohjola and Tieto enabled app modification] (PDF). www.tieto.com (in Finnish). Tieto. Retrieved April 3, 2018. [permanent dead link] ^ "Vi idag" [We today]. profdoccare.se (in Swedish). Retrieved April 3, 2018. Through the choice of APL as a technical platform, it is relatively easy to quickly build a solution that can be called a executable prototype (translated from the original) ^ Brenner, Charles. "DNA Identification Technology and APL". dna-view.com. Presentation at the 2005 APL User Conference. Retrieved January 9, 2015. ^ Brenner, Charles. "There's DNA Everywhere – an Opportunity for APL". www.youtube.com. YouTube. Retrieved January 9, 2015. ^ "Tips for golfing in APL". stackexchange.com. Retrieved April 3, 2018. ^ "Awards – 1973 – Lawrence Breed". Association for Computing Machinery. Archived from the original on April 2, 2012. ^ "Awards – 1973 – Richard Lathwell". Association for Computing Machinery. Archived from the original on April 2, 2012. ^ "Awards – 1973 – Roger Moore". Association for Computing Machinery. Archived from the original on April 2, 2012. ^ "IBM 5100". old-computers.com. Archived from the original on April 30, 2018. Retrieved April 8, 2018. ^ "Welcome, IBM, to personal computing". BYTE. December 1975. p. 90. Retrieved April 29, 2018. ^ "Chronology of APL and its Influences on Computer Language Development". www.sigapl.org. ACM. Retrieved April 29, 2018. ^ Larry Breed (August 2006). "How We Got To APL\1130". Vector (British APL Association). 22 (3). ISSN 0955-1433. Archived from the original on May 12, 2008. Retrieved April 29, 2018. ^ Roger Moore (2005). "History of I. P. Sharp Associates Timesharing and Network". Rogerdmoore.ca. Roger Moore. Retrieved March 7, 2018. ^ Blumenthal, Marcia (May 18, 1981). "VAX-11s Acquire APL Processor". Computerworld. Retrieved April 22, 2018. ^ a b c "Kenneth E. Iverson Award for Outstanding Contribution to APL". SIGPLAN Chapter on Array Programming Languages (SIGAPL). Archived from the original on February 26, 2012. ^ "APL2: What's New". ibm.com. ibm. Retrieved April 22, 2018. ^ "Dyalog Ltd website". Retrieved 6 June 2018. ^ "Dyalog at 25" (PDF). Vector Magazine. British APL Association. September 2008. Retrieved April 14, 2018. [permanent dead link] ^ Kromberg, Morten (22 October 2007). "Arrays of Objects" (PDF). Proceedings of the 2007 Symposium on Dynamic Languages: 20. doi:10.1145/1297081.1297087. ISBN 9781595938688. S2CID 18484472. Retrieved 27 August 2018. ^ Scholes, John. "D: A functional subset of Dyalog APL". British APL Asscociation. ^ "Dyalog - Prices and Licences". ^ "2016 Iverson Award Recognises Dyalog's CEO and CXO". Retrieved 6 June 2018. ^ "Nested Arrays Research System – NARS2000: An Experimental APL Interpreter". NARS2000. Sudley Place Software. Retrieved July 10, 2015. ^ "APLX has been withdrawn from commercial sale but can be downloaded free of charge". Microapl.com. Retrieved April 14, 2018. ^ "GNU APL". directory.fsf.org. Free Software Directory. Retrieved September 28, 2013. ^ Stallman, Richard M. "RMS Berättar". Archived from the original on November 26, 2018. Retrieved April 22, 2018. ^ Budd, Timothy (1988). An APL Compiler. Springer-Verlag. ISBN 978-0-387-96643-4. ^ SIGAPL. "What is APL?". www.sigapl.org. SIGAPL. Retrieved January 20, 2015. ^ Ju, Dz-Ching; Ching, Wai-Mee (1991). "Exploitation of APL data parallelism on a shared-memory MIMD machine". Newsletter ACM SIGPLAN Notices. 26 (7): 61–72. doi:10.1145/109625.109633. S2CID 8584353. ^ Hsu, Aaron W.; Bowman, William J. "Revisiting APL in the Modern Era" (PDF). www.cs.princeton.edu. Indiana University / Princeton. Retrieved January 20, 2015. ^ Ching, W.-M.; Ju, D. (1991). "Execution of automatically parallelized APL programs on RP3". IBM Journal of Research & Development. 35 (5/6): 767–777. doi:10.1147/rd.355.0767. Retrieved January 20, 2015. ^ Blelloch, Guy E.; Sabot, Gary W. (1990). "Compiling Collection-Oriented Languages onto Massively Parallel Computers". Journal of Parallel and Distributed Computing. 8 (2): 119–134. CiteSeerX 10.1.1.51.5088. doi:10.1016/0743-7315(90)90087-6. Collection oriented languages include APL, APL2 ^ Jendrsczok, Johannes; Hoffmann, Rolf; Ediger, Patrick; Keller, Jörg. "Implementing APL-like data parallel functions on a GCA machine" (PDF). www.fernuni-hagen.de. Fernuni-Hagen.De. pp. 1–6. Archived from the original (PDF) on January 22, 2015. Retrieved January 22, 2015. GCA – Global Cellular Automation. Inherently massively parallel. 'APL has been chosen because of the ability to express matrix and vector' structures. ^ Brenner of IBM T.J.Watson Research Center, Norman (1984). "VLSI circuit design using APL with fortran subroutines". Proceedings of the international conference on APL - APL '84. ACM SIGAPL APL Quote Quad. 14. ACM SIGAPL. pp. 77–79. doi:10.1145/800058.801079. ISBN 978-0897911375. S2CID 30863491. APL for interactiveness and ease of coding ^ Gamble, D.J.; Hobson, R.F. (1989). "Towards a graphics/Procedural environment for constructing VLSI module generators". Conference Proceeding IEEE Pacific Rim Conference on Communications, Computers and Signal Processing. pp. 606–611. doi:10.1109/PACRIM.1989.48437. S2CID 7921438. VLSI module generators are described. APL and C, as examples of interpreted and compiled languages, can be interfaced to an advanced graphics display ^ Lee, Robert S. (1983). "Two Implementations of APL". PC Magazine. 2 (5): 379. Retrieved January 20, 2015. ^ MARTHA and LLAMA. "The APL Computer Language". marthallama.org. MarthaLlama. Retrieved January 20, 2015. ^ Metzger, Robert; Wen, Zhaofang (2000). Automatic Algorithm Recognition and Replacement: A New Approach to Program Optimization. The MIT press. ISBN 9780262133685. Retrieved May 6, 2018. ^ Snyder, Lawrence (1982). "Recognition and Selection of Idioms for Code Optimization". Acta Informatica. 17 (3). doi:10.1007/BF00264357. S2CID 8369972. ^ Cheng, Feng Sheng (1981). "Idiom matching: an optimization technique for an APL compiler". Iowa State University. Retrieved May 6, 2018. Cite journal requires |journal= (help) ^ "Idiom Recognition". dyalog.com. Retrieved May 6, 2018. ^ Strawn, George O. (March 1977). "Does APL really need run‐time parsing?". Journal of Software: Practice and Experience. 7 (2): 193–200. doi:10.1002/spe.4380070207. S2CID 1463012. ^ a b "Compiler User Guide" (PDF). www.dyalog.com. Dyalog Ltd. Retrieved May 7, 2018. ^ a b Driscoll Jr., Graham C.; Orth, Donald L. (November 1986). "Compiling APL: The Yorktown APL Translator". IBM Journal of Research and Development. 30 (6): 583–593. doi:10.1147/rd.306.0583. S2CID 2299699. ^ "Chronology of APL". www.sigapl.org. ACM. Retrieved May 7, 2018. ^ Wai-Mee, Ching (November 1986). "Program Analysis and Code Generation in an APL/370 Compiler". IBM Journal of Research and Development. 30 (6): 594–602. doi:10.1147/rd.306.0594. S2CID 17306407. ^ "The APEX Project". ^ "APL Compiler (message from Jim Weigang to the comp.lang.apl Newsgroup)". Apr 5, 1994. Further reading[edit] An APL Machine (1970 Stanford doctoral dissertation by Philip Abrams) A Personal History Of APL (1982 article by Michael S. Montalbano) McIntyre, Donald B. (1991). "Language as an intellectual tool: From hieroglyphics to APL" (PDF). IBM Systems Journal. 30 (4): 554–581. doi:10.1147/sj.304.0554. Archived from the original (PDF) on May 4, 2006. Iverson, Kenneth E. (1991). "A Personal view of APL" (PDF). IBM Systems Journal. 30 (4): 582–593. doi:10.1147/sj.304.0582. Archived from the original (PDF) on February 27, 2008. A Programming Language by Kenneth E. Iverson APL in Exposition by Kenneth E. Iverson Brooks, Frederick P.; Kenneth Iverson (1965). Automatic Data Processing, System/360 Edition. ISBN 0-471-10605-4. Askoolum, Ajay (August 2006). System Building with APL + Win. Wiley. ISBN 978-0-470-03020-2. Falkoff, Adin D.; Iverson, Kenneth E.; Sussenguth, Edward H. (1964). "A Formal Description of System/360" (PDF). IBM Systems Journal. 3 (2): 198–261. doi:10.1147/sj.32.0198. Archived from the original (PDF) on February 27, 2008. History of Programming Languages, chapter 14[clarification needed] Banon, Gerald Jean Francis (1989). Bases da Computacao Grafica. Rio de Janeiro: Campus. p. 141. LePage, Wilbur R. (1978). Applied A.P.L. Programming. Prentice Hall. Mougin, Philippe; Ducasse, Stephane (November 2003). "OOPAL: Integrating Array Programming in ObjectOriented Programming" (PDF). Proceeding OOPSLA '03 Proceedings of the 18th Annual ACM SIGPLAN Conference on Object-oriented Programing, Systems, Languages, and Applications. 38 (11): 65–77. doi:10.1145/949343.949312. Archived from the original (PDF) on November 14, 2006. Dyalog Limited (September 2006). An Introduction to Object Oriented Programming For APL Programmers (PDF). Dyalog Limited. Archived from the original (PDF) on October 4, 2007. Shustek, Len (October 10, 2012). "The APL Programming Language Source Code". Computer History Museum (CHM). Archived from the original on September 6, 2017. Retrieved September 6, 2017. Svoboda, Antonín; White, Donnamaie E. (2016) [2012, 1985, 1979-08-01]. Advanced Logical Circuit Design Techniques (PDF) (retyped electronic reissue ed.). Garland STPM Press (original issue) / WhitePubs Enterprises, Inc. (reissue). ISBN 978-0-8240-7014-4. LCCN 78-31384. Archived (PDF) from the original on 2017-04-14. Retrieved 2017-04-15. [1] [2] Video[edit] The Origins of APL - a 1974 talk show style interview with the original developers of APL. APL demonstration - a 1975 live demonstration of APL by Professor Bob Spence, Imperial College London. Conway's Game Of Life in APL - a 2009 tutorial by John Scholes of Dyalog Ltd. which implements Conway's Game of Life in a single line of APL. 50 Years of APL - a 2009 introduction to APL by Graeme Robertson. External links[edit] This article's use of external links may not follow Wikipedia's policies or guidelines. Please improve this article by removing excessive or inappropriate external links, and converting useful links where appropriate into footnote references. (August 2020) (Learn how and when to remove this template message) Wikimedia Commons has media related to APL (programming language). Online resources[edit] TryAPL.org, an online APL primer APL Wiki APL at Curlie APL2C, a source of links to APL compilers Providers[edit] IBM APL2 Dyalog APL APLX APL2000 NARS2000 GNU APL OpenAPL User groups and societies[edit] Finland: Finnish APL Association (FinnAPL) France: APL et J Germany: APL-Germany e.V. Japan: Japan APL Association (JAPLA) Sweden: Swedish APL User Group (SwedAPL) Switzerland: Swiss APL User Group (SAUG) United Kingdom: The British APL Association United States: ACM SIGPLAN chapter on Array Programming Languages (SIGAPL) v t e APL programming language Features APL syntax and symbols Direct function (dfn) EBCDIC code page Iverson bracket Rank Shared Variables Implementations Major Dyalog APL IBM APL2 APL2000 SHARP APL APLX NARS2000 Dialects A+ APLNext ELI GNU APL J K, Q; kdb+ LYaPAS Polymorphic Programming Language (PPL) Community Professional associations Association for Computing Machinery: SIGAPL British APL Association Organizations Business Analogic Corporation CompuServe Digital Equipment Corporation (DEC) DNA Systems Dyalog Ltd. IBM I. P. Sharp Associates Kx Systems Micro Computer Machines (MCM) Science Research Associates Scientific Time Sharing Corporation (STSC) Soliton Incorporated Telecompute Integrated Systems, Inc. Time Sharing Resources (TSR) Education Carnegie Mellon University (CMU) University of Maryland People Phil Abrams Bob Bernecky Larry Breed Charles Brenner Fred Brooks Jim Brown Adin Falkoff Patrick E. Hagerty Herbert Hellerman Roger Hui Kenneth E. Iverson Dick Lathwell Eugene McDonnell Robert Metzger Roger Moore Alan Perlis John Scholes J. Henri Schueler Bob Smith Edward H. Sussenguth Jr. Arthur Whitney William Yerazunis Rodnay Zaks Other Iverson Award Category Commons v t e Programming languages Comparison Timeline History ALGOL APL Assembly BASIC C C++ C# COBOL Go Erlang Forth Fortran Haskell Java JavaScript Kotlin Lisp ML Objective-C Pascal Perl PHP Prolog Python R Ruby Rust SQL Shell Simula Smalltalk Swift more... Category Lists: Alphabetical Categorical Generational Non-English-based v t e ISO standards by standard number List of ISO standards / ISO romanizations / IEC standards 1–9999 1 2 3 4 5 6 7 9 16 17 31 -0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 128 216 217 226 228 233 259 269 302 306 361 428 500 518 519 639 -1 -2 -3 -5 -6 646 657 668 690 704 732 764 838 843 860 898 965 999 1000 1004 1007 1073-1 1155 1413 1538 1629 1745 1989 2014 2015 2022 2033 2047 2108 2145 2146 2240 2281 2533 2709 2711 2720 2788 2848 2852 3029 3103 3166 -1 -2 -3 3297 3307 3601 3602 3864 3901 3950 3977 4031 4157 4165 4217 4909 5218 5426 5427 5428 5725 5775 5776 5800 5807 5964 6166 6344 6346 6385 6425 6429 6438 6523 6709 6943 7001 7002 7010 7027 7064 7098 7185 7200 7498 -1 7637 7736 7810 7811 7812 7813 7816 7942 8000 8093 8178 8217 8373 8501-1 8571 8583 8601 8613 8632 8651 8652 8691 8805/8806 8807 8820-5 8859 -1 -2 -3 -4 -5 -6 -7 -8 -8-I -9 -10 -11 -12 -13 -14 -15 -16 8879 9000/9001 9036 9075 9126 9141 9227 9241 9293 9314 9362 9407 9506 9529 9564 9592/9593 9594 9660 9797-1 9897 9899 9945 9984 9985 9995 10000–19999 10005 10006 10007 10116 10118-3 10160 10161 10165 10179 10206 10218 10303 -11 -21 -22 -28 -238 10383 10487 10585 10589 10646 10664 10746 10861 10957 10962 10967 11073 11170 11179 11404 11544 11783 11784 11785 11801 11889 11898 11940 (-2) 11941 11941 (TR) 11992 12006 12182 12207 12234-2 13211 -1 -2 13216 13250 13399 13406-2 13450 13485 13490 13567 13568 13584 13616 14000 14031 14224 14289 14396 14443 14496 -2 -3 -6 -10 -11 -12 -14 -17 -20 14644 14649 14651 14698 14750 14764 14882 14971 15022 15189 15288 15291 15292 15398 15408 15444 -3 15445 15438 15504 15511 15686 15693 15706 -2 15707 15897 15919 15924 15926 15926 WIP 15930 16023 16262 16355-1 16612-2 16750 16949 (TS) 17024 17025 17100 17203 17369 17442 17799 18000 18004 18014 18245 18629 18916 19005 19011 19092 -1 -2 19114 19115 19125 19136 19407 19439 19500 19501 19502 19503 19505 19506 19507 19508 19509 19510 19600 19752 19757 19770 19775-1 19794-5 19831 20000+ 20000 20022 20121 20400 21000 21047 21500 21827 22000 22300 22395 23270 23271 23360 24517 24613 24617 24707 25178 25964 26000 26262 26300 26324 27000 series 27000 27001 27002 27005 27006 27729 28000 29110 29148 29199-2 29500 30170 31000 32000 37001 38500 40500 42010 45001 50001 55000 80000 -1 Category v t e List of International Electrotechnical Commission standards IEC standards IEC 60027 IEC 60034 IEC 60038 IEC 60062 IEC 60063 IEC 60068 IEC 60112 IEC 60228 IEC 60269 IEC 60297 IEC 60309 IEC 60320 IEC 60364 IEC 60446 IEC 60559 IEC 60601 IEC 60870 IEC 60870-5 IEC 60870-6 IEC 60906-1 IEC 60908 IEC 60929 IEC 60958 AES3 S/PDIF IEC 61030 IEC 61131 IEC 61131-3 IEC 61131-9 IEC 61158 IEC 61162 IEC 61334 IEC 61346 IEC 61355 IEC 61360 IEC 61400 IEC 61499 IEC 61508 IEC 61511 IEC 61784 IEC 61850 IEC 61851 IEC 61883 IEC 61960 IEC 61968 IEC 61970 IEC 62014-4 IEC 62026 IEC 62056 IEC 62061 IEC 62196 IEC 62262 IEC 62264 IEC 62304 IEC 62325 IEC 62351 IEC 62365 IEC 62366 IEC 62379 IEC 62386 IEC 62455 IEC 62680 IEC 62682 IEC 62700 IEC 63110 IEC 63119 ISO/IEC standards ISO/IEC 646 ISO/IEC 2022 ISO/IEC 4909 ISO/IEC 5218 ISO/IEC 6429 ISO/IEC 6523 ISO/IEC 7810 ISO/IEC 7811 ISO/IEC 7812 ISO/IEC 7813 ISO/IEC 7816 ISO/IEC 7942 ISO/IEC 8613 ISO/IEC 8632 ISO/IEC 8652 ISO/IEC 8859 ISO/IEC 9126 ISO/IEC 9293 ISO/IEC 9592 ISO/IEC 9593 ISO/IEC 9899 ISO/IEC 9945 ISO/IEC 9995 ISO/IEC 10021 ISO/IEC 10116 ISO/IEC 10165 ISO/IEC 10179 ISO/IEC 10646 ISO/IEC 10967 ISO/IEC 11172 ISO/IEC 11179 ISO/IEC 11404 ISO/IEC 11544 ISO/IEC 11801 ISO/IEC 12207 ISO/IEC 13250 ISO/IEC 13346 ISO/IEC 13522-5 ISO/IEC 13568 ISO/IEC 13818 ISO/IEC 14443 ISO/IEC 14496 ISO/IEC 14882 ISO/IEC 15288 ISO/IEC 15291 ISO/IEC 15408 ISO/IEC 15444 ISO/IEC 15445 ISO/IEC 15504 ISO/IEC 15511 ISO/IEC 15693 ISO/IEC 15897 ISO/IEC 15938 ISO/IEC 16262 ISO/IEC 17024 ISO/IEC 17025 ISO/IEC 18000 ISO/IEC 18004 ISO/IEC 18014 ISO/IEC 19752 ISO/IEC 19757 ISO/IEC 19770 ISO/IEC 19788 ISO/IEC 20000 ISO/IEC 21000 ISO/IEC 21827 ISO/IEC 23000 ISO/IEC 23003 ISO/IEC 23008 ISO/IEC 23270 ISO/IEC 23360 ISO/IEC 24707 ISO/IEC 24727 ISO/IEC 24744 ISO/IEC 24752 ISO/IEC 26300 ISO/IEC 27000 ISO/IEC 27000-series ISO/IEC 27002 ISO/IEC 27040 ISO/IEC 29119 ISO/IEC 33001 ISO/IEC 38500 ISO/IEC 42010 ISO/IEC 80000 Related International Electrotechnical Commission Retrieved from "https://en.wikipedia.org/w/index.php?title=APL_(programming_language)&oldid=991418181" Categories: .NET programming languages APL programming language family Array programming languages Command shells Dynamic programming languages Dynamically typed programming languages Functional languages IBM software Programming languages created in 1964 Programming languages with an ISO standard Programming languages Hidden categories: Webarchive template wayback links CS1 maint: location CS1: long volume value CS1 Finnish-language sources (fi) All articles with dead external links Articles with dead external links from August 2019 Articles with permanently dead external links CS1 Swedish-language sources (sv) Articles with dead external links from April 2019 CS1 errors: missing periodical Articles with short description Short description matches Wikidata All articles with unsourced statements Articles with unsourced statements from September 2020 Articles with unsourced statements from April 2010 Articles with unsourced statements from February 2020 Articles with unsourced statements from July 2015 All articles with specifically marked weasel-worded phrases Articles with specifically marked weasel-worded phrases from March 2015 Articles with unsourced statements from December 2019 Articles containing potentially dated statements from 2018 All articles containing potentially dated statements Wikipedia articles needing clarification from June 2010 Wikipedia external links cleanup from August 2020 Wikipedia spam cleanup from August 2020 Commons category link is on Wikidata Articles with Curlie links Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikiquote Languages العربية Aragonés Azərbaycanca Беларуская Български Català Čeština Dansk Deutsch Eesti Español Esperanto فارسی Français Gaeilge Galego 한국어 Italiano עברית Latina Magyar मराठी Bahasa Melayu Nederlands 日本語 Norsk bokmål ਪੰਜਾਬੀ Polski Português Română Русский Slovenčina Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska Тоҷикӣ Türkçe Українська Tiếng Việt 中文 Edit links This page was last edited on 29 November 2020, at 23:34 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement