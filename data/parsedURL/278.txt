Graphics Device Interface - Wikipedia Graphics Device Interface From Wikipedia, the free encyclopedia Jump to navigation Jump to search The Graphics Device Interface (GDI) is a Microsoft Windows application programming interface and core operating system component responsible for representing graphical objects and transmitting them to output devices such as monitors and printers. GDI is responsible for tasks such as drawing lines and curves, rendering fonts and handling palettes. It is not directly responsible for drawing windows, menus, etc.; that task is reserved for the user subsystem, which resides in user32.dll and is built atop GDI. Other systems have components that are similar to GDI, for example macOS' Quartz and X Window System's Xlib/XCB. GDI's most significant advantages over more direct methods of accessing the hardware are perhaps its scaling capabilities and its abstract representation of target devices. Using GDI, it is very easy to draw on multiple devices, such as a screen and a printer, and expect proper reproduction in each case. This capability is at the center of most "What You See Is What You Get" applications for Microsoft Windows. Simple games that do not require fast graphics rendering may use GDI. However, GDI is relatively hard to use for advanced animation, and lacks a notion for synchronizing with individual video frames in the video card, lacks hardware rasterization for 3D, etc. Modern games usually use DirectX, Vulkan, or OpenGL instead, which let programmers exploit the features of modern hardware. Contents 1 Technical details 2 Version history 2.1 Early versions 2.2 Windows XP 2.3 Windows Vista 2.4 Windows 7 3 GDI printers 4 Limitations 5 Successor: Direct2D and DirectWrite 6 See also 7 Notes and references 8 External links Technical details[edit] A Device Context (DC) is used to define the attributes of text and images that are output to the screen or printer. The actual context is maintained by GDI. A handle to the Device Context (HDC) is obtained before output is written and then released after elements have been written.GDI uses Bresenham's line drawing algorithm to draw aliased lines.[1] Version history[edit] Early versions[edit] GDI was present in the initial release of Windows. MS-DOS programs had hitherto manipulated the graphics hardware using software interrupts (sometimes via the Video BIOS) and by manipulating video memory directly. Code written in this way expects that it is the only user of the video memory, which was not tenable on a windowed system like Microsoft Windows, where multiple applications would want to write (to their own subwindows) concurrently. BYTE in December 1983 discussed Microsoft's plans for a system to output graphics to both printers and monitors with the same code in the forthcoming first release of Windows.[2] Windows XP[edit] With the introduction of Windows XP, GDI was complemented by the C++-based GDI+ subsystem. GDI+ adds anti-aliased 2D graphics, floating point coordinates, gradient shading, more complex path management, intrinsic support for modern graphics-file formats like JPEG and PNG, and support for composition of affine transformations in the 2D view pipeline. GDI+ uses RGBA values to represent color. Use of these features is apparent in Windows XP's user interface and several of its applications such as Microsoft Paint, Windows Picture and Fax Viewer, Photo Printing Wizard, and My Pictures Slideshow screensaver, and their presence in the basic graphics layer greatly simplifies implementations of vector-graphics systems such as Flash or SVG. GDI+ is included with all versions of Windows from Windows XP. The GDI+ dynamic library can also be shipped with an application and used under older versions of Windows from Windows 98 and Windows NT 4.0 onwards.[3] Because of the additional text processing and resolution independence capabilities in GDI+, text rendering is performed by the CPU[4] and it is nearly an order of magnitude slower than in hardware accelerated GDI.[5] Chris Jackson published some tests indicating that a piece of text rendering code he had written could render 99,000 glyphs per second in GDI, but the same code using GDI+ rendered 16,600 glyphs per second. The Microsoft .NET class library provides a managed interface for GDI+ via the System.Drawing namespace. GDI+ is similar (in purpose and structure) to Apple's QuickDraw GX subsystem, and the open-source libart and Cairo libraries. Windows Vista[edit] In Windows Vista, all Windows applications including GDI and GDI+ applications run in the new compositing engine, Desktop Window Manager (DWM) which is built atop the Windows Display Driver Model. GDI rendering is implemented with the Canonical Display Driver (cdd.dll), which draws into system memory surfaces which are then redirected through DWM, and GDI is no longer hardware-accelerated by the video card driver.[6][7][8] Due to the nature of the composition operations, window moves can be faster or more responsive because underlying content does not need to be re-rendered by the application.[7] Windows 7[edit] Windows 7 includes GDI hardware acceleration for blitting operations in the Windows Display Driver Model v1.1. This improves GDI performance of the Canonical Display Driver and allows DWM engine to use local video memory for compositing, thereby reducing system memory footprint and increasing the performance of graphics operations. Most primitive GDI operations are still not hardware-accelerated, unlike Direct2D. As of November 2009, both AMD and Nvidia have released WDDM v1.1 compatible video drivers. GDI+ continues to rely on software rendering in Windows 7.[9] GDI printers[edit] This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed. (August 2012) (Learn how and when to remove this template message) A GDI printer or Winprinter (analogous to a Winmodem) is a printer designed to accept output from a host computer running the GDI under Windows. The host computer does all print processing: the GDI software renders a page as a bitmap which is sent to a software printer driver, usually supplied by the printer manufacturer, for processing for the particular printer, and then to the printer.[10][11] The combination of the GDI and the driver is bidirectional; they receive information from the printer such as whether it is ready to print, if it is out of paper or ink, and so on. Non-GDI printers require hardware, firmware, and memory for page rendering; a GDI printer uses the host computer for this, making it cheaper to manufacture than a similar non-GDI printer. Some manufacturers produce essentially the same printer in a version compatible with a printer control language such as PCL or PostScript, and a cheaper GDI-only version. In most cases only the very lowest-cost models in any given manufacturer's range support only GDI. A printer with its own control language can accept input from any device with a suitable driver; a GDI printer requires a PC running Windows, and is not compatible with other hardware and operating systems. In general GDI printers are not compatible with hardware print servers, although some servers have built-in processing capability making them compatible with specified GDI printers. GDI printers can be made available to computers on a network if they are connected as shared printers on a computer which is on and running Windows. Some "generic" GDI drivers such as pnm2ppa have been written which make some GDI printers compatible with non-Windows operating systems such as FreeBSD, but there is no guarantee that any particular GDI printer will be supported.[10] In order to allow simpler creation of drivers for Winprinters, the Microsoft Universal Printer Driver was created. This allows printer vendors to write Generic Printer Description (GPD) "minidrivers", which describe the printer's capabilities and command set in plaintext, rather than having to do kernel mode driver development. Limitations[edit] Each time a window is opened, it consumes GDI objects. As the complexity of the window increases, with additional features such as buttons and images, its GDI object usage also increases. When too many objects are in use, Windows is unable to draw any more GDI objects, leading to misbehaving software and frozen and unresponsive program operation.[12] Many applications are also incorrectly coded and fail to release GDI objects after use, which further adds to the problem.[13] The total available GDI objects varies from one version of Windows to the next: Windows 95, 98, and Millennium had a limit of 1,200 total objects; Windows 2000 has a limit of 16,384 objects; and Windows XP, Vista, and Windows 7 have a configurable limit (via the registry) that defaults to 10,000 objects per process (but a theoretical maximum of 65,536 for the entire session).[14][15] Windows 8 and 8.1 further increase the GDI object limit to 65,536 per user logon session. Earlier versions of Windows such as Windows 3.1 and Windows 98 included a Resource Meter program to allow the user to monitor how much of the total system GDI resources were in use. Unfortunately, this resource meter consumed GDI objects itself. Later versions such as Windows 2000 and Windows XP can report GDI object usage for each program in the Task Manager, but they cannot tell the user the total GDI capacity available. Overflowing GDI capacity can affect Windows itself, preventing new windows from opening, menus from displaying, and alert boxes from appearing. The situation can be difficult to clear and can potentially require a forced hard-reset of the system, since it prevents core system programs from functioning. In Windows 8 and 8.1, forced logoffs occur as a result of GDI capacity overflow instead of a hard reboot. For example, forcing a frozen process to end using the Task Manager normally makes an "Are you sure" alert window appear. With no free GDI, Windows beeps an error and the alert choice does not appear, so the GDI-overflowing processes cannot be terminated (unless the user uses taskkill command). Successor: Direct2D and DirectWrite[edit] Direct2D and DirectWrite were designed to replace GDI/GDI+ and Uniscribe, respectively, for screen-oriented rendering and were shipped with Windows 7 and Windows Server 2008 R2, as well as Windows Vista and Windows Server 2008 (with Platform Update installed). For WPF/UWP based-Application Win2D is a GDI like Class Library developed by Microsoft that can be downloaded inside Visual Studio using NuGet. Win2D is an easy-to-use Windows Runtime API for immediate mode 2D graphics rendering with GPU acceleration.[16][17] See also[edit] WinG DirectX XML Paper Specification Direct2D DirectWrite Uniscribe Microsoft Windows library files Notes and references[edit] ^ Comparing Direct2D and GDI Hardware Acceleration. https://msdn.microsoft.com/en-us/library/windows/desktop/ff729480(v=vs.85).aspx ^ Butler, John (December 1983). "Device-Independent Graphics Output for Microsoft Windows". BYTE. p. 49. Retrieved 20 October 2013. ^ GDI+ ^ "2D Drawing APIs in Windows -". DirectX Developer Blog. MSDN Blogs. May 12, 2009. Retrieved July 19, 2012. ^ Jackson, Chris. "GDI vs. GDI+ Text Rendering Performance". Chris Jackson's Semantic Consonance. Microsoft. ^ MSDN: Comparing Direct2D and GDI Hardware Acceleration ^ a b GDI is not hardware accelerated in Windows Vista ^ Layered windows...SW is sometimes faster than HW. Avalite on MSDN Blogs. ^ Thomas Olsen (October 29, 2008). "Introducing the Microsoft Direct2D API". ^ a b "linuxprinting.org about GDI printer". The Linux Foundation. Archived from the original on September 14, 2007. Retrieved September 22, 2007. ^ "Windows-only printers". Linux Documentation Project. Retrieved October 29, 2019. ^ Microsoft Knowledgebase article 838283 - Desktop application menus are improperly displayed if a process exceeds its GDI object quota in Windows XP or in Windows 2000 http://support.microsoft.com/kb/838283 ^ Microsoft Developer Network Blog - GDI leak in Outlook 2007 causes problems when GDI usage reaches 10,000 objects http://blogs.msdn.com/rgregg/archive/2007/09/03/outlook-2007-gdi-leak-hotfix.aspx ^ Microsoft Developer Network - GDI Object limits http://msdn.microsoft.com/en-us/library/ms724291(VS.85).aspx ^ Microsoft Knowledge base Article 894500 - .NET programs designed on newer NT operating systems may malfunction on older Win 95 / Win 98 / Win ME due to lower GDI usage limits http://support.microsoft.com/kb/894500 ^ Win2D GitHub Docs ^ Win2D Example Gallery External links[edit] Microsoft's GDI+ page Bob Powell's GDI+ FAQ list MSDN article on GDI overview Microsoft Security Bulletin MS04-028 F-Secure: Critical vulnerability in MS Windows may escalate the virus threat IGDI+ - Delphi Open Source GDI+ library. v t e Microsoft Windows components Management tools App Installer Command Prompt Control Panel Applets Device Manager Disk Cleanup Disk Defragmenter Driver Verifier DxDiag Event Viewer IExpress Management Console Netsh Performance Monitor Recovery Console Resource Monitor Settings Sysprep System Configuration System File Checker System Information System Policy Editor System Restore Task Manager Windows Error Reporting Windows Ink Windows Installer PowerShell Windows Update Windows Insider WinRE WMI Apps 3D Viewer Alarms & Clock Calculator Calendar Camera Character Map Cortana Edge Fax and Scan Feedback Hub File Manager Get Help Groove Music Magnifier Mail Maps Messaging Movies & TV Mobility Center Money News Narrator Notepad OneDrive OneNote Paint Paint 3D Pay People Phone Companion Photos Quick Assist Snip & Sketch Snipping Tool Speech Recognition Skype Sports Sticky Notes Store Tips Voice Recorder Weather Windows To Go Windows Story Remix WordPad Xbox Console Companion Your Phone Shell Action Center Aero AutoPlay AutoRun ClearType Explorer Search Indexing Service IFilter Saved search Namespace Special folder Start menu Taskbar Task View Windows Spotlight Windows XP visual styles Services Service Control Manager BITS CLFS Multimedia Class Scheduler Shadow Copy Task Scheduler Error Reporting Wireless Zero Configuration File systems CDFS DFS exFAT IFS FAT NTFS Hard link Junction point Mount Point Reparse point Symbolic link TxF EFS ReFS UDF Server Domains Active Directory DNS Group Policy Roaming user profiles Folder redirection Distributed Transaction Coordinator MSMQ Windows Media Services Rights Management Services IIS Remote Desktop Services WSUS SharePoint Network Access Protection PWS DFS Replication Remote Differential Compression Print Services for UNIX Remote Installation Services Windows Deployment Services System Resource Manager Hyper-V Server Core Architecture Architecture of Windows NT Startup process NT Vista CSRSS Desktop Window Manager Portable Executable EXE DLL Enhanced Write Filter Graphics Device Interface hal.dll I/O request packet Imaging Format Kernel Transaction Manager Library files Logical Disk Manager LSASS MinWin NTLDR Ntoskrnl.exe Object Manager Open XML Paper Specification Registry Resource Protection Security Account Manager Server Message Block Shadow Copy SMSS System Idle Process USER WHEA Win32 console Winlogon WinUSB Security Security and Maintenance AppLocker BitLocker Credential Guard Data Execution Prevention Family Safety Kernel Patch Protection Mandatory Integrity Control Protected Media Path User Account Control User Interface Privilege Isolation Windows Defender Windows Firewall Compatibility COMMAND.COM Virtual DOS machine Windows on Windows WoW64 Windows Subsystem for Linux API Active Scripting WSH VBScript JScript COM ActiveX ActiveX Document COM Structured storage DCOM OLE OLE Automation Transaction Server DirectX .NET Framework Universal Windows Platform Windows Mixed Reality Windows Runtime WinUSB Games Solitaire Collection Discontinued Games 3D Pinball Chess Titans FreeCell Hearts InkBall Hold 'Em Purble Place Reversi Spider Solitaire Solitaire Tinker Apps ActiveMovie Anytime Upgrade Address Book Backup and Restore Cardfile CardSpace CD Player Contacts Desktop Gadgets Diagnostics DriveSpace DVD Maker Easy Transfer Fax Food & Drink Help and Support Center Health & Fitness HyperTerminal Journal Media Center Meeting Space Messaging Messenger Mobile Device Center Movie Maker MSN Dial-up NetMeeting NTBackup Outlook Express Travel Photo Gallery Photo Viewer Program Manager Steps Recorder Syskey WinHelp Write Others ScanDisk File Protection Media Control Interface Next-Generation Secure Computing Base POSIX subsystem HPFS Interix Video for Windows Windows SideShow Windows Services for UNIX Windows System Assessment Tool WinFS Spun off to Microsoft Store DVD Player Hover! Mahjong Minesweeper Deprecated Internet Explorer Media Player v t e Microsoft APIs and frameworks Graphics Desktop Window Manager Direct2D Direct3D D3D (extensions) GDI / GDI+ WPF Silverlight WinRT XAML Windows Color System Windows Image Acquisition Windows Imaging Component DirectX Graphics Infrastructure (DXGI) Windows Advanced Rasterization Platform WinG Audio DirectMusic DirectSound DirectX plugin XACT Speech API XAudio2 Multimedia DirectX Media Objects Video Acceleration Xinput DirectInput DirectShow Image Mastering API Managed DirectX Media Foundation XNA Windows Media Video for Windows Web MSHTML RSS Platform JScript VBScript BHO XDR SideBar Gadgets TypeScript Data access Data Access Components (MDAC) ADO ADO.NET ODBC OLE DB Extensible Storage Engine Entity Framework Sync Framework Jet Engine MSXML OPC Networking Winsock LSP Winsock Kernel Filtering Platform NDIS Windows Rally BITS P2P API MSMQ MS MPI DirectPlay Communication Messaging API Telephony API WCF Administration and management Win32 console Windows Script Host WMI (extensions) PowerShell Task Scheduler Offline Files Shadow Copy Windows Installer Error Reporting Event Log Common Log File System Component model COM COM+ ActiveX Distributed Component Object Model .NET Framework Libraries Framework Class Library Microsoft Foundation Classes (MFC) Active Template Library (ATL) Windows Template Library (WTL) Device drivers WDM WDF KMDF UMDF WDDM NDIS UAA BDA VxD Security Crypto API CAPICOM Windows CardSpace Data Protection API Security Support Provider Interface (SSPI) .NET ASP.NET ADO.NET Remoting Silverlight TPL WCF WCS WPF WF Software factories EFx Factory Enterprise Library Composite UI CCF CSF IPC MSRPC Dynamic Data Exchange (DDE) Remoting WCF Accessibility Active Accessibility UI Automation Text and multilingual support DirectWrite Text Services Framework Text Object Model Input method editor Language Interface Pack Multilingual User Interface Uniscribe Retrieved from "https://en.wikipedia.org/w/index.php?title=Graphics_Device_Interface&oldid=988323914" Categories: Graphics libraries Microsoft application programming interfaces Windows components Hidden categories: Articles needing additional references from August 2012 All articles needing additional references Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikibooks Languages Català Čeština Deutsch Español فارسی Français 한국어 Italiano Lietuvių 日本語 Polski Português Русский Simple English Slovenčina Српски / srpski Українська 中文 Edit links This page was last edited on 12 November 2020, at 13:46 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement