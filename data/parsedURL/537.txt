Sequential access - Wikipedia Sequential access From Wikipedia, the free encyclopedia Jump to navigation Jump to search Sequential access compared to random access Sequential access is a term describing a group of elements (such as data in a memory array or a disk file or on magnetic tape data storage) being accessed in a predetermined, ordered sequence. It is the opposite of random access, the ability to access an arbitrary element of a sequence as easily and efficiently as any other at any time. Sequential access is sometimes the only way of accessing the data, for example if it is on a tape. It may also be the access method of choice, for example if all that is wanted is to process a sequence of data elements in order.[1] Definition[edit] There is no consistent definition in computer science of sequential access or sequentiality.[2][3][4][5][6][7][8][9] In fact, different sequentiality definitions can lead to different sequentiality quantification results. In spatial dimension, request size, strided distance, backward accesses, re-accesses can affect sequentiality. For temporal sequentiality, characteristics such as multi-stream and inter-arrival time threshold has impact on the definition of sequentiality.[10] In data structures, a data structure is said to have sequential access if one can only visit the values it contains in one particular order. The canonical example is the linked list. Indexing into a list that has sequential access requires O(n) time, where n is the index. As a result, many algorithms such as quicksort and binary search degenerate into bad algorithms that are even less efficient than their naive alternatives; these algorithms are impractical without random access. On the other hand, some algorithms, typically those that do not have index, require only sequential access, such as mergesort, and face no penalty. See also[edit] Direct access storage device Queued sequential access method References[edit] ^ Random and Sequential Data Access, Microsoft TechNet ^ Irfan Ahmad, Easy and Efficient Disk I/O Workload Characterization in VMware ESX Server, IISWC, 2007. ^ Eric Anderson, Capture, Conversion, and Analysis of an Intense NFS Workload, FAST, 2009. ^ Yanpei Chen et al. Design Implications for Enterprise Storage Systems via Multi-dimensional Trace Analysis. SOSP. 2011 ^ Andrew Leung et al. Measurement and Analysis of Large-scale Network File System Workloads. USENIX ATC. 2008 ^ Frank Schmuck and Roger Haskin, GPFS: A Shared-Disk File System for Large Computing Clusters, FAST. 2002 ^ Alan Smith. Sequentiality and Prefetching in Database Systems. ACM TOS ^ Hyong Shim et al. Characterization of Incremental Data Changes for Efficient Data Protection. USENIX ATC. 2013. ^ Avishay Traeger et al. A Nine Year Study of File System and Storage Benchmarking. ACM TOS. 2007. ^ Cheng Li et al. Assert(!Defined(Sequential I/O)). HotStorage. 2014 Retrieved from "https://en.wikipedia.org/w/index.php?title=Sequential_access&oldid=983442937" Categories: Computer memory Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version Languages العربية Azərbaycanca Català Čeština Deutsch Español Euskara Français 한국어 Italiano 日本語 Polski Português Română Русский සිංහල Türkçe Українська 中文 Edit links This page was last edited on 14 October 2020, at 07:45 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License;additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement